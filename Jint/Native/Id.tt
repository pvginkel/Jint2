<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#

    string tokenPath = Path.Combine(
	    Path.GetDirectoryName(Host.TemplateFile),
	    Path.GetFileNameWithoutExtension(Host.TemplateFile) + ".tokens"
    );

    var tokens = new List<string>();

    foreach (string line in File.ReadAllLines(tokenPath))
    {
        string trimmed = line.Trim();
        if (trimmed.Length == 0 || trimmed[0] == '#')
            continue;

        tokens.Add(trimmed);
    }

    tokens.Sort();

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     Tokens are maintained in the Id.tokens file. To add a new token,
//     add the token to that file, right click Id.tt and select Run Custom Tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using Jint.Native;

namespace Jint.Native
{
    internal static class Id
    {
<#
    int offset = 1;
    foreach (string token in tokens) { #>
        public<#= token == "ToString" ? " new" : "" #> const int <#= MakeValidToken(token) #> = <#= -(offset++) #>;
<#
    }
#>

        public static void SeedGlobal(JsGlobal target)
        {
            if (target == null)
                throw new ArgumentNullException("target");

<#
    foreach (string token in tokens) { #>
            SeedToken(target, "<#= token #>", <#= MakeValidToken(token) #>);
<#
    }
#>
        }

        private static void SeedToken(JsGlobal global, string name, int id)
        {
            int resolvedId = global.ResolveIdentifier(name);
            Debug.Assert(id == resolvedId);
        }
    }
}
<#+

private static List<string> _invalidTokens = new List<string>(new[] { "this", "null", "global" });

private static string MakeValidToken(string token)
{
    if (_invalidTokens.Contains(token))
        return "@" + token;

    return token;
}

#>