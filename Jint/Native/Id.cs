//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     Tokens are maintained in the Id.tokens file. To add a new token,
//     add the token to that file, right click Id.tt and select Run Custom Tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using Jint.Native;

namespace Jint.Native
{
    internal static class Id
    {
        public const int __lookupGetter__ = -1;
        public const int __lookupSetter__ = -2;
        public const int __proto__ = -3;
        public const int abs = -4;
        public const int acos = -5;
        public const int apply = -6;
        public const int Array = -7;
        public const int asin = -8;
        public const int atan = -9;
        public const int atan2 = -10;
        public const int Boolean = -11;
        public const int call = -12;
        public const int ceil = -13;
        public const int charAt = -14;
        public const int charCodeAt = -15;
        public const int concat = -16;
        public const int configurable = -17;
        public const int constructor = -18;
        public const int cos = -19;
        public const int Date = -20;
        public const int decodeURI = -21;
        public const int decodeURIComponent = -22;
        public const int defineProperty = -23;
        public const int E = -24;
        public const int encodeURI = -25;
        public const int encodeURIComponent = -26;
        public const int enumerable = -27;
        public const int Error = -28;
        public const int eval = -29;
        public const int EvalError = -30;
        public const int exec = -31;
        public const int exp = -32;
        public const int floor = -33;
        public const int fromCharCode = -34;
        public const int Function = -35;
        public const int get = -36;
        public const int getDate = -37;
        public const int getDay = -38;
        public const int getFullYear = -39;
        public const int getHours = -40;
        public const int getMilliseconds = -41;
        public const int getMinutes = -42;
        public const int getMonth = -43;
        public const int getPrototypeOf = -44;
        public const int getSeconds = -45;
        public const int getTime = -46;
        public const int getTimezoneOffset = -47;
        public const int getUTCDate = -48;
        public const int getUTCDay = -49;
        public const int getUTCFullYear = -50;
        public const int getUTCHours = -51;
        public const int getUTCMilliseconds = -52;
        public const int getUTCMinutes = -53;
        public const int getUTCMonth = -54;
        public const int getUTCSeconds = -55;
        public const int @global = -56;
        public const int hasOwnProperty = -57;
        public const int index = -58;
        public const int indexOf = -59;
        public const int Infinity = -60;
        public const int input = -61;
        public const int isFinite = -62;
        public const int isNaN = -63;
        public const int isPrototypeOf = -64;
        public const int join = -65;
        public const int lastIndex = -66;
        public const int lastIndexOf = -67;
        public const int length = -68;
        public const int LN10 = -69;
        public const int LN2 = -70;
        public const int localeCompare = -71;
        public const int log = -72;
        public const int LOG2E = -73;
        public const int match = -74;
        public const int Math = -75;
        public const int max = -76;
        public const int MAX_VALUE = -77;
        public const int message = -78;
        public const int min = -79;
        public const int MIN_VALUE = -80;
        public const int name = -81;
        public const int NaN = -82;
        public const int NEGATIVE_INFINITY = -83;
        public const int now = -84;
        public const int @null = -85;
        public const int Number = -86;
        public const int Object = -87;
        public const int parse = -88;
        public const int parseFloat = -89;
        public const int parseInt = -90;
        public const int parseLocale = -91;
        public const int PI = -92;
        public const int pop = -93;
        public const int POSITIVE_INFINITY = -94;
        public const int pow = -95;
        public const int propertyIsEnumerable = -96;
        public const int prototype = -97;
        public const int push = -98;
        public const int random = -99;
        public const int RangeError = -100;
        public const int ReferenceError = -101;
        public const int RegExp = -102;
        public const int replace = -103;
        public const int reverse = -104;
        public const int round = -105;
        public const int search = -106;
        public const int set = -107;
        public const int setDate = -108;
        public const int setFullYear = -109;
        public const int setHours = -110;
        public const int setMilliseconds = -111;
        public const int setMinutes = -112;
        public const int setMonth = -113;
        public const int setSeconds = -114;
        public const int setTime = -115;
        public const int setUTCDate = -116;
        public const int setUTCFullYear = -117;
        public const int setUTCHours = -118;
        public const int setUTCMilliseconds = -119;
        public const int setUTCMinutes = -120;
        public const int setUTCMonth = -121;
        public const int setUTCSeconds = -122;
        public const int shift = -123;
        public const int sin = -124;
        public const int slice = -125;
        public const int sort = -126;
        public const int source = -127;
        public const int splice = -128;
        public const int split = -129;
        public const int sqrt = -130;
        public const int SQRT1_2 = -131;
        public const int SQRT2 = -132;
        public const int String = -133;
        public const int substr = -134;
        public const int substring = -135;
        public const int SyntaxError = -136;
        public const int tan = -137;
        public const int test = -138;
        public const int @this = -139;
        public const int ToBoolean = -140;
        public const int ToByte = -141;
        public const int ToChar = -142;
        public const int toDateString = -143;
        public const int ToDateTime = -144;
        public const int ToDecimal = -145;
        public const int ToDouble = -146;
        public const int toExponential = -147;
        public const int toFixed = -148;
        public const int ToInt16 = -149;
        public const int ToInt32 = -150;
        public const int ToInt64 = -151;
        public const int toLocaleDateString = -152;
        public const int toLocaleLowerCase = -153;
        public const int toLocaleString = -154;
        public const int toLocaleTimeString = -155;
        public const int toLocaleUpperCase = -156;
        public const int toLowerCase = -157;
        public const int toPrecision = -158;
        public const int ToSByte = -159;
        public const int ToSingle = -160;
        public const int toString = -161;
        public new const int ToString = -162;
        public const int toTimeString = -163;
        public const int ToUInt16 = -164;
        public const int ToUInt32 = -165;
        public const int ToUInt64 = -166;
        public const int toUpperCase = -167;
        public const int toUTCString = -168;
        public const int TypeError = -169;
        public const int undefined = -170;
        public const int unshift = -171;
        public const int URIError = -172;
        public const int UTC = -173;
        public const int value = -174;
        public const int valueOf = -175;
        public const int writable = -176;

        public static void SeedGlobal(JsGlobal target)
        {
            if (target == null)
                throw new ArgumentNullException("target");

            SeedToken(target, "__lookupGetter__", __lookupGetter__);
            SeedToken(target, "__lookupSetter__", __lookupSetter__);
            SeedToken(target, "__proto__", __proto__);
            SeedToken(target, "abs", abs);
            SeedToken(target, "acos", acos);
            SeedToken(target, "apply", apply);
            SeedToken(target, "Array", Array);
            SeedToken(target, "asin", asin);
            SeedToken(target, "atan", atan);
            SeedToken(target, "atan2", atan2);
            SeedToken(target, "Boolean", Boolean);
            SeedToken(target, "call", call);
            SeedToken(target, "ceil", ceil);
            SeedToken(target, "charAt", charAt);
            SeedToken(target, "charCodeAt", charCodeAt);
            SeedToken(target, "concat", concat);
            SeedToken(target, "configurable", configurable);
            SeedToken(target, "constructor", constructor);
            SeedToken(target, "cos", cos);
            SeedToken(target, "Date", Date);
            SeedToken(target, "decodeURI", decodeURI);
            SeedToken(target, "decodeURIComponent", decodeURIComponent);
            SeedToken(target, "defineProperty", defineProperty);
            SeedToken(target, "E", E);
            SeedToken(target, "encodeURI", encodeURI);
            SeedToken(target, "encodeURIComponent", encodeURIComponent);
            SeedToken(target, "enumerable", enumerable);
            SeedToken(target, "Error", Error);
            SeedToken(target, "eval", eval);
            SeedToken(target, "EvalError", EvalError);
            SeedToken(target, "exec", exec);
            SeedToken(target, "exp", exp);
            SeedToken(target, "floor", floor);
            SeedToken(target, "fromCharCode", fromCharCode);
            SeedToken(target, "Function", Function);
            SeedToken(target, "get", get);
            SeedToken(target, "getDate", getDate);
            SeedToken(target, "getDay", getDay);
            SeedToken(target, "getFullYear", getFullYear);
            SeedToken(target, "getHours", getHours);
            SeedToken(target, "getMilliseconds", getMilliseconds);
            SeedToken(target, "getMinutes", getMinutes);
            SeedToken(target, "getMonth", getMonth);
            SeedToken(target, "getPrototypeOf", getPrototypeOf);
            SeedToken(target, "getSeconds", getSeconds);
            SeedToken(target, "getTime", getTime);
            SeedToken(target, "getTimezoneOffset", getTimezoneOffset);
            SeedToken(target, "getUTCDate", getUTCDate);
            SeedToken(target, "getUTCDay", getUTCDay);
            SeedToken(target, "getUTCFullYear", getUTCFullYear);
            SeedToken(target, "getUTCHours", getUTCHours);
            SeedToken(target, "getUTCMilliseconds", getUTCMilliseconds);
            SeedToken(target, "getUTCMinutes", getUTCMinutes);
            SeedToken(target, "getUTCMonth", getUTCMonth);
            SeedToken(target, "getUTCSeconds", getUTCSeconds);
            SeedToken(target, "global", @global);
            SeedToken(target, "hasOwnProperty", hasOwnProperty);
            SeedToken(target, "index", index);
            SeedToken(target, "indexOf", indexOf);
            SeedToken(target, "Infinity", Infinity);
            SeedToken(target, "input", input);
            SeedToken(target, "isFinite", isFinite);
            SeedToken(target, "isNaN", isNaN);
            SeedToken(target, "isPrototypeOf", isPrototypeOf);
            SeedToken(target, "join", join);
            SeedToken(target, "lastIndex", lastIndex);
            SeedToken(target, "lastIndexOf", lastIndexOf);
            SeedToken(target, "length", length);
            SeedToken(target, "LN10", LN10);
            SeedToken(target, "LN2", LN2);
            SeedToken(target, "localeCompare", localeCompare);
            SeedToken(target, "log", log);
            SeedToken(target, "LOG2E", LOG2E);
            SeedToken(target, "match", match);
            SeedToken(target, "Math", Math);
            SeedToken(target, "max", max);
            SeedToken(target, "MAX_VALUE", MAX_VALUE);
            SeedToken(target, "message", message);
            SeedToken(target, "min", min);
            SeedToken(target, "MIN_VALUE", MIN_VALUE);
            SeedToken(target, "name", name);
            SeedToken(target, "NaN", NaN);
            SeedToken(target, "NEGATIVE_INFINITY", NEGATIVE_INFINITY);
            SeedToken(target, "now", now);
            SeedToken(target, "null", @null);
            SeedToken(target, "Number", Number);
            SeedToken(target, "Object", Object);
            SeedToken(target, "parse", parse);
            SeedToken(target, "parseFloat", parseFloat);
            SeedToken(target, "parseInt", parseInt);
            SeedToken(target, "parseLocale", parseLocale);
            SeedToken(target, "PI", PI);
            SeedToken(target, "pop", pop);
            SeedToken(target, "POSITIVE_INFINITY", POSITIVE_INFINITY);
            SeedToken(target, "pow", pow);
            SeedToken(target, "propertyIsEnumerable", propertyIsEnumerable);
            SeedToken(target, "prototype", prototype);
            SeedToken(target, "push", push);
            SeedToken(target, "random", random);
            SeedToken(target, "RangeError", RangeError);
            SeedToken(target, "ReferenceError", ReferenceError);
            SeedToken(target, "RegExp", RegExp);
            SeedToken(target, "replace", replace);
            SeedToken(target, "reverse", reverse);
            SeedToken(target, "round", round);
            SeedToken(target, "search", search);
            SeedToken(target, "set", set);
            SeedToken(target, "setDate", setDate);
            SeedToken(target, "setFullYear", setFullYear);
            SeedToken(target, "setHours", setHours);
            SeedToken(target, "setMilliseconds", setMilliseconds);
            SeedToken(target, "setMinutes", setMinutes);
            SeedToken(target, "setMonth", setMonth);
            SeedToken(target, "setSeconds", setSeconds);
            SeedToken(target, "setTime", setTime);
            SeedToken(target, "setUTCDate", setUTCDate);
            SeedToken(target, "setUTCFullYear", setUTCFullYear);
            SeedToken(target, "setUTCHours", setUTCHours);
            SeedToken(target, "setUTCMilliseconds", setUTCMilliseconds);
            SeedToken(target, "setUTCMinutes", setUTCMinutes);
            SeedToken(target, "setUTCMonth", setUTCMonth);
            SeedToken(target, "setUTCSeconds", setUTCSeconds);
            SeedToken(target, "shift", shift);
            SeedToken(target, "sin", sin);
            SeedToken(target, "slice", slice);
            SeedToken(target, "sort", sort);
            SeedToken(target, "source", source);
            SeedToken(target, "splice", splice);
            SeedToken(target, "split", split);
            SeedToken(target, "sqrt", sqrt);
            SeedToken(target, "SQRT1_2", SQRT1_2);
            SeedToken(target, "SQRT2", SQRT2);
            SeedToken(target, "String", String);
            SeedToken(target, "substr", substr);
            SeedToken(target, "substring", substring);
            SeedToken(target, "SyntaxError", SyntaxError);
            SeedToken(target, "tan", tan);
            SeedToken(target, "test", test);
            SeedToken(target, "this", @this);
            SeedToken(target, "ToBoolean", ToBoolean);
            SeedToken(target, "ToByte", ToByte);
            SeedToken(target, "ToChar", ToChar);
            SeedToken(target, "toDateString", toDateString);
            SeedToken(target, "ToDateTime", ToDateTime);
            SeedToken(target, "ToDecimal", ToDecimal);
            SeedToken(target, "ToDouble", ToDouble);
            SeedToken(target, "toExponential", toExponential);
            SeedToken(target, "toFixed", toFixed);
            SeedToken(target, "ToInt16", ToInt16);
            SeedToken(target, "ToInt32", ToInt32);
            SeedToken(target, "ToInt64", ToInt64);
            SeedToken(target, "toLocaleDateString", toLocaleDateString);
            SeedToken(target, "toLocaleLowerCase", toLocaleLowerCase);
            SeedToken(target, "toLocaleString", toLocaleString);
            SeedToken(target, "toLocaleTimeString", toLocaleTimeString);
            SeedToken(target, "toLocaleUpperCase", toLocaleUpperCase);
            SeedToken(target, "toLowerCase", toLowerCase);
            SeedToken(target, "toPrecision", toPrecision);
            SeedToken(target, "ToSByte", ToSByte);
            SeedToken(target, "ToSingle", ToSingle);
            SeedToken(target, "toString", toString);
            SeedToken(target, "ToString", ToString);
            SeedToken(target, "toTimeString", toTimeString);
            SeedToken(target, "ToUInt16", ToUInt16);
            SeedToken(target, "ToUInt32", ToUInt32);
            SeedToken(target, "ToUInt64", ToUInt64);
            SeedToken(target, "toUpperCase", toUpperCase);
            SeedToken(target, "toUTCString", toUTCString);
            SeedToken(target, "TypeError", TypeError);
            SeedToken(target, "undefined", undefined);
            SeedToken(target, "unshift", unshift);
            SeedToken(target, "URIError", URIError);
            SeedToken(target, "UTC", UTC);
            SeedToken(target, "value", value);
            SeedToken(target, "valueOf", valueOf);
            SeedToken(target, "writable", writable);
        }

        private static void SeedToken(JsGlobal global, string name, int id)
        {
            int resolvedId = global.ResolveIdentifier(name);
            Debug.Assert(id == resolvedId);
        }
    }
}
