//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\ES3.g 2013-11-18 20:16:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System;
using System.Text;
using System.Globalization;
using Jint.Expressions;
using Jint.Debugger;


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Jint.Parser 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class ES3Parser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "ADD", "ADDASS", "AND", "ANDASS", "ARGS", "ARRAY", "ASSIGN", "BLOCK", "BOOLEAN", "BREAK", "BSLASH", "BYFIELD", "BYINDEX", "BYTE", "BackslashSequence", "CALL", "CASE", "CATCH", "CEXPR", "CHAR", "CLASS", "COLON", "COMMA", "CONST", "CONTINUE", "CR", "CharacterEscapeSequence", "DEBUGGER", "DEC", "DEFAULT", "DELETE", "DIV", "DIVASS", "DO", "DOT", "DOUBLE", "DQUOTE", "DecimalDigit", "DecimalIntegerLiteral", "DecimalLiteral", "ELSE", "ENUM", "EOL", "EQ", "EXPORT", "EXPR", "EXTENDS", "EscapeSequence", "ExponentPart", "FALSE", "FF", "FINAL", "FINALLY", "FLOAT", "FOR", "FORITER", "FORSTEP", "FUNCTION", "GOTO", "GT", "GTE", "HexDigit", "HexEscapeSequence", "HexIntegerLiteral", "IF", "IMPLEMENTS", "IMPORT", "IN", "INC", "INSTANCEOF", "INT", "INTERFACE", "INV", "ITEM", "Identifier", "IdentifierNameASCIIStart", "IdentifierPart", "IdentifierStartASCII", "LABELLED", "LAND", "LBRACE", "LBRACK", "LF", "LONG", "LOR", "LPAREN", "LS", "LT", "LTE", "LineTerminator", "MOD", "MODASS", "MUL", "MULASS", "MultiLineComment", "NAMEDVALUE", "NATIVE", "NBSP", "NEG", "NEQ", "NEW", "NOT", "NSAME", "NULL", "OBJECT", "OR", "ORASS", "OctalDigit", "OctalEscapeSequence", "OctalIntegerLiteral", "PACKAGE", "PAREXPR", "PDEC", "PINC", "POS", "PRIVATE", "PROTECTED", "PS", "PUBLIC", "QUE", "RBRACE", "RBRACK", "RETURN", "RPAREN", "RegularExpressionChar", "RegularExpressionFirstChar", "RegularExpressionLiteral", "SAME", "SEMIC", "SHL", "SHLASS", "SHORT", "SHR", "SHRASS", "SHU", "SHUASS", "SP", "SQUOTE", "STATIC", "SUB", "SUBASS", "SUPER", "SWITCH", "SYNCHRONIZED", "SingleLineComment", "StringLiteral", "TAB", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "TYPEOF", "USP", "UnicodeEscapeSequence", "VAR", "VOID", "VOLATILE", "VT", "WHILE", "WITH", "WhiteSpace", "XOR", "XORASS", "ZeroToThree"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int ADD=5;
	public const int ADDASS=6;
	public const int AND=7;
	public const int ANDASS=8;
	public const int ARGS=9;
	public const int ARRAY=10;
	public const int ASSIGN=11;
	public const int BLOCK=12;
	public const int BOOLEAN=13;
	public const int BREAK=14;
	public const int BSLASH=15;
	public const int BYFIELD=16;
	public const int BYINDEX=17;
	public const int BYTE=18;
	public const int BackslashSequence=19;
	public const int CALL=20;
	public const int CASE=21;
	public const int CATCH=22;
	public const int CEXPR=23;
	public const int CHAR=24;
	public const int CLASS=25;
	public const int COLON=26;
	public const int COMMA=27;
	public const int CONST=28;
	public const int CONTINUE=29;
	public const int CR=30;
	public const int CharacterEscapeSequence=31;
	public const int DEBUGGER=32;
	public const int DEC=33;
	public const int DEFAULT=34;
	public const int DELETE=35;
	public const int DIV=36;
	public const int DIVASS=37;
	public const int DO=38;
	public const int DOT=39;
	public const int DOUBLE=40;
	public const int DQUOTE=41;
	public const int DecimalDigit=42;
	public const int DecimalIntegerLiteral=43;
	public const int DecimalLiteral=44;
	public const int ELSE=45;
	public const int ENUM=46;
	public const int EOL=47;
	public const int EQ=48;
	public const int EXPORT=49;
	public const int EXPR=50;
	public const int EXTENDS=51;
	public const int EscapeSequence=52;
	public const int ExponentPart=53;
	public const int FALSE=54;
	public const int FF=55;
	public const int FINAL=56;
	public const int FINALLY=57;
	public const int FLOAT=58;
	public const int FOR=59;
	public const int FORITER=60;
	public const int FORSTEP=61;
	public const int FUNCTION=62;
	public const int GOTO=63;
	public const int GT=64;
	public const int GTE=65;
	public const int HexDigit=66;
	public const int HexEscapeSequence=67;
	public const int HexIntegerLiteral=68;
	public const int IF=69;
	public const int IMPLEMENTS=70;
	public const int IMPORT=71;
	public const int IN=72;
	public const int INC=73;
	public const int INSTANCEOF=74;
	public const int INT=75;
	public const int INTERFACE=76;
	public const int INV=77;
	public const int ITEM=78;
	public const int Identifier=79;
	public const int IdentifierNameASCIIStart=80;
	public const int IdentifierPart=81;
	public const int IdentifierStartASCII=82;
	public const int LABELLED=83;
	public const int LAND=84;
	public const int LBRACE=85;
	public const int LBRACK=86;
	public const int LF=87;
	public const int LONG=88;
	public const int LOR=89;
	public const int LPAREN=90;
	public const int LS=91;
	public const int LT=92;
	public const int LTE=93;
	public const int LineTerminator=94;
	public const int MOD=95;
	public const int MODASS=96;
	public const int MUL=97;
	public const int MULASS=98;
	public const int MultiLineComment=99;
	public const int NAMEDVALUE=100;
	public const int NATIVE=101;
	public const int NBSP=102;
	public const int NEG=103;
	public const int NEQ=104;
	public const int NEW=105;
	public const int NOT=106;
	public const int NSAME=107;
	public const int NULL=108;
	public const int OBJECT=109;
	public const int OR=110;
	public const int ORASS=111;
	public const int OctalDigit=112;
	public const int OctalEscapeSequence=113;
	public const int OctalIntegerLiteral=114;
	public const int PACKAGE=115;
	public const int PAREXPR=116;
	public const int PDEC=117;
	public const int PINC=118;
	public const int POS=119;
	public const int PRIVATE=120;
	public const int PROTECTED=121;
	public const int PS=122;
	public const int PUBLIC=123;
	public const int QUE=124;
	public const int RBRACE=125;
	public const int RBRACK=126;
	public const int RETURN=127;
	public const int RPAREN=128;
	public const int RegularExpressionChar=129;
	public const int RegularExpressionFirstChar=130;
	public const int RegularExpressionLiteral=131;
	public const int SAME=132;
	public const int SEMIC=133;
	public const int SHL=134;
	public const int SHLASS=135;
	public const int SHORT=136;
	public const int SHR=137;
	public const int SHRASS=138;
	public const int SHU=139;
	public const int SHUASS=140;
	public const int SP=141;
	public const int SQUOTE=142;
	public const int STATIC=143;
	public const int SUB=144;
	public const int SUBASS=145;
	public const int SUPER=146;
	public const int SWITCH=147;
	public const int SYNCHRONIZED=148;
	public const int SingleLineComment=149;
	public const int StringLiteral=150;
	public const int TAB=151;
	public const int THIS=152;
	public const int THROW=153;
	public const int THROWS=154;
	public const int TRANSIENT=155;
	public const int TRUE=156;
	public const int TRY=157;
	public const int TYPEOF=158;
	public const int USP=159;
	public const int UnicodeEscapeSequence=160;
	public const int VAR=161;
	public const int VOID=162;
	public const int VOLATILE=163;
	public const int VT=164;
	public const int WHILE=165;
	public const int WITH=166;
	public const int WhiteSpace=167;
	public const int XOR=168;
	public const int XORASS=169;
	public const int ZeroToThree=170;

	// delegates
	// delegators

	public ES3Parser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public ES3Parser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ES3Parser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\ES3.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class token_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public token_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_token();
	partial void LeaveRule_token();

	// $ANTLR start "token"
	// ..\\ES3.g:314:1: token : ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral );
	[GrammarRule("token")]
	private ES3Parser.token_return token()
	{
		EnterRule_token();
		EnterRule("token", 1);
		TraceIn("token", 1);
		ES3Parser.token_return retval = new ES3Parser.token_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken Identifier2 = default(IToken);
		IToken StringLiteral5 = default(IToken);
		ES3Parser.reservedWord_return reservedWord1 = default(ES3Parser.reservedWord_return);
		ES3Parser.punctuator_return punctuator3 = default(ES3Parser.punctuator_return);
		ES3Parser.numericLiteral_return numericLiteral4 = default(ES3Parser.numericLiteral_return);

		object Identifier2_tree = default(object);
		object StringLiteral5_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "token");
		DebugLocation(314, 1);
		try
		{
			// ..\\ES3.g:315:2: ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral )
			int alt1=5;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case ABSTRACT:
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DEBUGGER:
			case DEFAULT:
			case DELETE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FALSE:
			case FINAL:
			case FINALLY:
			case FLOAT:
			case FOR:
			case FUNCTION:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case IMPORT:
			case IN:
			case INSTANCEOF:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case NEW:
			case NULL:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case RETURN:
			case SHORT:
			case STATIC:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case THIS:
			case THROW:
			case THROWS:
			case TRANSIENT:
			case TRUE:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WITH:
				{
				alt1 = 1;
				}
				break;
			case Identifier:
				{
				alt1 = 2;
				}
				break;
			case ADD:
			case ADDASS:
			case AND:
			case ANDASS:
			case ASSIGN:
			case COLON:
			case COMMA:
			case DEC:
			case DIV:
			case DIVASS:
			case DOT:
			case EQ:
			case GT:
			case GTE:
			case INC:
			case INV:
			case LAND:
			case LBRACE:
			case LBRACK:
			case LOR:
			case LPAREN:
			case LT:
			case LTE:
			case MOD:
			case MODASS:
			case MUL:
			case MULASS:
			case NEQ:
			case NOT:
			case NSAME:
			case OR:
			case ORASS:
			case QUE:
			case RBRACE:
			case RBRACK:
			case RPAREN:
			case SAME:
			case SEMIC:
			case SHL:
			case SHLASS:
			case SHR:
			case SHRASS:
			case SHU:
			case SHUASS:
			case SUB:
			case SUBASS:
			case XOR:
			case XORASS:
				{
				alt1 = 3;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt1 = 4;
				}
				break;
			case StringLiteral:
				{
				alt1 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:315:4: reservedWord
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(315, 4);
				PushFollow(Follow._reservedWord_in_token1773);
				reservedWord1=reservedWord();
				PopFollow();

				adaptor.AddChild(root_0, reservedWord1.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:316:4: Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(316, 4);
				Identifier2=(IToken)Match(input,Identifier,Follow._Identifier_in_token1778); 
				Identifier2_tree = (object)adaptor.Create(Identifier2);
				adaptor.AddChild(root_0, Identifier2_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:317:4: punctuator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._punctuator_in_token1783);
				punctuator3=punctuator();
				PopFollow();

				adaptor.AddChild(root_0, punctuator3.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:318:4: numericLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 4);
				PushFollow(Follow._numericLiteral_in_token1788);
				numericLiteral4=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, numericLiteral4.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:319:4: StringLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(319, 4);
				StringLiteral5=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_token1793); 
				StringLiteral5_tree = (object)adaptor.Create(StringLiteral5);
				adaptor.AddChild(root_0, StringLiteral5_tree);


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("token", 1);
			LeaveRule("token", 1);
			LeaveRule_token();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "token"); }
		return retval;

	}
	// $ANTLR end "token"

	private sealed partial class reservedWord_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public reservedWord_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_reservedWord();
	partial void LeaveRule_reservedWord();

	// $ANTLR start "reservedWord"
	// ..\\ES3.g:324:1: reservedWord : ( keyword | futureReservedWord | NULL | booleanLiteral );
	[GrammarRule("reservedWord")]
	private ES3Parser.reservedWord_return reservedWord()
	{
		EnterRule_reservedWord();
		EnterRule("reservedWord", 2);
		TraceIn("reservedWord", 2);
		ES3Parser.reservedWord_return retval = new ES3Parser.reservedWord_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NULL8 = default(IToken);
		ES3Parser.keyword_return keyword6 = default(ES3Parser.keyword_return);
		ES3Parser.futureReservedWord_return futureReservedWord7 = default(ES3Parser.futureReservedWord_return);
		ES3Parser.booleanLiteral_return booleanLiteral9 = default(ES3Parser.booleanLiteral_return);

		object NULL8_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "reservedWord");
		DebugLocation(324, 1);
		try
		{
			// ..\\ES3.g:325:2: ( keyword | futureReservedWord | NULL | booleanLiteral )
			int alt2=4;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case BREAK:
			case CASE:
			case CATCH:
			case CONTINUE:
			case DEFAULT:
			case DELETE:
			case DO:
			case ELSE:
			case FINALLY:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INSTANCEOF:
			case NEW:
			case RETURN:
			case SWITCH:
			case THIS:
			case THROW:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case WHILE:
			case WITH:
				{
				alt2 = 1;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DEBUGGER:
			case DOUBLE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FINAL:
			case FLOAT:
			case GOTO:
			case IMPLEMENTS:
			case IMPORT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case SUPER:
			case SYNCHRONIZED:
			case THROWS:
			case TRANSIENT:
			case VOLATILE:
				{
				alt2 = 2;
				}
				break;
			case NULL:
				{
				alt2 = 3;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:325:4: keyword
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(325, 4);
				PushFollow(Follow._keyword_in_reservedWord1806);
				keyword6=keyword();
				PopFollow();

				adaptor.AddChild(root_0, keyword6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:326:4: futureReservedWord
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(326, 4);
				PushFollow(Follow._futureReservedWord_in_reservedWord1811);
				futureReservedWord7=futureReservedWord();
				PopFollow();

				adaptor.AddChild(root_0, futureReservedWord7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:327:4: NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(327, 4);
				NULL8=(IToken)Match(input,NULL,Follow._NULL_in_reservedWord1816); 
				NULL8_tree = (object)adaptor.Create(NULL8);
				adaptor.AddChild(root_0, NULL8_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:328:4: booleanLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(328, 4);
				PushFollow(Follow._booleanLiteral_in_reservedWord1821);
				booleanLiteral9=booleanLiteral();
				PopFollow();

				adaptor.AddChild(root_0, booleanLiteral9.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reservedWord", 2);
			LeaveRule("reservedWord", 2);
			LeaveRule_reservedWord();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "reservedWord"); }
		return retval;

	}
	// $ANTLR end "reservedWord"

	private sealed partial class keyword_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public keyword_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_keyword();
	partial void LeaveRule_keyword();

	// $ANTLR start "keyword"
	// ..\\ES3.g:335:1: keyword : ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH );
	[GrammarRule("keyword")]
	private ES3Parser.keyword_return keyword()
	{
		EnterRule_keyword();
		EnterRule("keyword", 3);
		TraceIn("keyword", 3);
		ES3Parser.keyword_return retval = new ES3Parser.keyword_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set10 = default(IToken);

		object set10_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "keyword");
		DebugLocation(335, 1);
		try
		{
			// ..\\ES3.g:336:2: ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(336, 2);
			set10=(IToken)input.LT(1);
			if (input.LA(1)==BREAK||(input.LA(1)>=CASE && input.LA(1)<=CATCH)||input.LA(1)==CONTINUE||(input.LA(1)>=DEFAULT && input.LA(1)<=DELETE)||input.LA(1)==DO||input.LA(1)==ELSE||input.LA(1)==FINALLY||input.LA(1)==FOR||input.LA(1)==FUNCTION||input.LA(1)==IF||input.LA(1)==IN||input.LA(1)==INSTANCEOF||input.LA(1)==NEW||input.LA(1)==RETURN||input.LA(1)==SWITCH||(input.LA(1)>=THIS && input.LA(1)<=THROW)||(input.LA(1)>=TRY && input.LA(1)<=TYPEOF)||(input.LA(1)>=VAR && input.LA(1)<=VOID)||(input.LA(1)>=WHILE && input.LA(1)<=WITH))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set10));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyword", 3);
			LeaveRule("keyword", 3);
			LeaveRule_keyword();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "keyword"); }
		return retval;

	}
	// $ANTLR end "keyword"

	private sealed partial class futureReservedWord_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public futureReservedWord_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_futureReservedWord();
	partial void LeaveRule_futureReservedWord();

	// $ANTLR start "futureReservedWord"
	// ..\\ES3.g:367:1: futureReservedWord : ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE );
	[GrammarRule("futureReservedWord")]
	private ES3Parser.futureReservedWord_return futureReservedWord()
	{
		EnterRule_futureReservedWord();
		EnterRule("futureReservedWord", 4);
		TraceIn("futureReservedWord", 4);
		ES3Parser.futureReservedWord_return retval = new ES3Parser.futureReservedWord_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set11 = default(IToken);

		object set11_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "futureReservedWord");
		DebugLocation(367, 1);
		try
		{
			// ..\\ES3.g:368:2: ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(368, 2);
			set11=(IToken)input.LT(1);
			if (input.LA(1)==ABSTRACT||input.LA(1)==BOOLEAN||input.LA(1)==BYTE||(input.LA(1)>=CHAR && input.LA(1)<=CLASS)||input.LA(1)==CONST||input.LA(1)==DEBUGGER||input.LA(1)==DOUBLE||input.LA(1)==ENUM||input.LA(1)==EXPORT||input.LA(1)==EXTENDS||input.LA(1)==FINAL||input.LA(1)==FLOAT||input.LA(1)==GOTO||(input.LA(1)>=IMPLEMENTS && input.LA(1)<=IMPORT)||(input.LA(1)>=INT && input.LA(1)<=INTERFACE)||input.LA(1)==LONG||input.LA(1)==NATIVE||input.LA(1)==PACKAGE||(input.LA(1)>=PRIVATE && input.LA(1)<=PROTECTED)||input.LA(1)==PUBLIC||input.LA(1)==SHORT||input.LA(1)==STATIC||input.LA(1)==SUPER||input.LA(1)==SYNCHRONIZED||(input.LA(1)>=THROWS && input.LA(1)<=TRANSIENT)||input.LA(1)==VOLATILE)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set11));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("futureReservedWord", 4);
			LeaveRule("futureReservedWord", 4);
			LeaveRule_futureReservedWord();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "futureReservedWord"); }
		return retval;

	}
	// $ANTLR end "futureReservedWord"

	private sealed partial class punctuator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public punctuator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_punctuator();
	partial void LeaveRule_punctuator();

	// $ANTLR start "punctuator"
	// ..\\ES3.g:445:1: punctuator : ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS );
	[GrammarRule("punctuator")]
	private ES3Parser.punctuator_return punctuator()
	{
		EnterRule_punctuator();
		EnterRule("punctuator", 5);
		TraceIn("punctuator", 5);
		ES3Parser.punctuator_return retval = new ES3Parser.punctuator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set12 = default(IToken);

		object set12_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "punctuator");
		DebugLocation(445, 1);
		try
		{
			// ..\\ES3.g:446:2: ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(446, 2);
			set12=(IToken)input.LT(1);
			if ((input.LA(1)>=ADD && input.LA(1)<=ANDASS)||input.LA(1)==ASSIGN||(input.LA(1)>=COLON && input.LA(1)<=COMMA)||input.LA(1)==DEC||(input.LA(1)>=DIV && input.LA(1)<=DIVASS)||input.LA(1)==DOT||input.LA(1)==EQ||(input.LA(1)>=GT && input.LA(1)<=GTE)||input.LA(1)==INC||input.LA(1)==INV||(input.LA(1)>=LAND && input.LA(1)<=LBRACK)||(input.LA(1)>=LOR && input.LA(1)<=LPAREN)||(input.LA(1)>=LT && input.LA(1)<=LTE)||(input.LA(1)>=MOD && input.LA(1)<=MULASS)||input.LA(1)==NEQ||(input.LA(1)>=NOT && input.LA(1)<=NSAME)||(input.LA(1)>=OR && input.LA(1)<=ORASS)||(input.LA(1)>=QUE && input.LA(1)<=RBRACK)||input.LA(1)==RPAREN||(input.LA(1)>=SAME && input.LA(1)<=SHLASS)||(input.LA(1)>=SHR && input.LA(1)<=SHUASS)||(input.LA(1)>=SUB && input.LA(1)<=SUBASS)||(input.LA(1)>=XOR && input.LA(1)<=XORASS))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set12));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("punctuator", 5);
			LeaveRule("punctuator", 5);
			LeaveRule_punctuator();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "punctuator"); }
		return retval;

	}
	// $ANTLR end "punctuator"

	private sealed partial class literal_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public literal_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// ..\\ES3.g:500:1: literal returns [ExpressionSyntax value] : (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral );
	[GrammarRule("literal")]
	private ES3Parser.literal_return literal()
	{
		EnterRule_literal();
		EnterRule("literal", 6);
		TraceIn("literal", 6);
		ES3Parser.literal_return retval = new ES3Parser.literal_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken exp1 = default(IToken);
		IToken exp4 = default(IToken);
		IToken exp5 = default(IToken);
		ES3Parser.booleanLiteral_return exp2 = default(ES3Parser.booleanLiteral_return);
		ES3Parser.numericLiteral_return exp3 = default(ES3Parser.numericLiteral_return);

		object exp1_tree = default(object);
		object exp4_tree = default(object);
		object exp5_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(500, 1);
		try
		{
			// ..\\ES3.g:501:2: (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral )
			int alt3=5;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case NULL:
				{
				alt3 = 1;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt3 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt3 = 3;
				}
				break;
			case StringLiteral:
				{
				alt3 = 4;
				}
				break;
			case RegularExpressionLiteral:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:501:4: exp1= NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(501, 8);
				exp1=(IToken)Match(input,NULL,Follow._NULL_in_literal2508); 
				exp1_tree = (object)adaptor.Create(exp1);
				adaptor.AddChild(root_0, exp1_tree);

				DebugLocation(501, 14);
				 retval.value = new IdentifierSyntax(exp1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:502:4: exp2= booleanLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(502, 8);
				PushFollow(Follow._booleanLiteral_in_literal2517);
				exp2=booleanLiteral();
				PopFollow();

				adaptor.AddChild(root_0, exp2.Tree);
				DebugLocation(502, 24);
				 retval.value = new ValueSyntax(exp2.value, TypeCode.Boolean); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:503:4: exp3= numericLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(503, 8);
				PushFollow(Follow._numericLiteral_in_literal2526);
				exp3=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, exp3.Tree);
				DebugLocation(503, 24);
				 retval.value = new ValueSyntax(exp3.value, TypeCode.Double); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:504:4: exp4= StringLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(504, 8);
				exp4=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_literal2535); 
				exp4_tree = (object)adaptor.Create(exp4);
				adaptor.AddChild(root_0, exp4_tree);

				DebugLocation(504, 24);
				 retval.value = new ValueSyntax(extractString(exp4.Text), TypeCode.String); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:505:4: exp5= RegularExpressionLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(505, 8);
				exp5=(IToken)Match(input,RegularExpressionLiteral,Follow._RegularExpressionLiteral_in_literal2545); 
				exp5_tree = (object)adaptor.Create(exp5);
				adaptor.AddChild(root_0, exp5_tree);

				DebugLocation(505, 34);
				 retval.value = new RegexpSyntax(extractRegExpPattern(exp5.Text), extractRegExpOption(exp5.Text)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 6);
			LeaveRule("literal", 6);
			LeaveRule_literal();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	private sealed partial class booleanLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public bool value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public booleanLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_booleanLiteral();
	partial void LeaveRule_booleanLiteral();

	// $ANTLR start "booleanLiteral"
	// ..\\ES3.g:508:1: booleanLiteral returns [bool value] : ( TRUE | FALSE );
	[GrammarRule("booleanLiteral")]
	private ES3Parser.booleanLiteral_return booleanLiteral()
	{
		EnterRule_booleanLiteral();
		EnterRule("booleanLiteral", 7);
		TraceIn("booleanLiteral", 7);
		ES3Parser.booleanLiteral_return retval = new ES3Parser.booleanLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TRUE13 = default(IToken);
		IToken FALSE14 = default(IToken);

		object TRUE13_tree = default(object);
		object FALSE14_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "booleanLiteral");
		DebugLocation(508, 1);
		try
		{
			// ..\\ES3.g:509:2: ( TRUE | FALSE )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==TRUE))
			{
				alt4 = 1;
			}
			else if ((LA4_0==FALSE))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:509:4: TRUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(509, 4);
				TRUE13=(IToken)Match(input,TRUE,Follow._TRUE_in_booleanLiteral2562); 
				TRUE13_tree = (object)adaptor.Create(TRUE13);
				adaptor.AddChild(root_0, TRUE13_tree);

				DebugLocation(509, 9);
				 retval.value = true; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:510:4: FALSE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(510, 4);
				FALSE14=(IToken)Match(input,FALSE,Follow._FALSE_in_booleanLiteral2569); 
				FALSE14_tree = (object)adaptor.Create(FALSE14);
				adaptor.AddChild(root_0, FALSE14_tree);

				DebugLocation(510, 10);
				 retval.value = false; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanLiteral", 7);
			LeaveRule("booleanLiteral", 7);
			LeaveRule_booleanLiteral();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "booleanLiteral"); }
		return retval;

	}
	// $ANTLR end "booleanLiteral"

	private sealed partial class numericLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public double value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public numericLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_numericLiteral();
	partial void LeaveRule_numericLiteral();

	// $ANTLR start "numericLiteral"
	// ..\\ES3.g:555:1: numericLiteral returns [double value] : (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral );
	[GrammarRule("numericLiteral")]
	private ES3Parser.numericLiteral_return numericLiteral()
	{
		EnterRule_numericLiteral();
		EnterRule("numericLiteral", 8);
		TraceIn("numericLiteral", 8);
		ES3Parser.numericLiteral_return retval = new ES3Parser.numericLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken ex3 = default(IToken);

		object ex1_tree = default(object);
		object ex2_tree = default(object);
		object ex3_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "numericLiteral");
		DebugLocation(555, 1);
		try
		{
			// ..\\ES3.g:556:2: (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case DecimalLiteral:
				{
				alt5 = 1;
				}
				break;
			case OctalIntegerLiteral:
				{
				alt5 = 2;
				}
				break;
			case HexIntegerLiteral:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:556:4: ex1= DecimalLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(556, 7);
				ex1=(IToken)Match(input,DecimalLiteral,Follow._DecimalLiteral_in_numericLiteral2780); 
				ex1_tree = (object)adaptor.Create(ex1);
				adaptor.AddChild(root_0, ex1_tree);

				DebugLocation(556, 23);
				 retval.value = double.Parse(ex1.Text, NumberStyles.Float, numberFormatInfo); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:557:4: ex2= OctalIntegerLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(557, 7);
				ex2=(IToken)Match(input,OctalIntegerLiteral,Follow._OctalIntegerLiteral_in_numericLiteral2789); 
				ex2_tree = (object)adaptor.Create(ex2);
				adaptor.AddChild(root_0, ex2_tree);

				DebugLocation(557, 28);
				 retval.value = System.Convert.ToInt64(ex2.Text, 8); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:558:4: ex3= HexIntegerLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(558, 7);
				ex3=(IToken)Match(input,HexIntegerLiteral,Follow._HexIntegerLiteral_in_numericLiteral2798); 
				ex3_tree = (object)adaptor.Create(ex3);
				adaptor.AddChild(root_0, ex3_tree);

				DebugLocation(558, 26);
				 retval.value = System.Convert.ToInt64(ex3.Text, 16); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericLiteral", 8);
			LeaveRule("numericLiteral", 8);
			LeaveRule_numericLiteral();
		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "numericLiteral"); }
		return retval;

	}
	// $ANTLR end "numericLiteral"

	private sealed partial class primaryExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primaryExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// ..\\ES3.g:644:1: primaryExpression returns [ExpressionSyntax value] : (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN );
	[GrammarRule("primaryExpression")]
	private ES3Parser.primaryExpression_return primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 9);
		TraceIn("primaryExpression", 9);
		ES3Parser.primaryExpression_return retval = new ES3Parser.primaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken lpar = default(IToken);
		IToken RPAREN15 = default(IToken);
		ES3Parser.literal_return ex3 = default(ES3Parser.literal_return);
		ES3Parser.arrayLiteral_return ex4 = default(ES3Parser.arrayLiteral_return);
		ES3Parser.objectLiteral_return ex5 = default(ES3Parser.objectLiteral_return);
		ES3Parser.expression_return ex6 = default(ES3Parser.expression_return);

		object ex1_tree = default(object);
		object ex2_tree = default(object);
		object lpar_tree = default(object);
		object RPAREN15_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(644, 1);
		try
		{
			// ..\\ES3.g:645:2: (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN )
			int alt6=6;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				alt6 = 1;
				}
				break;
			case Identifier:
				{
				alt6 = 2;
				}
				break;
			case DecimalLiteral:
			case FALSE:
			case HexIntegerLiteral:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case TRUE:
				{
				alt6 = 3;
				}
				break;
			case LBRACK:
				{
				alt6 = 4;
				}
				break;
			case LBRACE:
				{
				alt6 = 5;
				}
				break;
			case LPAREN:
				{
				alt6 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:645:4: ex1= THIS
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(645, 7);
				ex1=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression3200); 
				ex1_tree = (object)adaptor.Create(ex1);
				adaptor.AddChild(root_0, ex1_tree);

				DebugLocation(645, 13);
				 retval.value = new IdentifierSyntax(ex1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:646:4: ex2= Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(646, 7);
				ex2=(IToken)Match(input,Identifier,Follow._Identifier_in_primaryExpression3209); 
				ex2_tree = (object)adaptor.Create(ex2);
				adaptor.AddChild(root_0, ex2_tree);

				DebugLocation(646, 19);
				 retval.value = new IdentifierSyntax(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:647:4: ex3= literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(647, 7);
				PushFollow(Follow._literal_in_primaryExpression3218);
				ex3=literal();
				PopFollow();

				adaptor.AddChild(root_0, ex3.Tree);
				DebugLocation(647, 16);
				 retval.value = ex3.value; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:648:4: ex4= arrayLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(648, 7);
				PushFollow(Follow._arrayLiteral_in_primaryExpression3227);
				ex4=arrayLiteral();
				PopFollow();

				adaptor.AddChild(root_0, ex4.Tree);
				DebugLocation(648, 21);
				 retval.value = ex4.value; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:649:4: ex5= objectLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(649, 7);
				PushFollow(Follow._objectLiteral_in_primaryExpression3236);
				ex5=objectLiteral();
				PopFollow();

				adaptor.AddChild(root_0, ex5.Tree);
				DebugLocation(649, 22);
				 retval.value = ex5.value; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:650:4: lpar= LPAREN ex6= expression RPAREN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(650, 8);
				lpar=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression3245); 
				lpar_tree = (object)adaptor.Create(lpar);
				adaptor.AddChild(root_0, lpar_tree);

				DebugLocation(650, 19);
				PushFollow(Follow._expression_in_primaryExpression3249);
				ex6=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex6.Tree);
				DebugLocation(650, 32);
				RPAREN15=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression3252); 
				RPAREN15_tree = (object)adaptor.Create(RPAREN15);
				adaptor.AddChild(root_0, RPAREN15_tree);

				DebugLocation(650, 40);
				 retval.value = ex6.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 9);
			LeaveRule("primaryExpression", 9);
			LeaveRule_primaryExpression();
		}
		DebugLocation(651, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	private sealed partial class arrayLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ArrayDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arrayLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();

	// $ANTLR start "arrayLiteral"
	// ..\\ES3.g:653:1: arrayLiteral returns [ArrayDeclarationSyntax value] : lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK ;
	[GrammarRule("arrayLiteral")]
	private ES3Parser.arrayLiteral_return arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 10);
		TraceIn("arrayLiteral", 10);
		ES3Parser.arrayLiteral_return retval = new ES3Parser.arrayLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken COMMA16 = default(IToken);
		IToken RBRACK17 = default(IToken);
		ES3Parser.arrayItem_return first = default(ES3Parser.arrayItem_return);
		ES3Parser.arrayItem_return follow = default(ES3Parser.arrayItem_return);

		object lb_tree = default(object);
		object COMMA16_tree = default(object);
		object RBRACK17_tree = default(object);


		    var parameters = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(653, 1);
		try
		{
			// ..\\ES3.g:660:2: (lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK )
			DebugEnterAlt(1);
			// ..\\ES3.g:661:9: lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(661, 11);
			lb=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayLiteral3291); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(662, 3);
			// ..\\ES3.g:662:3: (first= arrayItem ( COMMA follow= arrayItem )* )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==ADD||LA8_0==COMMA||LA8_0==DEC||LA8_0==DELETE||LA8_0==DecimalLiteral||LA8_0==FALSE||LA8_0==FUNCTION||LA8_0==HexIntegerLiteral||LA8_0==INC||LA8_0==INV||LA8_0==Identifier||(LA8_0>=LBRACE && LA8_0<=LBRACK)||LA8_0==LPAREN||(LA8_0>=NEW && LA8_0<=NOT)||LA8_0==NULL||LA8_0==OctalIntegerLiteral||LA8_0==RegularExpressionLiteral||LA8_0==SUB||LA8_0==StringLiteral||LA8_0==THIS||LA8_0==TRUE||LA8_0==TYPEOF||LA8_0==VOID))
			{
				alt8 = 1;
			}
			else if ((LA8_0==RBRACK))
			{
				int LA8_2 = input.LA(2);

				if (((( input.LA(1) == COMMA )||( input.LA(1) == RBRACK ))))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:663:13: first= arrayItem ( COMMA follow= arrayItem )*
				{
				DebugLocation(663, 18);
				PushFollow(Follow._arrayItem_in_arrayLiteral3311);
				first=arrayItem();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(664, 13);
				 if(first.value != null) parameters.Add(first.value); 
				DebugLocation(665, 13);
				// ..\\ES3.g:665:13: ( COMMA follow= arrayItem )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==COMMA))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:666:17: COMMA follow= arrayItem
						{
						DebugLocation(666, 17);
						COMMA16=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayLiteral3357); 
						COMMA16_tree = (object)adaptor.Create(COMMA16);
						adaptor.AddChild(root_0, COMMA16_tree);

						DebugLocation(666, 29);
						PushFollow(Follow._arrayItem_in_arrayLiteral3361);
						follow=arrayItem();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(667, 17);
						 if(follow.value != null) parameters.Add(follow.value); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(670, 9);
			RBRACK17=(IToken)Match(input,RBRACK,Follow._RBRACK_in_arrayLiteral3415); 
			RBRACK17_tree = (object)adaptor.Create(RBRACK17);
			adaptor.AddChild(root_0, RBRACK17_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


				retval.value = new ArrayDeclarationSyntax(parameters);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayLiteral", 10);
			LeaveRule("arrayLiteral", 10);
			LeaveRule_arrayLiteral();
		}
		DebugLocation(671, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return retval;

	}
	// $ANTLR end "arrayLiteral"

	private sealed partial class arrayItem_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arrayItem_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_arrayItem();
	partial void LeaveRule_arrayItem();

	// $ANTLR start "arrayItem"
	// ..\\ES3.g:673:1: arrayItem returns [SyntaxNode value] : (expr= assignmentExpression |{...}?|{...}?) ;
	[GrammarRule("arrayItem")]
	private ES3Parser.arrayItem_return arrayItem()
	{
		EnterRule_arrayItem();
		EnterRule("arrayItem", 11);
		TraceIn("arrayItem", 11);
		ES3Parser.arrayItem_return retval = new ES3Parser.arrayItem_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.assignmentExpression_return expr = default(ES3Parser.assignmentExpression_return);


		try { DebugEnterRule(GrammarFileName, "arrayItem");
		DebugLocation(673, 1);
		try
		{
			// ..\\ES3.g:674:2: ( (expr= assignmentExpression |{...}?|{...}?) )
			DebugEnterAlt(1);
			// ..\\ES3.g:674:4: (expr= assignmentExpression |{...}?|{...}?)
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(674, 4);
			// ..\\ES3.g:674:4: (expr= assignmentExpression |{...}?|{...}?)
			int alt9=3;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt9 = 1;
				}
				break;
			case COMMA:
				{
				int LA9_2 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RBRACK:
				{
				int LA9_3 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:674:6: expr= assignmentExpression
				{
				DebugLocation(674, 10);
				PushFollow(Follow._assignmentExpression_in_arrayItem3434);
				expr=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, expr.Tree);
				DebugLocation(674, 33);
				 retval.value = expr.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:674:60: {...}?
				{
				DebugLocation(674, 60);
				if (!(( input.LA(1) == COMMA )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == COMMA ");
				}
				DebugLocation(674, 86);
				 retval.value = new IdentifierSyntax("undefined"); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:674:136: {...}?
				{
				DebugLocation(674, 136);
				if (!(( input.LA(1) == RBRACK )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == RBRACK ");
				}
				DebugLocation(674, 163);
				 retval.value = null; 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayItem", 11);
			LeaveRule("arrayItem", 11);
			LeaveRule_arrayItem();
		}
		DebugLocation(676, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayItem"); }
		return retval;

	}
	// $ANTLR end "arrayItem"

	private sealed partial class objectLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public JsonExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public objectLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();

	// $ANTLR start "objectLiteral"
	// ..\\ES3.g:678:1: objectLiteral returns [JsonExpressionSyntax value] : lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE ;
	[GrammarRule("objectLiteral")]
	private ES3Parser.objectLiteral_return objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 12);
		TraceIn("objectLiteral", 12);
		ES3Parser.objectLiteral_return retval = new ES3Parser.objectLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken COMMA18 = default(IToken);
		IToken RBRACE19 = default(IToken);
		ES3Parser.propertyAssignment_return first = default(ES3Parser.propertyAssignment_return);
		ES3Parser.propertyAssignment_return follow = default(ES3Parser.propertyAssignment_return);

		object lb_tree = default(object);
		object COMMA18_tree = default(object);
		object RBRACE19_tree = default(object);


		    var builder = new JsonPropertyBuilder();

		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(678, 1);
		try
		{
			// ..\\ES3.g:685:2: (lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:686:7: lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(686, 9);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_objectLiteral3487); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(686, 17);
			// ..\\ES3.g:686:17: (first= propertyAssignment ( COMMA follow= propertyAssignment )* )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==DecimalLiteral||LA11_0==HexIntegerLiteral||LA11_0==Identifier||LA11_0==OctalIntegerLiteral||LA11_0==StringLiteral))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:687:9: first= propertyAssignment ( COMMA follow= propertyAssignment )*
				{
				DebugLocation(687, 14);
				PushFollow(Follow._propertyAssignment_in_objectLiteral3501);
				first=propertyAssignment();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(687, 34);
				 builder.AddProperty(first.value); 
				DebugLocation(687, 72);
				// ..\\ES3.g:687:72: ( COMMA follow= propertyAssignment )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==COMMA))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:688:11: COMMA follow= propertyAssignment
						{
						DebugLocation(688, 11);
						COMMA18=(IToken)Match(input,COMMA,Follow._COMMA_in_objectLiteral3517); 
						COMMA18_tree = (object)adaptor.Create(COMMA18);
						adaptor.AddChild(root_0, COMMA18_tree);

						DebugLocation(689, 17);
						PushFollow(Follow._propertyAssignment_in_objectLiteral3531);
						follow=propertyAssignment();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(689, 37);
						 builder.AddProperty(follow.value); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(692, 7);
			RBRACE19=(IToken)Match(input,RBRACE,Follow._RBRACE_in_objectLiteral3561); 
			RBRACE19_tree = (object)adaptor.Create(RBRACE19);
			adaptor.AddChild(root_0, RBRACE19_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


				retval.value = new JsonExpressionSyntax(builder.GetProperties());

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectLiteral", 12);
			LeaveRule("objectLiteral", 12);
			LeaveRule_objectLiteral();
		}
		DebugLocation(693, 1);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return retval;

	}
	// $ANTLR end "objectLiteral"

	private sealed partial class propertyAssignment_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public PropertyDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyAssignment_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_propertyAssignment();
	partial void LeaveRule_propertyAssignment();

	// $ANTLR start "propertyAssignment"
	// ..\\ES3.g:695:1: propertyAssignment returns [PropertyDeclarationSyntax value] : (func= propertyFunctionAssignment |data= propertyValueAssignment );
	[GrammarRule("propertyAssignment")]
	private ES3Parser.propertyAssignment_return propertyAssignment()
	{
		EnterRule_propertyAssignment();
		EnterRule("propertyAssignment", 13);
		TraceIn("propertyAssignment", 13);
		ES3Parser.propertyAssignment_return retval = new ES3Parser.propertyAssignment_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.propertyFunctionAssignment_return func = default(ES3Parser.propertyFunctionAssignment_return);
		ES3Parser.propertyValueAssignment_return data = default(ES3Parser.propertyValueAssignment_return);


		try { DebugEnterRule(GrammarFileName, "propertyAssignment");
		DebugLocation(695, 1);
		try
		{
			// ..\\ES3.g:696:2: (func= propertyFunctionAssignment |data= propertyValueAssignment )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Identifier))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==DecimalLiteral||LA12_1==HexIntegerLiteral||LA12_1==Identifier||LA12_1==OctalIntegerLiteral||LA12_1==StringLiteral))
				{
					alt12 = 1;
				}
				else if ((LA12_1==COLON))
				{
					alt12 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA12_0==DecimalLiteral||LA12_0==HexIntegerLiteral||LA12_0==OctalIntegerLiteral||LA12_0==StringLiteral))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:697:9: func= propertyFunctionAssignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(697, 13);
				PushFollow(Follow._propertyFunctionAssignment_in_propertyAssignment3587);
				func=propertyFunctionAssignment();
				PopFollow();

				adaptor.AddChild(root_0, func.Tree);
				DebugLocation(698, 9);
				 retval.value = (func!=null?func.value:default(PropertyDeclarationSyntax)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:700:9: data= propertyValueAssignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(700, 13);
				PushFollow(Follow._propertyValueAssignment_in_propertyAssignment3612);
				data=propertyValueAssignment();
				PopFollow();

				adaptor.AddChild(root_0, data.Tree);
				DebugLocation(701, 9);
				 retval.value = (data!=null?data.value:default(PropertyDeclarationSyntax)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyAssignment", 13);
			LeaveRule("propertyAssignment", 13);
			LeaveRule_propertyAssignment();
		}
		DebugLocation(702, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyAssignment"); }
		return retval;

	}
	// $ANTLR end "propertyAssignment"

	private sealed partial class propertyFunctionAssignment_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public PropertyDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyFunctionAssignment_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_propertyFunctionAssignment();
	partial void LeaveRule_propertyFunctionAssignment();

	// $ANTLR start "propertyFunctionAssignment"
	// ..\\ES3.g:704:1: propertyFunctionAssignment returns [PropertyDeclarationSyntax value] : acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody ;
	[GrammarRule("propertyFunctionAssignment")]
	private ES3Parser.propertyFunctionAssignment_return propertyFunctionAssignment()
	{
		EnterRule_propertyFunctionAssignment();
		EnterRule("propertyFunctionAssignment", 14);
		TraceIn("propertyFunctionAssignment", 14);
		ES3Parser.propertyFunctionAssignment_return retval = new ES3Parser.propertyFunctionAssignment_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.accessor_return acc = default(ES3Parser.accessor_return);
		ES3Parser.propertyName_return prop2 = default(ES3Parser.propertyName_return);
		ES3Parser.formalParameterList_return parms = default(ES3Parser.formalParameterList_return);
		ES3Parser.functionBody_return statements = default(ES3Parser.functionBody_return);



		    PropertyExpressionType mode;
		    BlockSyntax body;
		    List<string> parameters = null;
		    ExpressionSyntax expression;
		    string name;

		try { DebugEnterRule(GrammarFileName, "propertyFunctionAssignment");
		DebugLocation(704, 4);
		try
		{
			// ..\\ES3.g:723:5: (acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:724:9: acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(724, 12);
			PushFollow(Follow._accessor_in_propertyFunctionAssignment3660);
			acc=accessor();
			PopFollow();

			adaptor.AddChild(root_0, acc.Tree);
			DebugLocation(725, 9);
			 mode = (acc!=null?acc.value:default(PropertyExpressionType)); 
			DebugLocation(726, 14);
			PushFollow(Follow._propertyName_in_propertyFunctionAssignment3682);
			prop2=propertyName();
			PopFollow();

			adaptor.AddChild(root_0, prop2.Tree);
			DebugLocation(727, 9);
			 name = (prop2!=null?prop2.value:default(string)); 
			DebugLocation(728, 9);
			// ..\\ES3.g:728:9: (parms= formalParameterList )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==LPAREN))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:729:13: parms= formalParameterList
				{
				DebugLocation(729, 18);
				PushFollow(Follow._formalParameterList_in_propertyFunctionAssignment3718);
				parms=formalParameterList();
				PopFollow();

				adaptor.AddChild(root_0, parms.Tree);
				DebugLocation(730, 13);
				 parameters = (parms!=null?parms.value:default(List<string>)); 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(732, 19);
			PushFollow(Follow._functionBody_in_propertyFunctionAssignment3755);
			statements=functionBody();
			PopFollow();

			adaptor.AddChild(root_0, statements.Tree);
			DebugLocation(733, 9);
			 body = (statements!=null?statements.value:default(BlockSyntax)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value = new PropertyDeclarationSyntax(
			        name,
			        new FunctionSyntax(
			            name,
			            parameters,
			            body
			        ),
			        mode
			    );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyFunctionAssignment", 14);
			LeaveRule("propertyFunctionAssignment", 14);
			LeaveRule_propertyFunctionAssignment();
		}
		DebugLocation(734, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyFunctionAssignment"); }
		return retval;

	}
	// $ANTLR end "propertyFunctionAssignment"

	private sealed partial class propertyValueAssignment_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public PropertyDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyValueAssignment_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_propertyValueAssignment();
	partial void LeaveRule_propertyValueAssignment();

	// $ANTLR start "propertyValueAssignment"
	// ..\\ES3.g:736:1: propertyValueAssignment returns [PropertyDeclarationSyntax value] : prop1= propertyName COLON ass= assignmentExpression ;
	[GrammarRule("propertyValueAssignment")]
	private ES3Parser.propertyValueAssignment_return propertyValueAssignment()
	{
		EnterRule_propertyValueAssignment();
		EnterRule("propertyValueAssignment", 15);
		TraceIn("propertyValueAssignment", 15);
		ES3Parser.propertyValueAssignment_return retval = new ES3Parser.propertyValueAssignment_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COLON20 = default(IToken);
		ES3Parser.propertyName_return prop1 = default(ES3Parser.propertyName_return);
		ES3Parser.assignmentExpression_return ass = default(ES3Parser.assignmentExpression_return);

		object COLON20_tree = default(object);


		    string name;
		    ExpressionSyntax expression;

		try { DebugEnterRule(GrammarFileName, "propertyValueAssignment");
		DebugLocation(736, 4);
		try
		{
			// ..\\ES3.g:748:5: (prop1= propertyName COLON ass= assignmentExpression )
			DebugEnterAlt(1);
			// ..\\ES3.g:749:9: prop1= propertyName COLON ass= assignmentExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(749, 14);
			PushFollow(Follow._propertyName_in_propertyValueAssignment3807);
			prop1=propertyName();
			PopFollow();

			adaptor.AddChild(root_0, prop1.Tree);
			DebugLocation(750, 9);
			 name = (prop1!=null?prop1.value:default(string)); 
			DebugLocation(751, 9);
			COLON20=(IToken)Match(input,COLON,Follow._COLON_in_propertyValueAssignment3827); 
			COLON20_tree = (object)adaptor.Create(COLON20);
			adaptor.AddChild(root_0, COLON20_tree);

			DebugLocation(752, 12);
			PushFollow(Follow._assignmentExpression_in_propertyValueAssignment3839);
			ass=assignmentExpression();
			PopFollow();

			adaptor.AddChild(root_0, ass.Tree);
			DebugLocation(753, 9);
			 expression = (ass!=null?ass.value:default(ExpressionSyntax)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value = new PropertyDeclarationSyntax(
			        name,
			        expression,
			        PropertyExpressionType.Data
			    );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyValueAssignment", 15);
			LeaveRule("propertyValueAssignment", 15);
			LeaveRule_propertyValueAssignment();
		}
		DebugLocation(754, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyValueAssignment"); }
		return retval;

	}
	// $ANTLR end "propertyValueAssignment"

	private sealed partial class accessor_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public PropertyExpressionType value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public accessor_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();

	// $ANTLR start "accessor"
	// ..\\ES3.g:756:1: accessor returns [PropertyExpressionType value] : ex1= Identifier {...}? =>;
	[GrammarRule("accessor")]
	private ES3Parser.accessor_return accessor()
	{
		EnterRule_accessor();
		EnterRule("accessor", 16);
		TraceIn("accessor", 16);
		ES3Parser.accessor_return retval = new ES3Parser.accessor_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);

		object ex1_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(756, 1);
		try
		{
			// ..\\ES3.g:757:2: (ex1= Identifier {...}? =>)
			DebugEnterAlt(1);
			// ..\\ES3.g:757:4: ex1= Identifier {...}? =>
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(757, 7);
			ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_accessor3877); 
			ex1_tree = (object)adaptor.Create(ex1);
			adaptor.AddChild(root_0, ex1_tree);

			DebugLocation(757, 19);
			if (!(( ex1.Text=="get" || ex1.Text=="set" )))
			{
				throw new FailedPredicateException(input, "accessor", " ex1.Text==\"get\" || ex1.Text==\"set\" ");
			}
			DebugLocation(757, 61);
			 if(ex1.Text=="get") retval.value = PropertyExpressionType.Get; if(ex1.Text=="set") retval.value =PropertyExpressionType.Set; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor", 16);
			LeaveRule("accessor", 16);
			LeaveRule_accessor();
		}
		DebugLocation(758, 1);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return retval;

	}
	// $ANTLR end "accessor"

	private sealed partial class propertyName_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public string value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyName_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();

	// $ANTLR start "propertyName"
	// ..\\ES3.g:760:1: propertyName returns [string value] : (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral );
	[GrammarRule("propertyName")]
	private ES3Parser.propertyName_return propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 17);
		TraceIn("propertyName", 17);
		ES3Parser.propertyName_return retval = new ES3Parser.propertyName_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		ES3Parser.numericLiteral_return ex3 = default(ES3Parser.numericLiteral_return);

		object ex1_tree = default(object);
		object ex2_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(760, 1);
		try
		{
			// ..\\ES3.g:761:2: (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case Identifier:
				{
				alt14 = 1;
				}
				break;
			case StringLiteral:
				{
				alt14 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:761:4: ex1= Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(761, 7);
				ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_propertyName3899); 
				ex1_tree = (object)adaptor.Create(ex1);
				adaptor.AddChild(root_0, ex1_tree);

				DebugLocation(761, 19);
				 retval.value = ex1.Text; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:762:4: ex2= StringLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(762, 7);
				ex2=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_propertyName3908); 
				ex2_tree = (object)adaptor.Create(ex2);
				adaptor.AddChild(root_0, ex2_tree);

				DebugLocation(762, 22);
				 retval.value = extractString(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:763:4: ex3= numericLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(763, 7);
				PushFollow(Follow._numericLiteral_in_propertyName3917);
				ex3=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, ex3.Tree);
				DebugLocation(763, 23);
				 retval.value = ex3.value.ToString(); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyName", 17);
			LeaveRule("propertyName", 17);
			LeaveRule_propertyName();
		}
		DebugLocation(764, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"

	private sealed partial class memberExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public memberExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_memberExpression();
	partial void LeaveRule_memberExpression();

	// $ANTLR start "memberExpression"
	// ..\\ES3.g:775:1: memberExpression returns [ExpressionSyntax value] : (prim= primaryExpression |func= functionExpression );
	[GrammarRule("memberExpression")]
	private ES3Parser.memberExpression_return memberExpression()
	{
		EnterRule_memberExpression();
		EnterRule("memberExpression", 18);
		TraceIn("memberExpression", 18);
		ES3Parser.memberExpression_return retval = new ES3Parser.memberExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.primaryExpression_return prim = default(ES3Parser.primaryExpression_return);
		ES3Parser.functionExpression_return func = default(ES3Parser.functionExpression_return);


		try { DebugEnterRule(GrammarFileName, "memberExpression");
		DebugLocation(775, 1);
		try
		{
			// ..\\ES3.g:776:2: (prim= primaryExpression |func= functionExpression )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==DecimalLiteral||LA15_0==FALSE||LA15_0==HexIntegerLiteral||LA15_0==Identifier||(LA15_0>=LBRACE && LA15_0<=LBRACK)||LA15_0==LPAREN||LA15_0==NULL||LA15_0==OctalIntegerLiteral||LA15_0==RegularExpressionLiteral||LA15_0==StringLiteral||LA15_0==THIS||LA15_0==TRUE))
			{
				alt15 = 1;
			}
			else if ((LA15_0==FUNCTION))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:776:4: prim= primaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(776, 8);
				PushFollow(Follow._primaryExpression_in_memberExpression3943);
				prim=primaryExpression();
				PopFollow();

				adaptor.AddChild(root_0, prim.Tree);
				DebugLocation(776, 27);
				 retval.value = prim.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:777:4: func= functionExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(777, 8);
				PushFollow(Follow._functionExpression_in_memberExpression3952);
				func=functionExpression();
				PopFollow();

				adaptor.AddChild(root_0, func.Tree);
				DebugLocation(777, 28);
				 retval.value = func.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberExpression", 18);
			LeaveRule("memberExpression", 18);
			LeaveRule_memberExpression();
		}
		DebugLocation(778, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpression"); }
		return retval;

	}
	// $ANTLR end "memberExpression"

	private sealed partial class arguments_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public List<ExpressionSyntax> value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arguments_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\ES3.g:780:1: arguments returns [List<ExpressionSyntax> value] : LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN ;
	[GrammarRule("arguments")]
	private ES3Parser.arguments_return arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 19);
		TraceIn("arguments", 19);
		ES3Parser.arguments_return retval = new ES3Parser.arguments_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN21 = default(IToken);
		IToken COMMA22 = default(IToken);
		IToken RPAREN23 = default(IToken);
		ES3Parser.assignmentExpression_return first = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return follow = default(ES3Parser.assignmentExpression_return);

		object LPAREN21_tree = default(object);
		object COMMA22_tree = default(object);
		object RPAREN23_tree = default(object);


			retval.value = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(780, 1);
		try
		{
			// ..\\ES3.g:784:2: ( LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:784:4: LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(784, 4);
			LPAREN21=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments3975); 
			LPAREN21_tree = (object)adaptor.Create(LPAREN21);
			adaptor.AddChild(root_0, LPAREN21_tree);

			DebugLocation(784, 11);
			// ..\\ES3.g:784:11: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==ADD||LA17_0==DEC||LA17_0==DELETE||LA17_0==DecimalLiteral||LA17_0==FALSE||LA17_0==FUNCTION||LA17_0==HexIntegerLiteral||LA17_0==INC||LA17_0==INV||LA17_0==Identifier||(LA17_0>=LBRACE && LA17_0<=LBRACK)||LA17_0==LPAREN||(LA17_0>=NEW && LA17_0<=NOT)||LA17_0==NULL||LA17_0==OctalIntegerLiteral||LA17_0==RegularExpressionLiteral||LA17_0==SUB||LA17_0==StringLiteral||LA17_0==THIS||LA17_0==TRUE||LA17_0==TYPEOF||LA17_0==VOID))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:784:13: first= assignmentExpression ( COMMA follow= assignmentExpression )*
				{
				DebugLocation(784, 18);
				PushFollow(Follow._assignmentExpression_in_arguments3981);
				first=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(784, 40);
				 retval.value.Add(first.value); 
				DebugLocation(784, 69);
				// ..\\ES3.g:784:69: ( COMMA follow= assignmentExpression )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==COMMA))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:784:71: COMMA follow= assignmentExpression
						{
						DebugLocation(784, 71);
						COMMA22=(IToken)Match(input,COMMA,Follow._COMMA_in_arguments3987); 
						COMMA22_tree = (object)adaptor.Create(COMMA22);
						adaptor.AddChild(root_0, COMMA22_tree);

						DebugLocation(784, 83);
						PushFollow(Follow._assignmentExpression_in_arguments3991);
						follow=assignmentExpression();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(784, 105);
						 retval.value.Add(follow.value); 

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(784, 140);
			RPAREN23=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments4000); 
			RPAREN23_tree = (object)adaptor.Create(RPAREN23);
			adaptor.AddChild(root_0, RPAREN23_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 19);
			LeaveRule("arguments", 19);
			LeaveRule_arguments();
		}
		DebugLocation(786, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	private sealed partial class generics_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public List<ExpressionSyntax> value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public generics_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_generics();
	partial void LeaveRule_generics();

	// $ANTLR start "generics"
	// ..\\ES3.g:788:1: generics returns [List<ExpressionSyntax> value] : LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE ;
	[GrammarRule("generics")]
	private ES3Parser.generics_return generics()
	{
		EnterRule_generics();
		EnterRule("generics", 20);
		TraceIn("generics", 20);
		ES3Parser.generics_return retval = new ES3Parser.generics_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LBRACE24 = default(IToken);
		IToken COMMA25 = default(IToken);
		IToken RBRACE26 = default(IToken);
		ES3Parser.assignmentExpression_return first = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return follow = default(ES3Parser.assignmentExpression_return);

		object LBRACE24_tree = default(object);
		object COMMA25_tree = default(object);
		object RBRACE26_tree = default(object);


			retval.value = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "generics");
		DebugLocation(788, 1);
		try
		{
			// ..\\ES3.g:792:2: ( LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:792:4: LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(792, 4);
			LBRACE24=(IToken)Match(input,LBRACE,Follow._LBRACE_in_generics4022); 
			LBRACE24_tree = (object)adaptor.Create(LBRACE24);
			adaptor.AddChild(root_0, LBRACE24_tree);

			DebugLocation(792, 11);
			// ..\\ES3.g:792:11: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==ADD||LA19_0==DEC||LA19_0==DELETE||LA19_0==DecimalLiteral||LA19_0==FALSE||LA19_0==FUNCTION||LA19_0==HexIntegerLiteral||LA19_0==INC||LA19_0==INV||LA19_0==Identifier||(LA19_0>=LBRACE && LA19_0<=LBRACK)||LA19_0==LPAREN||(LA19_0>=NEW && LA19_0<=NOT)||LA19_0==NULL||LA19_0==OctalIntegerLiteral||LA19_0==RegularExpressionLiteral||LA19_0==SUB||LA19_0==StringLiteral||LA19_0==THIS||LA19_0==TRUE||LA19_0==TYPEOF||LA19_0==VOID))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:792:13: first= assignmentExpression ( COMMA follow= assignmentExpression )*
				{
				DebugLocation(792, 18);
				PushFollow(Follow._assignmentExpression_in_generics4028);
				first=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(792, 40);
				 retval.value.Add(first.value); 
				DebugLocation(792, 69);
				// ..\\ES3.g:792:69: ( COMMA follow= assignmentExpression )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==COMMA))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:792:71: COMMA follow= assignmentExpression
						{
						DebugLocation(792, 71);
						COMMA25=(IToken)Match(input,COMMA,Follow._COMMA_in_generics4034); 
						COMMA25_tree = (object)adaptor.Create(COMMA25);
						adaptor.AddChild(root_0, COMMA25_tree);

						DebugLocation(792, 83);
						PushFollow(Follow._assignmentExpression_in_generics4038);
						follow=assignmentExpression();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(792, 105);
						 retval.value.Add(follow.value); 

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(792, 140);
			RBRACE26=(IToken)Match(input,RBRACE,Follow._RBRACE_in_generics4047); 
			RBRACE26_tree = (object)adaptor.Create(RBRACE26);
			adaptor.AddChild(root_0, RBRACE26_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generics", 20);
			LeaveRule("generics", 20);
			LeaveRule_generics();
		}
		DebugLocation(794, 1);
		} finally { DebugExitRule(GrammarFileName, "generics"); }
		return retval;

	}
	// $ANTLR end "generics"

	private sealed partial class leftHandSideExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public leftHandSideExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_leftHandSideExpression();
	partial void LeaveRule_leftHandSideExpression();

	// $ANTLR start "leftHandSideExpression"
	// ..\\ES3.g:796:1: leftHandSideExpression returns [ExpressionSyntax value] : ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* ;
	[GrammarRule("leftHandSideExpression")]
	private ES3Parser.leftHandSideExpression_return leftHandSideExpression()
	{
		EnterRule_leftHandSideExpression();
		EnterRule("leftHandSideExpression", 21);
		TraceIn("leftHandSideExpression", 21);
		ES3Parser.leftHandSideExpression_return retval = new ES3Parser.leftHandSideExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken NEW27 = default(IToken);
		IToken LBRACK28 = default(IToken);
		IToken RBRACK29 = default(IToken);
		IToken DOT30 = default(IToken);
		ES3Parser.memberExpression_return mem = default(ES3Parser.memberExpression_return);
		ES3Parser.generics_return gen = default(ES3Parser.generics_return);
		ES3Parser.arguments_return arg = default(ES3Parser.arguments_return);
		ES3Parser.expression_return exp = default(ES3Parser.expression_return);

		object id_tree = default(object);
		object NEW27_tree = default(object);
		object LBRACK28_tree = default(object);
		object RBRACK29_tree = default(object);
		object DOT30_tree = default(object);


			List<ExpressionSyntax> gens = new List<ExpressionSyntax>();
		    bool isNew = false;

		try { DebugEnterRule(GrammarFileName, "leftHandSideExpression");
		DebugLocation(796, 1);
		try
		{
			// ..\\ES3.g:807:2: ( ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:808:9: ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(808, 9);
			// ..\\ES3.g:808:9: ( NEW )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==NEW))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:809:13: NEW
				{
				DebugLocation(809, 13);
				NEW27=(IToken)Match(input,NEW,Follow._NEW_in_leftHandSideExpression4096); 
				NEW27_tree = (object)adaptor.Create(NEW27);
				adaptor.AddChild(root_0, NEW27_tree);

				DebugLocation(810, 13);
				 isNew = true; 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(812, 9);
			PushFollow(Follow._memberExpression_in_leftHandSideExpression4130);
			mem=memberExpression();
			PopFollow();

			adaptor.AddChild(root_0, mem.Tree);
			DebugLocation(813, 9);
			 retval.value = mem.value; 
			DebugLocation(814, 6);
			// ..\\ES3.g:814:6: ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=4;
				try { DebugEnterDecision(22, false);
				switch (input.LA(1))
				{
				case LBRACE:
				case LPAREN:
					{
					alt22 = 1;
					}
					break;
				case LBRACK:
					{
					alt22 = 2;
					}
					break;
				case DOT:
					{
					alt22 = 3;
					}
					break;

				}

				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:815:7: (gen= generics )? arg= arguments
					{
					DebugLocation(815, 7);
					// ..\\ES3.g:815:7: (gen= generics )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==LBRACE))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:816:17: gen= generics
						{
						DebugLocation(816, 20);
						PushFollow(Follow._generics_in_leftHandSideExpression4175);
						gen=generics();
						PopFollow();

						adaptor.AddChild(root_0, gen.Tree);
						DebugLocation(817, 17);
						 gens = (gen!=null?gen.value:default(List<ExpressionSyntax>)); 

						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(819, 16);
					PushFollow(Follow._arguments_in_leftHandSideExpression4224);
					arg=arguments();
					PopFollow();

					adaptor.AddChild(root_0, arg.Tree);
					DebugLocation(820, 13);

					                retval.value = new MethodCallSyntax(
					                    retval.value,
					                    (arg!=null?arg.value:default(List<ExpressionSyntax>)),
					                    gens
					                );

					                if (isNew)
					                {
					                    isNew = false;
					                    retval.value = new NewSyntax(retval.value);
					                }
					            

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:835:13: LBRACK exp= expression RBRACK
					{
					DebugLocation(835, 13);
					LBRACK28=(IToken)Match(input,LBRACK,Follow._LBRACK_in_leftHandSideExpression4259); 
					LBRACK28_tree = (object)adaptor.Create(LBRACK28);
					adaptor.AddChild(root_0, LBRACK28_tree);

					DebugLocation(835, 23);
					PushFollow(Follow._expression_in_leftHandSideExpression4263);
					exp=expression();
					PopFollow();

					adaptor.AddChild(root_0, exp.Tree);
					DebugLocation(835, 35);
					RBRACK29=(IToken)Match(input,RBRACK,Follow._RBRACK_in_leftHandSideExpression4265); 
					RBRACK29_tree = (object)adaptor.Create(RBRACK29);
					adaptor.AddChild(root_0, RBRACK29_tree);

					DebugLocation(836, 13);

					                retval.value = new IndexerSyntax(
					                    retval.value,
					                    (exp!=null?exp.value:default(ExpressionSyntax))
					                );
					            

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ..\\ES3.g:844:13: DOT id= Identifier
					{
					DebugLocation(844, 13);
					DOT30=(IToken)Match(input,DOT,Follow._DOT_in_leftHandSideExpression4302); 
					DOT30_tree = (object)adaptor.Create(DOT30);
					adaptor.AddChild(root_0, DOT30_tree);

					DebugLocation(844, 19);
					id=(IToken)Match(input,Identifier,Follow._Identifier_in_leftHandSideExpression4306); 
					id_tree = (object)adaptor.Create(id);
					adaptor.AddChild(root_0, id_tree);

					DebugLocation(845, 13);

					                retval.value = new PropertySyntax(
					                    retval.value,
					                    id.Text
					                );
					            

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    if (isNew)
			        retval.value = new NewSyntax(retval.value);

				retval.value.Source = ExtractSourceCode((CommonToken)retval.Start, (CommonToken)retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("leftHandSideExpression", 21);
			LeaveRule("leftHandSideExpression", 21);
			LeaveRule_leftHandSideExpression();
		}
		DebugLocation(852, 1);
		} finally { DebugExitRule(GrammarFileName, "leftHandSideExpression"); }
		return retval;

	}
	// $ANTLR end "leftHandSideExpression"

	private sealed partial class postfixExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public postfixExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();

	// $ANTLR start "postfixExpression"
	// ..\\ES3.g:864:1: postfixExpression returns [ExpressionSyntax value] : left= leftHandSideExpression (post= postfixOperator )? ;
	[GrammarRule("postfixExpression")]
	private ES3Parser.postfixExpression_return postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 22);
		TraceIn("postfixExpression", 22);
		ES3Parser.postfixExpression_return retval = new ES3Parser.postfixExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.leftHandSideExpression_return left = default(ES3Parser.leftHandSideExpression_return);
		ES3Parser.postfixOperator_return post = default(ES3Parser.postfixOperator_return);


		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(864, 1);
		try
		{
			// ..\\ES3.g:865:2: (left= leftHandSideExpression (post= postfixOperator )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:865:4: left= leftHandSideExpression (post= postfixOperator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(865, 8);
			PushFollow(Follow._leftHandSideExpression_in_postfixExpression4352);
			left=leftHandSideExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(865, 32);
			 retval.value = left.value; if (input.LA(1) == INC || input.LA(1) == DEC) PromoteEOL(null);  
			DebugLocation(865, 122);
			// ..\\ES3.g:865:122: (post= postfixOperator )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==DEC||LA23_0==INC))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:865:124: post= postfixOperator
				{
				DebugLocation(865, 128);
				PushFollow(Follow._postfixOperator_in_postfixExpression4360);
				post=postfixOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(post.Tree, root_0);
				DebugLocation(865, 146);
				 retval.value = new UnaryExpressionSyntax(post.value, retval.value); 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixExpression", 22);
			LeaveRule("postfixExpression", 22);
			LeaveRule_postfixExpression();
		}
		DebugLocation(866, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return retval;

	}
	// $ANTLR end "postfixExpression"

	private sealed partial class postfixOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxExpressionType value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public postfixOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_postfixOperator();
	partial void LeaveRule_postfixOperator();

	// $ANTLR start "postfixOperator"
	// ..\\ES3.g:868:1: postfixOperator returns [SyntaxExpressionType value] : (op= INC |op= DEC );
	[GrammarRule("postfixOperator")]
	private ES3Parser.postfixOperator_return postfixOperator()
	{
		EnterRule_postfixOperator();
		EnterRule("postfixOperator", 23);
		TraceIn("postfixOperator", 23);
		ES3Parser.postfixOperator_return retval = new ES3Parser.postfixOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);

		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "postfixOperator");
		DebugLocation(868, 1);
		try
		{
			// ..\\ES3.g:869:2: (op= INC |op= DEC )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==INC))
			{
				alt24 = 1;
			}
			else if ((LA24_0==DEC))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:869:4: op= INC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(869, 6);
				op=(IToken)Match(input,INC,Follow._INC_in_postfixOperator4383); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(869, 11);
				 op.Type = PINC; retval.value = SyntaxExpressionType.PostIncrementAssign; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:870:4: op= DEC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(870, 6);
				op=(IToken)Match(input,DEC,Follow._DEC_in_postfixOperator4392); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(870, 11);
				 op.Type = PDEC; retval.value = SyntaxExpressionType.PostDecrementAssign; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixOperator", 23);
			LeaveRule("postfixOperator", 23);
			LeaveRule_postfixOperator();
		}
		DebugLocation(871, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixOperator"); }
		return retval;

	}
	// $ANTLR end "postfixOperator"

	private sealed partial class unaryExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// ..\\ES3.g:877:1: unaryExpression returns [ExpressionSyntax value] : (post= postfixExpression |op= unaryOperator exp= unaryExpression );
	[GrammarRule("unaryExpression")]
	private ES3Parser.unaryExpression_return unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 24);
		TraceIn("unaryExpression", 24);
		ES3Parser.unaryExpression_return retval = new ES3Parser.unaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.postfixExpression_return post = default(ES3Parser.postfixExpression_return);
		ES3Parser.unaryOperator_return op = default(ES3Parser.unaryOperator_return);
		ES3Parser.unaryExpression_return exp = default(ES3Parser.unaryExpression_return);


		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(877, 1);
		try
		{
			// ..\\ES3.g:878:2: (post= postfixExpression |op= unaryOperator exp= unaryExpression )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==DecimalLiteral||LA25_0==FALSE||LA25_0==FUNCTION||LA25_0==HexIntegerLiteral||LA25_0==Identifier||(LA25_0>=LBRACE && LA25_0<=LBRACK)||LA25_0==LPAREN||LA25_0==NEW||LA25_0==NULL||LA25_0==OctalIntegerLiteral||LA25_0==RegularExpressionLiteral||LA25_0==StringLiteral||LA25_0==THIS||LA25_0==TRUE))
			{
				alt25 = 1;
			}
			else if ((LA25_0==ADD||LA25_0==DEC||LA25_0==DELETE||LA25_0==INC||LA25_0==INV||LA25_0==NOT||LA25_0==SUB||LA25_0==TYPEOF||LA25_0==VOID))
			{
				alt25 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:878:4: post= postfixExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(878, 8);
				PushFollow(Follow._postfixExpression_in_unaryExpression4415);
				post=postfixExpression();
				PopFollow();

				adaptor.AddChild(root_0, post.Tree);
				DebugLocation(878, 27);
				 retval.value = post.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:879:4: op= unaryOperator exp= unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(879, 6);
				PushFollow(Follow._unaryOperator_in_unaryExpression4424);
				op=unaryOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(op.Tree, root_0);
				DebugLocation(879, 25);
				PushFollow(Follow._unaryExpression_in_unaryExpression4429);
				exp=unaryExpression();
				PopFollow();

				adaptor.AddChild(root_0, exp.Tree);
				DebugLocation(879, 42);
				 retval.value = new UnaryExpressionSyntax(op.value, exp.value); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 24);
			LeaveRule("unaryExpression", 24);
			LeaveRule_unaryExpression();
		}
		DebugLocation(880, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	private sealed partial class unaryOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxExpressionType value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_unaryOperator();
	partial void LeaveRule_unaryOperator();

	// $ANTLR start "unaryOperator"
	// ..\\ES3.g:882:1: unaryOperator returns [SyntaxExpressionType value] : ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT );
	[GrammarRule("unaryOperator")]
	private ES3Parser.unaryOperator_return unaryOperator()
	{
		EnterRule_unaryOperator();
		EnterRule("unaryOperator", 25);
		TraceIn("unaryOperator", 25);
		ES3Parser.unaryOperator_return retval = new ES3Parser.unaryOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken DELETE31 = default(IToken);
		IToken VOID32 = default(IToken);
		IToken TYPEOF33 = default(IToken);
		IToken INC34 = default(IToken);
		IToken DEC35 = default(IToken);
		IToken INV36 = default(IToken);
		IToken NOT37 = default(IToken);

		object op_tree = default(object);
		object DELETE31_tree = default(object);
		object VOID32_tree = default(object);
		object TYPEOF33_tree = default(object);
		object INC34_tree = default(object);
		object DEC35_tree = default(object);
		object INV36_tree = default(object);
		object NOT37_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unaryOperator");
		DebugLocation(882, 1);
		try
		{
			// ..\\ES3.g:883:2: ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT )
			int alt26=9;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case DELETE:
				{
				alt26 = 1;
				}
				break;
			case VOID:
				{
				alt26 = 2;
				}
				break;
			case TYPEOF:
				{
				alt26 = 3;
				}
				break;
			case INC:
				{
				alt26 = 4;
				}
				break;
			case DEC:
				{
				alt26 = 5;
				}
				break;
			case ADD:
				{
				alt26 = 6;
				}
				break;
			case SUB:
				{
				alt26 = 7;
				}
				break;
			case INV:
				{
				alt26 = 8;
				}
				break;
			case NOT:
				{
				alt26 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:883:4: DELETE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(883, 4);
				DELETE31=(IToken)Match(input,DELETE,Follow._DELETE_in_unaryOperator4447); 
				DELETE31_tree = (object)adaptor.Create(DELETE31);
				adaptor.AddChild(root_0, DELETE31_tree);

				DebugLocation(883, 11);
				 retval.value = SyntaxExpressionType.Delete; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:884:4: VOID
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(884, 4);
				VOID32=(IToken)Match(input,VOID,Follow._VOID_in_unaryOperator4454); 
				VOID32_tree = (object)adaptor.Create(VOID32);
				adaptor.AddChild(root_0, VOID32_tree);

				DebugLocation(884, 9);
				 retval.value = SyntaxExpressionType.Void; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:885:4: TYPEOF
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(885, 4);
				TYPEOF33=(IToken)Match(input,TYPEOF,Follow._TYPEOF_in_unaryOperator4461); 
				TYPEOF33_tree = (object)adaptor.Create(TYPEOF33);
				adaptor.AddChild(root_0, TYPEOF33_tree);

				DebugLocation(885, 11);
				 retval.value = SyntaxExpressionType.TypeOf; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:886:4: INC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(886, 4);
				INC34=(IToken)Match(input,INC,Follow._INC_in_unaryOperator4468); 
				INC34_tree = (object)adaptor.Create(INC34);
				adaptor.AddChild(root_0, INC34_tree);

				DebugLocation(886, 8);
				 retval.value = SyntaxExpressionType.PreIncrementAssign; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:887:4: DEC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(887, 4);
				DEC35=(IToken)Match(input,DEC,Follow._DEC_in_unaryOperator4475); 
				DEC35_tree = (object)adaptor.Create(DEC35);
				adaptor.AddChild(root_0, DEC35_tree);

				DebugLocation(887, 8);
				 retval.value = SyntaxExpressionType.PreDecrementAssign; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:888:4: op= ADD
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(888, 6);
				op=(IToken)Match(input,ADD,Follow._ADD_in_unaryOperator4484); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(888, 11);
				 op.Type = POS; retval.value = SyntaxExpressionType.UnaryPlus; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:889:4: op= SUB
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(889, 6);
				op=(IToken)Match(input,SUB,Follow._SUB_in_unaryOperator4493); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(889, 11);
				 op.Type = NEG; retval.value = SyntaxExpressionType.Negate; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:890:4: INV
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(890, 4);
				INV36=(IToken)Match(input,INV,Follow._INV_in_unaryOperator4500); 
				INV36_tree = (object)adaptor.Create(INV36);
				adaptor.AddChild(root_0, INV36_tree);

				DebugLocation(890, 8);
				 retval.value = SyntaxExpressionType.BitwiseNot; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:891:4: NOT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(891, 4);
				NOT37=(IToken)Match(input,NOT,Follow._NOT_in_unaryOperator4507); 
				NOT37_tree = (object)adaptor.Create(NOT37);
				adaptor.AddChild(root_0, NOT37_tree);

				DebugLocation(891, 8);
				 retval.value = SyntaxExpressionType.Not; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryOperator", 25);
			LeaveRule("unaryOperator", 25);
			LeaveRule_unaryOperator();
		}
		DebugLocation(892, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
		return retval;

	}
	// $ANTLR end "unaryOperator"

	private sealed partial class multiplicativeExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public multiplicativeExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// ..\\ES3.g:898:1: multiplicativeExpression returns [ExpressionSyntax value] : left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private ES3Parser.multiplicativeExpression_return multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 26);
		TraceIn("multiplicativeExpression", 26);
		ES3Parser.multiplicativeExpression_return retval = new ES3Parser.multiplicativeExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken MUL38 = default(IToken);
		IToken DIV39 = default(IToken);
		IToken MOD40 = default(IToken);
		ES3Parser.unaryExpression_return left = default(ES3Parser.unaryExpression_return);
		ES3Parser.unaryExpression_return right = default(ES3Parser.unaryExpression_return);

		object MUL38_tree = default(object);
		object DIV39_tree = default(object);
		object MOD40_tree = default(object);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(898, 1);
		try
		{
			// ..\\ES3.g:902:2: (left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:902:4: left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(902, 8);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression4535);
			left=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(902, 25);
			 retval.value = left.value; 
			DebugLocation(902, 50);
			// ..\\ES3.g:902:50: ( ( MUL | DIV | MOD ) right= unaryExpression )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==DIV||LA28_0==MOD||LA28_0==MUL))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:903:3: ( MUL | DIV | MOD ) right= unaryExpression
					{
					DebugLocation(905, 48);
					// ..\\ES3.g:903:3: ( MUL | DIV | MOD )
					int alt27=3;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					switch (input.LA(1))
					{
					case MUL:
						{
						alt27 = 1;
						}
						break;
					case DIV:
						{
						alt27 = 2;
						}
						break;
					case MOD:
						{
						alt27 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:903:5: MUL
						{
						DebugLocation(903, 5);
						MUL38=(IToken)Match(input,MUL,Follow._MUL_in_multiplicativeExpression4546); 
						MUL38_tree = (object)adaptor.Create(MUL38);
						adaptor.AddChild(root_0, MUL38_tree);

						DebugLocation(903, 9);
						 type= SyntaxExpressionType.Multiply; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:904:5: DIV
						{
						DebugLocation(904, 5);
						DIV39=(IToken)Match(input,DIV,Follow._DIV_in_multiplicativeExpression4555); 
						DIV39_tree = (object)adaptor.Create(DIV39);
						adaptor.AddChild(root_0, DIV39_tree);

						DebugLocation(904, 9);
						 type= SyntaxExpressionType.Divide; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:905:5: MOD
						{
						DebugLocation(905, 5);
						MOD40=(IToken)Match(input,MOD,Follow._MOD_in_multiplicativeExpression4563); 
						MOD40_tree = (object)adaptor.Create(MOD40);
						adaptor.AddChild(root_0, MOD40_tree);

						DebugLocation(905, 9);
						 type= SyntaxExpressionType.Modulo; 

						}
						break;

					}
					} finally { DebugExitSubRule(27); }

					DebugLocation(906, 8);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression4574);
					right=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(906, 25);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 26);
			LeaveRule("multiplicativeExpression", 26);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(907, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	private sealed partial class additiveExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public additiveExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// ..\\ES3.g:913:1: additiveExpression returns [ExpressionSyntax value] : left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private ES3Parser.additiveExpression_return additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 27);
		TraceIn("additiveExpression", 27);
		ES3Parser.additiveExpression_return retval = new ES3Parser.additiveExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ADD41 = default(IToken);
		IToken SUB42 = default(IToken);
		ES3Parser.multiplicativeExpression_return left = default(ES3Parser.multiplicativeExpression_return);
		ES3Parser.multiplicativeExpression_return right = default(ES3Parser.multiplicativeExpression_return);

		object ADD41_tree = default(object);
		object SUB42_tree = default(object);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(913, 1);
		try
		{
			// ..\\ES3.g:917:2: (left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:917:4: left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(917, 8);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression4604);
			left=multiplicativeExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(917, 34);
			 retval.value = left.value; 
			DebugLocation(917, 59);
			// ..\\ES3.g:917:59: ( ( ADD | SUB ) right= multiplicativeExpression )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==ADD||LA30_0==SUB))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:918:3: ( ADD | SUB ) right= multiplicativeExpression
					{
					DebugLocation(919, 50);
					// ..\\ES3.g:918:3: ( ADD | SUB )
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==ADD))
					{
						alt29 = 1;
					}
					else if ((LA29_0==SUB))
					{
						alt29 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:918:5: ADD
						{
						DebugLocation(918, 5);
						ADD41=(IToken)Match(input,ADD,Follow._ADD_in_additiveExpression4615); 
						ADD41_tree = (object)adaptor.Create(ADD41);
						adaptor.AddChild(root_0, ADD41_tree);

						DebugLocation(918, 9);
						 type= SyntaxExpressionType.Add; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:919:5: SUB
						{
						DebugLocation(919, 5);
						SUB42=(IToken)Match(input,SUB,Follow._SUB_in_additiveExpression4623); 
						SUB42_tree = (object)adaptor.Create(SUB42);
						adaptor.AddChild(root_0, SUB42_tree);

						DebugLocation(919, 9);
						 type= SyntaxExpressionType.Subtract; 

						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(920, 8);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression4634);
					right=multiplicativeExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(920, 34);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 27);
			LeaveRule("additiveExpression", 27);
			LeaveRule_additiveExpression();
		}
		DebugLocation(921, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	private sealed partial class shiftExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public shiftExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// ..\\ES3.g:927:1: shiftExpression returns [ExpressionSyntax value] : left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private ES3Parser.shiftExpression_return shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 28);
		TraceIn("shiftExpression", 28);
		ES3Parser.shiftExpression_return retval = new ES3Parser.shiftExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SHL43 = default(IToken);
		IToken SHR44 = default(IToken);
		IToken SHU45 = default(IToken);
		ES3Parser.additiveExpression_return left = default(ES3Parser.additiveExpression_return);
		ES3Parser.additiveExpression_return right = default(ES3Parser.additiveExpression_return);

		object SHL43_tree = default(object);
		object SHR44_tree = default(object);
		object SHU45_tree = default(object);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(927, 1);
		try
		{
			// ..\\ES3.g:931:2: (left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:931:4: left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(931, 8);
			PushFollow(Follow._additiveExpression_in_shiftExpression4665);
			left=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(931, 28);
			 retval.value = left.value; 
			DebugLocation(931, 53);
			// ..\\ES3.g:931:53: ( ( SHL | SHR | SHU ) right= additiveExpression )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==SHL||LA32_0==SHR||LA32_0==SHU))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:932:3: ( SHL | SHR | SHU ) right= additiveExpression
					{
					DebugLocation(934, 60);
					// ..\\ES3.g:932:3: ( SHL | SHR | SHU )
					int alt31=3;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, false);
					switch (input.LA(1))
					{
					case SHL:
						{
						alt31 = 1;
						}
						break;
					case SHR:
						{
						alt31 = 2;
						}
						break;
					case SHU:
						{
						alt31 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:932:5: SHL
						{
						DebugLocation(932, 5);
						SHL43=(IToken)Match(input,SHL,Follow._SHL_in_shiftExpression4676); 
						SHL43_tree = (object)adaptor.Create(SHL43);
						adaptor.AddChild(root_0, SHL43_tree);

						DebugLocation(932, 9);
						 type= SyntaxExpressionType.LeftShift; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:933:5: SHR
						{
						DebugLocation(933, 5);
						SHR44=(IToken)Match(input,SHR,Follow._SHR_in_shiftExpression4684); 
						SHR44_tree = (object)adaptor.Create(SHR44);
						adaptor.AddChild(root_0, SHR44_tree);

						DebugLocation(933, 9);
						 type= SyntaxExpressionType.RightShift; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:934:5: SHU
						{
						DebugLocation(934, 5);
						SHU45=(IToken)Match(input,SHU,Follow._SHU_in_shiftExpression4692); 
						SHU45_tree = (object)adaptor.Create(SHU45);
						adaptor.AddChild(root_0, SHU45_tree);

						DebugLocation(934, 9);
						 type= SyntaxExpressionType.UnsignedRightShift; 

						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(935, 8);
					PushFollow(Follow._additiveExpression_in_shiftExpression4703);
					right=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(935, 28);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 28);
			LeaveRule("shiftExpression", 28);
			LeaveRule_shiftExpression();
		}
		DebugLocation(936, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	private sealed partial class relationalExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// ..\\ES3.g:942:1: relationalExpression returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private ES3Parser.relationalExpression_return relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 29);
		TraceIn("relationalExpression", 29);
		ES3Parser.relationalExpression_return retval = new ES3Parser.relationalExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LT46 = default(IToken);
		IToken GT47 = default(IToken);
		IToken LTE48 = default(IToken);
		IToken GTE49 = default(IToken);
		IToken INSTANCEOF50 = default(IToken);
		IToken IN51 = default(IToken);
		ES3Parser.shiftExpression_return left = default(ES3Parser.shiftExpression_return);
		ES3Parser.shiftExpression_return right = default(ES3Parser.shiftExpression_return);

		object LT46_tree = default(object);
		object GT47_tree = default(object);
		object LTE48_tree = default(object);
		object GTE49_tree = default(object);
		object INSTANCEOF50_tree = default(object);
		object IN51_tree = default(object);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(942, 1);
		try
		{
			// ..\\ES3.g:946:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:946:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(946, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpression4734);
			left=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(946, 25);
			 retval.value = left.value; 
			DebugLocation(946, 50);
			// ..\\ES3.g:946:50: ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if (((LA34_0>=GT && LA34_0<=GTE)||LA34_0==IN||LA34_0==INSTANCEOF||(LA34_0>=LT && LA34_0<=LTE)))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:947:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression
					{
					DebugLocation(952, 44);
					// ..\\ES3.g:947:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN )
					int alt33=6;
					try { DebugEnterSubRule(33);
					try { DebugEnterDecision(33, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt33 = 1;
						}
						break;
					case GT:
						{
						alt33 = 2;
						}
						break;
					case LTE:
						{
						alt33 = 3;
						}
						break;
					case GTE:
						{
						alt33 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt33 = 5;
						}
						break;
					case IN:
						{
						alt33 = 6;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:947:5: LT
						{
						DebugLocation(947, 5);
						LT46=(IToken)Match(input,LT,Follow._LT_in_relationalExpression4745); 
						LT46_tree = (object)adaptor.Create(LT46);
						adaptor.AddChild(root_0, LT46_tree);

						DebugLocation(947, 8);
						 type= SyntaxExpressionType.LessThan; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:948:5: GT
						{
						DebugLocation(948, 5);
						GT47=(IToken)Match(input,GT,Follow._GT_in_relationalExpression4753); 
						GT47_tree = (object)adaptor.Create(GT47);
						adaptor.AddChild(root_0, GT47_tree);

						DebugLocation(948, 8);
						 type= SyntaxExpressionType.GreaterThan; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:949:5: LTE
						{
						DebugLocation(949, 5);
						LTE48=(IToken)Match(input,LTE,Follow._LTE_in_relationalExpression4761); 
						LTE48_tree = (object)adaptor.Create(LTE48);
						adaptor.AddChild(root_0, LTE48_tree);

						DebugLocation(949, 9);
						 type= SyntaxExpressionType.LessThanOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:950:5: GTE
						{
						DebugLocation(950, 5);
						GTE49=(IToken)Match(input,GTE,Follow._GTE_in_relationalExpression4769); 
						GTE49_tree = (object)adaptor.Create(GTE49);
						adaptor.AddChild(root_0, GTE49_tree);

						DebugLocation(950, 9);
						 type= SyntaxExpressionType.GreaterThanOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:951:5: INSTANCEOF
						{
						DebugLocation(951, 5);
						INSTANCEOF50=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpression4777); 
						INSTANCEOF50_tree = (object)adaptor.Create(INSTANCEOF50);
						adaptor.AddChild(root_0, INSTANCEOF50_tree);

						DebugLocation(951, 16);
						 type= SyntaxExpressionType.InstanceOf;  

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// ..\\ES3.g:952:5: IN
						{
						DebugLocation(952, 5);
						IN51=(IToken)Match(input,IN,Follow._IN_in_relationalExpression4785); 
						IN51_tree = (object)adaptor.Create(IN51);
						adaptor.AddChild(root_0, IN51_tree);

						DebugLocation(952, 8);
						 type= SyntaxExpressionType.In;  

						}
						break;

					}
					} finally { DebugExitSubRule(33); }

					DebugLocation(953, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpression4796);
					right=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(953, 25);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 29);
			LeaveRule("relationalExpression", 29);
			LeaveRule_relationalExpression();
		}
		DebugLocation(954, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	private sealed partial class relationalExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_relationalExpressionNoIn();
	partial void LeaveRule_relationalExpressionNoIn();

	// $ANTLR start "relationalExpressionNoIn"
	// ..\\ES3.g:956:1: relationalExpressionNoIn returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* ;
	[GrammarRule("relationalExpressionNoIn")]
	private ES3Parser.relationalExpressionNoIn_return relationalExpressionNoIn()
	{
		EnterRule_relationalExpressionNoIn();
		EnterRule("relationalExpressionNoIn", 30);
		TraceIn("relationalExpressionNoIn", 30);
		ES3Parser.relationalExpressionNoIn_return retval = new ES3Parser.relationalExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LT52 = default(IToken);
		IToken GT53 = default(IToken);
		IToken LTE54 = default(IToken);
		IToken GTE55 = default(IToken);
		IToken INSTANCEOF56 = default(IToken);
		ES3Parser.shiftExpression_return left = default(ES3Parser.shiftExpression_return);
		ES3Parser.shiftExpression_return right = default(ES3Parser.shiftExpression_return);

		object LT52_tree = default(object);
		object GT53_tree = default(object);
		object LTE54_tree = default(object);
		object GTE55_tree = default(object);
		object INSTANCEOF56_tree = default(object);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpressionNoIn");
		DebugLocation(956, 1);
		try
		{
			// ..\\ES3.g:960:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:960:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(960, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4822);
			left=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(960, 25);
			 retval.value = left.value; 
			DebugLocation(960, 50);
			// ..\\ES3.g:960:50: ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if (((LA36_0>=GT && LA36_0<=GTE)||LA36_0==INSTANCEOF||(LA36_0>=LT && LA36_0<=LTE)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:961:3: ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression
					{
					DebugLocation(965, 61);
					// ..\\ES3.g:961:3: ( LT | GT | LTE | GTE | INSTANCEOF )
					int alt35=5;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt35 = 1;
						}
						break;
					case GT:
						{
						alt35 = 2;
						}
						break;
					case LTE:
						{
						alt35 = 3;
						}
						break;
					case GTE:
						{
						alt35 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt35 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:961:5: LT
						{
						DebugLocation(961, 5);
						LT52=(IToken)Match(input,LT,Follow._LT_in_relationalExpressionNoIn4833); 
						LT52_tree = (object)adaptor.Create(LT52);
						adaptor.AddChild(root_0, LT52_tree);

						DebugLocation(961, 8);
						 type= SyntaxExpressionType.LessThan; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:962:5: GT
						{
						DebugLocation(962, 5);
						GT53=(IToken)Match(input,GT,Follow._GT_in_relationalExpressionNoIn4841); 
						GT53_tree = (object)adaptor.Create(GT53);
						adaptor.AddChild(root_0, GT53_tree);

						DebugLocation(962, 8);
						 type= SyntaxExpressionType.GreaterThan; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:963:5: LTE
						{
						DebugLocation(963, 5);
						LTE54=(IToken)Match(input,LTE,Follow._LTE_in_relationalExpressionNoIn4849); 
						LTE54_tree = (object)adaptor.Create(LTE54);
						adaptor.AddChild(root_0, LTE54_tree);

						DebugLocation(963, 9);
						 type= SyntaxExpressionType.LessThanOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:964:5: GTE
						{
						DebugLocation(964, 5);
						GTE55=(IToken)Match(input,GTE,Follow._GTE_in_relationalExpressionNoIn4857); 
						GTE55_tree = (object)adaptor.Create(GTE55);
						adaptor.AddChild(root_0, GTE55_tree);

						DebugLocation(964, 9);
						 type= SyntaxExpressionType.GreaterThanOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:965:5: INSTANCEOF
						{
						DebugLocation(965, 5);
						INSTANCEOF56=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpressionNoIn4865); 
						INSTANCEOF56_tree = (object)adaptor.Create(INSTANCEOF56);
						adaptor.AddChild(root_0, INSTANCEOF56_tree);

						DebugLocation(965, 16);
						 type= SyntaxExpressionType.InstanceOf;  

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(966, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4877);
					right=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(966, 25);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpressionNoIn", 30);
			LeaveRule("relationalExpressionNoIn", 30);
			LeaveRule_relationalExpressionNoIn();
		}
		DebugLocation(967, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "relationalExpressionNoIn"

	private sealed partial class equalityExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public equalityExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// ..\\ES3.g:973:1: equalityExpression returns [ExpressionSyntax value] : left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private ES3Parser.equalityExpression_return equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 31);
		TraceIn("equalityExpression", 31);
		ES3Parser.equalityExpression_return retval = new ES3Parser.equalityExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EQ57 = default(IToken);
		IToken NEQ58 = default(IToken);
		IToken SAME59 = default(IToken);
		IToken NSAME60 = default(IToken);
		ES3Parser.relationalExpression_return left = default(ES3Parser.relationalExpression_return);
		ES3Parser.relationalExpression_return right = default(ES3Parser.relationalExpression_return);

		object EQ57_tree = default(object);
		object NEQ58_tree = default(object);
		object SAME59_tree = default(object);
		object NSAME60_tree = default(object);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(973, 1);
		try
		{
			// ..\\ES3.g:977:2: (left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:977:4: left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(977, 8);
			PushFollow(Follow._relationalExpression_in_equalityExpression4908);
			left=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(977, 30);
			 retval.value = left.value; 
			DebugLocation(977, 55);
			// ..\\ES3.g:977:55: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==EQ||LA38_0==NEQ||LA38_0==NSAME||LA38_0==SAME))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:978:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpression
					{
					DebugLocation(981, 51);
					// ..\\ES3.g:978:3: ( EQ | NEQ | SAME | NSAME )
					int alt37=4;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt37 = 1;
						}
						break;
					case NEQ:
						{
						alt37 = 2;
						}
						break;
					case SAME:
						{
						alt37 = 3;
						}
						break;
					case NSAME:
						{
						alt37 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:978:5: EQ
						{
						DebugLocation(978, 5);
						EQ57=(IToken)Match(input,EQ,Follow._EQ_in_equalityExpression4919); 
						EQ57_tree = (object)adaptor.Create(EQ57);
						adaptor.AddChild(root_0, EQ57_tree);

						DebugLocation(978, 8);
						 type= SyntaxExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:979:5: NEQ
						{
						DebugLocation(979, 5);
						NEQ58=(IToken)Match(input,NEQ,Follow._NEQ_in_equalityExpression4927); 
						NEQ58_tree = (object)adaptor.Create(NEQ58);
						adaptor.AddChild(root_0, NEQ58_tree);

						DebugLocation(979, 9);
						 type= SyntaxExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:980:5: SAME
						{
						DebugLocation(980, 5);
						SAME59=(IToken)Match(input,SAME,Follow._SAME_in_equalityExpression4935); 
						SAME59_tree = (object)adaptor.Create(SAME59);
						adaptor.AddChild(root_0, SAME59_tree);

						DebugLocation(980, 10);
						 type= SyntaxExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:981:5: NSAME
						{
						DebugLocation(981, 5);
						NSAME60=(IToken)Match(input,NSAME,Follow._NSAME_in_equalityExpression4943); 
						NSAME60_tree = (object)adaptor.Create(NSAME60);
						adaptor.AddChild(root_0, NSAME60_tree);

						DebugLocation(981, 11);
						 type= SyntaxExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(982, 8);
					PushFollow(Follow._relationalExpression_in_equalityExpression4954);
					right=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(982, 30);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 31);
			LeaveRule("equalityExpression", 31);
			LeaveRule_equalityExpression();
		}
		DebugLocation(983, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	private sealed partial class equalityExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public equalityExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_equalityExpressionNoIn();
	partial void LeaveRule_equalityExpressionNoIn();

	// $ANTLR start "equalityExpressionNoIn"
	// ..\\ES3.g:985:1: equalityExpressionNoIn returns [ExpressionSyntax value] : left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* ;
	[GrammarRule("equalityExpressionNoIn")]
	private ES3Parser.equalityExpressionNoIn_return equalityExpressionNoIn()
	{
		EnterRule_equalityExpressionNoIn();
		EnterRule("equalityExpressionNoIn", 32);
		TraceIn("equalityExpressionNoIn", 32);
		ES3Parser.equalityExpressionNoIn_return retval = new ES3Parser.equalityExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EQ61 = default(IToken);
		IToken NEQ62 = default(IToken);
		IToken SAME63 = default(IToken);
		IToken NSAME64 = default(IToken);
		ES3Parser.relationalExpressionNoIn_return left = default(ES3Parser.relationalExpressionNoIn_return);
		ES3Parser.relationalExpressionNoIn_return right = default(ES3Parser.relationalExpressionNoIn_return);

		object EQ61_tree = default(object);
		object NEQ62_tree = default(object);
		object SAME63_tree = default(object);
		object NSAME64_tree = default(object);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpressionNoIn");
		DebugLocation(985, 1);
		try
		{
			// ..\\ES3.g:989:2: (left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:989:4: left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(989, 8);
			PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn4980);
			left=relationalExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(989, 34);
			 retval.value = left.value; 
			DebugLocation(989, 59);
			// ..\\ES3.g:989:59: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==EQ||LA40_0==NEQ||LA40_0==NSAME||LA40_0==SAME))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:990:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn
					{
					DebugLocation(993, 51);
					// ..\\ES3.g:990:3: ( EQ | NEQ | SAME | NSAME )
					int alt39=4;
					try { DebugEnterSubRule(39);
					try { DebugEnterDecision(39, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt39 = 1;
						}
						break;
					case NEQ:
						{
						alt39 = 2;
						}
						break;
					case SAME:
						{
						alt39 = 3;
						}
						break;
					case NSAME:
						{
						alt39 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:990:5: EQ
						{
						DebugLocation(990, 5);
						EQ61=(IToken)Match(input,EQ,Follow._EQ_in_equalityExpressionNoIn4991); 
						EQ61_tree = (object)adaptor.Create(EQ61);
						adaptor.AddChild(root_0, EQ61_tree);

						DebugLocation(990, 8);
						 type= SyntaxExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:991:5: NEQ
						{
						DebugLocation(991, 5);
						NEQ62=(IToken)Match(input,NEQ,Follow._NEQ_in_equalityExpressionNoIn4999); 
						NEQ62_tree = (object)adaptor.Create(NEQ62);
						adaptor.AddChild(root_0, NEQ62_tree);

						DebugLocation(991, 9);
						 type= SyntaxExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:992:5: SAME
						{
						DebugLocation(992, 5);
						SAME63=(IToken)Match(input,SAME,Follow._SAME_in_equalityExpressionNoIn5007); 
						SAME63_tree = (object)adaptor.Create(SAME63);
						adaptor.AddChild(root_0, SAME63_tree);

						DebugLocation(992, 10);
						 type= SyntaxExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:993:5: NSAME
						{
						DebugLocation(993, 5);
						NSAME64=(IToken)Match(input,NSAME,Follow._NSAME_in_equalityExpressionNoIn5015); 
						NSAME64_tree = (object)adaptor.Create(NSAME64);
						adaptor.AddChild(root_0, NSAME64_tree);

						DebugLocation(993, 11);
						 type= SyntaxExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(39); }

					DebugLocation(994, 8);
					PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn5026);
					right=relationalExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(994, 34);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpressionNoIn", 32);
			LeaveRule("equalityExpressionNoIn", 32);
			LeaveRule_equalityExpressionNoIn();
		}
		DebugLocation(995, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "equalityExpressionNoIn"

	private sealed partial class bitwiseANDExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseANDExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseANDExpression();
	partial void LeaveRule_bitwiseANDExpression();

	// $ANTLR start "bitwiseANDExpression"
	// ..\\ES3.g:1001:1: bitwiseANDExpression returns [ExpressionSyntax value] : left= equalityExpression ( AND right= equalityExpression )* ;
	[GrammarRule("bitwiseANDExpression")]
	private ES3Parser.bitwiseANDExpression_return bitwiseANDExpression()
	{
		EnterRule_bitwiseANDExpression();
		EnterRule("bitwiseANDExpression", 33);
		TraceIn("bitwiseANDExpression", 33);
		ES3Parser.bitwiseANDExpression_return retval = new ES3Parser.bitwiseANDExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AND65 = default(IToken);
		ES3Parser.equalityExpression_return left = default(ES3Parser.equalityExpression_return);
		ES3Parser.equalityExpression_return right = default(ES3Parser.equalityExpression_return);

		object AND65_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpression");
		DebugLocation(1001, 1);
		try
		{
			// ..\\ES3.g:1002:2: (left= equalityExpression ( AND right= equalityExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1002:4: left= equalityExpression ( AND right= equalityExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1002, 8);
			PushFollow(Follow._equalityExpression_in_bitwiseANDExpression5053);
			left=equalityExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1002, 28);
			 retval.value = left.value; 
			DebugLocation(1002, 53);
			// ..\\ES3.g:1002:53: ( AND right= equalityExpression )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==AND))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1002:55: AND right= equalityExpression
					{
					DebugLocation(1002, 58);
					AND65=(IToken)Match(input,AND,Follow._AND_in_bitwiseANDExpression5059); 
					AND65_tree = (object)adaptor.Create(AND65);
					root_0 = (object)adaptor.BecomeRoot(AND65_tree, root_0);

					DebugLocation(1002, 65);
					PushFollow(Follow._equalityExpression_in_bitwiseANDExpression5064);
					right=equalityExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1002, 85);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseAnd, retval.value, right.value); 

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpression", 33);
			LeaveRule("bitwiseANDExpression", 33);
			LeaveRule_bitwiseANDExpression();
		}
		DebugLocation(1003, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpression"

	private sealed partial class bitwiseANDExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseANDExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseANDExpressionNoIn();
	partial void LeaveRule_bitwiseANDExpressionNoIn();

	// $ANTLR start "bitwiseANDExpressionNoIn"
	// ..\\ES3.g:1005:1: bitwiseANDExpressionNoIn returns [ExpressionSyntax value] : left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* ;
	[GrammarRule("bitwiseANDExpressionNoIn")]
	private ES3Parser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn()
	{
		EnterRule_bitwiseANDExpressionNoIn();
		EnterRule("bitwiseANDExpressionNoIn", 34);
		TraceIn("bitwiseANDExpressionNoIn", 34);
		ES3Parser.bitwiseANDExpressionNoIn_return retval = new ES3Parser.bitwiseANDExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AND66 = default(IToken);
		ES3Parser.equalityExpressionNoIn_return left = default(ES3Parser.equalityExpressionNoIn_return);
		ES3Parser.equalityExpressionNoIn_return right = default(ES3Parser.equalityExpressionNoIn_return);

		object AND66_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpressionNoIn");
		DebugLocation(1005, 1);
		try
		{
			// ..\\ES3.g:1006:2: (left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1006:4: left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1006, 8);
			PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5085);
			left=equalityExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1006, 32);
			 retval.value = left.value; 
			DebugLocation(1006, 57);
			// ..\\ES3.g:1006:57: ( AND right= equalityExpressionNoIn )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==AND))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1006:59: AND right= equalityExpressionNoIn
					{
					DebugLocation(1006, 62);
					AND66=(IToken)Match(input,AND,Follow._AND_in_bitwiseANDExpressionNoIn5091); 
					AND66_tree = (object)adaptor.Create(AND66);
					root_0 = (object)adaptor.BecomeRoot(AND66_tree, root_0);

					DebugLocation(1006, 69);
					PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5096);
					right=equalityExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1006, 93);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseAnd, retval.value, right.value); 

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpressionNoIn", 34);
			LeaveRule("bitwiseANDExpressionNoIn", 34);
			LeaveRule_bitwiseANDExpressionNoIn();
		}
		DebugLocation(1007, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpressionNoIn"

	private sealed partial class bitwiseXORExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseXORExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseXORExpression();
	partial void LeaveRule_bitwiseXORExpression();

	// $ANTLR start "bitwiseXORExpression"
	// ..\\ES3.g:1009:1: bitwiseXORExpression returns [ExpressionSyntax value] : left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* ;
	[GrammarRule("bitwiseXORExpression")]
	private ES3Parser.bitwiseXORExpression_return bitwiseXORExpression()
	{
		EnterRule_bitwiseXORExpression();
		EnterRule("bitwiseXORExpression", 35);
		TraceIn("bitwiseXORExpression", 35);
		ES3Parser.bitwiseXORExpression_return retval = new ES3Parser.bitwiseXORExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken XOR67 = default(IToken);
		ES3Parser.bitwiseANDExpression_return left = default(ES3Parser.bitwiseANDExpression_return);
		ES3Parser.bitwiseANDExpression_return right = default(ES3Parser.bitwiseANDExpression_return);

		object XOR67_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpression");
		DebugLocation(1009, 1);
		try
		{
			// ..\\ES3.g:1010:2: (left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1010:4: left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1010, 8);
			PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression5119);
			left=bitwiseANDExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1010, 30);
			 retval.value = left.value; 
			DebugLocation(1010, 55);
			// ..\\ES3.g:1010:55: ( XOR right= bitwiseANDExpression )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==XOR))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1010:57: XOR right= bitwiseANDExpression
					{
					DebugLocation(1010, 60);
					XOR67=(IToken)Match(input,XOR,Follow._XOR_in_bitwiseXORExpression5125); 
					XOR67_tree = (object)adaptor.Create(XOR67);
					root_0 = (object)adaptor.BecomeRoot(XOR67_tree, root_0);

					DebugLocation(1010, 67);
					PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression5130);
					right=bitwiseANDExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1010, 89);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseExclusiveOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpression", 35);
			LeaveRule("bitwiseXORExpression", 35);
			LeaveRule_bitwiseXORExpression();
		}
		DebugLocation(1011, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpression"

	private sealed partial class bitwiseXORExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseXORExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseXORExpressionNoIn();
	partial void LeaveRule_bitwiseXORExpressionNoIn();

	// $ANTLR start "bitwiseXORExpressionNoIn"
	// ..\\ES3.g:1013:1: bitwiseXORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* ;
	[GrammarRule("bitwiseXORExpressionNoIn")]
	private ES3Parser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn()
	{
		EnterRule_bitwiseXORExpressionNoIn();
		EnterRule("bitwiseXORExpressionNoIn", 36);
		TraceIn("bitwiseXORExpressionNoIn", 36);
		ES3Parser.bitwiseXORExpressionNoIn_return retval = new ES3Parser.bitwiseXORExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken XOR68 = default(IToken);
		ES3Parser.bitwiseANDExpressionNoIn_return left = default(ES3Parser.bitwiseANDExpressionNoIn_return);
		ES3Parser.bitwiseANDExpressionNoIn_return right = default(ES3Parser.bitwiseANDExpressionNoIn_return);

		object XOR68_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpressionNoIn");
		DebugLocation(1013, 1);
		try
		{
			// ..\\ES3.g:1014:2: (left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1014:4: left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1014, 8);
			PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5153);
			left=bitwiseANDExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1014, 34);
			 retval.value = left.value; 
			DebugLocation(1014, 59);
			// ..\\ES3.g:1014:59: ( XOR right= bitwiseANDExpressionNoIn )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==XOR))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1014:61: XOR right= bitwiseANDExpressionNoIn
					{
					DebugLocation(1014, 64);
					XOR68=(IToken)Match(input,XOR,Follow._XOR_in_bitwiseXORExpressionNoIn5159); 
					XOR68_tree = (object)adaptor.Create(XOR68);
					root_0 = (object)adaptor.BecomeRoot(XOR68_tree, root_0);

					DebugLocation(1014, 71);
					PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5164);
					right=bitwiseANDExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1014, 97);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseExclusiveOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpressionNoIn", 36);
			LeaveRule("bitwiseXORExpressionNoIn", 36);
			LeaveRule_bitwiseXORExpressionNoIn();
		}
		DebugLocation(1015, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpressionNoIn"

	private sealed partial class bitwiseORExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseORExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseORExpression();
	partial void LeaveRule_bitwiseORExpression();

	// $ANTLR start "bitwiseORExpression"
	// ..\\ES3.g:1017:1: bitwiseORExpression returns [ExpressionSyntax value] : left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* ;
	[GrammarRule("bitwiseORExpression")]
	private ES3Parser.bitwiseORExpression_return bitwiseORExpression()
	{
		EnterRule_bitwiseORExpression();
		EnterRule("bitwiseORExpression", 37);
		TraceIn("bitwiseORExpression", 37);
		ES3Parser.bitwiseORExpression_return retval = new ES3Parser.bitwiseORExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OR69 = default(IToken);
		ES3Parser.bitwiseXORExpression_return left = default(ES3Parser.bitwiseXORExpression_return);
		ES3Parser.bitwiseXORExpression_return right = default(ES3Parser.bitwiseXORExpression_return);

		object OR69_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpression");
		DebugLocation(1017, 1);
		try
		{
			// ..\\ES3.g:1018:2: (left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1018:4: left= bitwiseXORExpression ( OR right= bitwiseXORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1018, 8);
			PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression5186);
			left=bitwiseXORExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1018, 30);
			 retval.value = left.value; 
			DebugLocation(1018, 55);
			// ..\\ES3.g:1018:55: ( OR right= bitwiseXORExpression )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==OR))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1018:57: OR right= bitwiseXORExpression
					{
					DebugLocation(1018, 59);
					OR69=(IToken)Match(input,OR,Follow._OR_in_bitwiseORExpression5192); 
					OR69_tree = (object)adaptor.Create(OR69);
					root_0 = (object)adaptor.BecomeRoot(OR69_tree, root_0);

					DebugLocation(1018, 66);
					PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression5197);
					right=bitwiseXORExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1018, 88);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpression", 37);
			LeaveRule("bitwiseORExpression", 37);
			LeaveRule_bitwiseORExpression();
		}
		DebugLocation(1019, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpression"

	private sealed partial class bitwiseORExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseORExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseORExpressionNoIn();
	partial void LeaveRule_bitwiseORExpressionNoIn();

	// $ANTLR start "bitwiseORExpressionNoIn"
	// ..\\ES3.g:1021:1: bitwiseORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* ;
	[GrammarRule("bitwiseORExpressionNoIn")]
	private ES3Parser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn()
	{
		EnterRule_bitwiseORExpressionNoIn();
		EnterRule("bitwiseORExpressionNoIn", 38);
		TraceIn("bitwiseORExpressionNoIn", 38);
		ES3Parser.bitwiseORExpressionNoIn_return retval = new ES3Parser.bitwiseORExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OR70 = default(IToken);
		ES3Parser.bitwiseXORExpressionNoIn_return left = default(ES3Parser.bitwiseXORExpressionNoIn_return);
		ES3Parser.bitwiseXORExpressionNoIn_return right = default(ES3Parser.bitwiseXORExpressionNoIn_return);

		object OR70_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpressionNoIn");
		DebugLocation(1021, 1);
		try
		{
			// ..\\ES3.g:1022:2: (left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1022:4: left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1022, 8);
			PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5219);
			left=bitwiseXORExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1022, 34);
			 retval.value = left.value; 
			DebugLocation(1022, 59);
			// ..\\ES3.g:1022:59: ( OR right= bitwiseXORExpressionNoIn )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==OR))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1022:61: OR right= bitwiseXORExpressionNoIn
					{
					DebugLocation(1022, 63);
					OR70=(IToken)Match(input,OR,Follow._OR_in_bitwiseORExpressionNoIn5225); 
					OR70_tree = (object)adaptor.Create(OR70);
					root_0 = (object)adaptor.BecomeRoot(OR70_tree, root_0);

					DebugLocation(1022, 70);
					PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5230);
					right=bitwiseXORExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1022, 96);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpressionNoIn", 38);
			LeaveRule("bitwiseORExpressionNoIn", 38);
			LeaveRule_bitwiseORExpressionNoIn();
		}
		DebugLocation(1023, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpressionNoIn"

	private sealed partial class logicalANDExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalANDExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalANDExpression();
	partial void LeaveRule_logicalANDExpression();

	// $ANTLR start "logicalANDExpression"
	// ..\\ES3.g:1029:1: logicalANDExpression returns [ExpressionSyntax value] : left= bitwiseORExpression ( LAND right= bitwiseORExpression )* ;
	[GrammarRule("logicalANDExpression")]
	private ES3Parser.logicalANDExpression_return logicalANDExpression()
	{
		EnterRule_logicalANDExpression();
		EnterRule("logicalANDExpression", 39);
		TraceIn("logicalANDExpression", 39);
		ES3Parser.logicalANDExpression_return retval = new ES3Parser.logicalANDExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LAND71 = default(IToken);
		ES3Parser.bitwiseORExpression_return left = default(ES3Parser.bitwiseORExpression_return);
		ES3Parser.bitwiseORExpression_return right = default(ES3Parser.bitwiseORExpression_return);

		object LAND71_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpression");
		DebugLocation(1029, 1);
		try
		{
			// ..\\ES3.g:1030:2: (left= bitwiseORExpression ( LAND right= bitwiseORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1030:3: left= bitwiseORExpression ( LAND right= bitwiseORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1030, 7);
			PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression5256);
			left=bitwiseORExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1030, 29);
			 retval.value = left.value; 
			DebugLocation(1030, 54);
			// ..\\ES3.g:1030:54: ( LAND right= bitwiseORExpression )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==LAND))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1030:56: LAND right= bitwiseORExpression
					{
					DebugLocation(1030, 60);
					LAND71=(IToken)Match(input,LAND,Follow._LAND_in_logicalANDExpression5262); 
					LAND71_tree = (object)adaptor.Create(LAND71);
					root_0 = (object)adaptor.BecomeRoot(LAND71_tree, root_0);

					DebugLocation(1030, 67);
					PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression5267);
					right=bitwiseORExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1030, 88);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.And, retval.value, right.value); 

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpression", 39);
			LeaveRule("logicalANDExpression", 39);
			LeaveRule_logicalANDExpression();
		}
		DebugLocation(1031, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpression"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpression"

	private sealed partial class logicalANDExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalANDExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalANDExpressionNoIn();
	partial void LeaveRule_logicalANDExpressionNoIn();

	// $ANTLR start "logicalANDExpressionNoIn"
	// ..\\ES3.g:1033:1: logicalANDExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* ;
	[GrammarRule("logicalANDExpressionNoIn")]
	private ES3Parser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn()
	{
		EnterRule_logicalANDExpressionNoIn();
		EnterRule("logicalANDExpressionNoIn", 40);
		TraceIn("logicalANDExpressionNoIn", 40);
		ES3Parser.logicalANDExpressionNoIn_return retval = new ES3Parser.logicalANDExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LAND72 = default(IToken);
		ES3Parser.bitwiseORExpressionNoIn_return left = default(ES3Parser.bitwiseORExpressionNoIn_return);
		ES3Parser.bitwiseORExpressionNoIn_return right = default(ES3Parser.bitwiseORExpressionNoIn_return);

		object LAND72_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpressionNoIn");
		DebugLocation(1033, 1);
		try
		{
			// ..\\ES3.g:1034:2: (left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1034:3: left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1034, 7);
			PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5288);
			left=bitwiseORExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1034, 33);
			 retval.value = left.value; 
			DebugLocation(1034, 58);
			// ..\\ES3.g:1034:58: ( LAND right= bitwiseORExpressionNoIn )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==LAND))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1034:60: LAND right= bitwiseORExpressionNoIn
					{
					DebugLocation(1034, 64);
					LAND72=(IToken)Match(input,LAND,Follow._LAND_in_logicalANDExpressionNoIn5294); 
					LAND72_tree = (object)adaptor.Create(LAND72);
					root_0 = (object)adaptor.BecomeRoot(LAND72_tree, root_0);

					DebugLocation(1034, 71);
					PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5299);
					right=bitwiseORExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1034, 96);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.And, retval.value, right.value); 

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpressionNoIn", 40);
			LeaveRule("logicalANDExpressionNoIn", 40);
			LeaveRule_logicalANDExpressionNoIn();
		}
		DebugLocation(1035, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpressionNoIn"

	private sealed partial class logicalORExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalORExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalORExpression();
	partial void LeaveRule_logicalORExpression();

	// $ANTLR start "logicalORExpression"
	// ..\\ES3.g:1037:1: logicalORExpression returns [ExpressionSyntax value] : left= logicalANDExpression ( LOR right= logicalANDExpression )* ;
	[GrammarRule("logicalORExpression")]
	private ES3Parser.logicalORExpression_return logicalORExpression()
	{
		EnterRule_logicalORExpression();
		EnterRule("logicalORExpression", 41);
		TraceIn("logicalORExpression", 41);
		ES3Parser.logicalORExpression_return retval = new ES3Parser.logicalORExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LOR73 = default(IToken);
		ES3Parser.logicalANDExpression_return left = default(ES3Parser.logicalANDExpression_return);
		ES3Parser.logicalANDExpression_return right = default(ES3Parser.logicalANDExpression_return);

		object LOR73_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalORExpression");
		DebugLocation(1037, 1);
		try
		{
			// ..\\ES3.g:1038:2: (left= logicalANDExpression ( LOR right= logicalANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1038:4: left= logicalANDExpression ( LOR right= logicalANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1038, 8);
			PushFollow(Follow._logicalANDExpression_in_logicalORExpression5321);
			left=logicalANDExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1038, 30);
			 retval.value = left.value; 
			DebugLocation(1038, 55);
			// ..\\ES3.g:1038:55: ( LOR right= logicalANDExpression )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==LOR))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1038:57: LOR right= logicalANDExpression
					{
					DebugLocation(1038, 60);
					LOR73=(IToken)Match(input,LOR,Follow._LOR_in_logicalORExpression5327); 
					LOR73_tree = (object)adaptor.Create(LOR73);
					root_0 = (object)adaptor.BecomeRoot(LOR73_tree, root_0);

					DebugLocation(1038, 67);
					PushFollow(Follow._logicalANDExpression_in_logicalORExpression5332);
					right=logicalANDExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1038, 89);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.Or, retval.value, right.value); 

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpression", 41);
			LeaveRule("logicalORExpression", 41);
			LeaveRule_logicalORExpression();
		}
		DebugLocation(1039, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpression"); }
		return retval;

	}
	// $ANTLR end "logicalORExpression"

	private sealed partial class logicalORExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalORExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalORExpressionNoIn();
	partial void LeaveRule_logicalORExpressionNoIn();

	// $ANTLR start "logicalORExpressionNoIn"
	// ..\\ES3.g:1041:1: logicalORExpressionNoIn returns [ExpressionSyntax value] : left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* ;
	[GrammarRule("logicalORExpressionNoIn")]
	private ES3Parser.logicalORExpressionNoIn_return logicalORExpressionNoIn()
	{
		EnterRule_logicalORExpressionNoIn();
		EnterRule("logicalORExpressionNoIn", 42);
		TraceIn("logicalORExpressionNoIn", 42);
		ES3Parser.logicalORExpressionNoIn_return retval = new ES3Parser.logicalORExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LOR74 = default(IToken);
		ES3Parser.logicalANDExpressionNoIn_return left = default(ES3Parser.logicalANDExpressionNoIn_return);
		ES3Parser.logicalANDExpressionNoIn_return right = default(ES3Parser.logicalANDExpressionNoIn_return);

		object LOR74_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalORExpressionNoIn");
		DebugLocation(1041, 1);
		try
		{
			// ..\\ES3.g:1042:2: (left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1042:4: left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1042, 8);
			PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn5354);
			left=logicalANDExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(1042, 34);
			 retval.value = left.value; 
			DebugLocation(1042, 59);
			// ..\\ES3.g:1042:59: ( LOR right= logicalANDExpressionNoIn )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==LOR))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1042:61: LOR right= logicalANDExpressionNoIn
					{
					DebugLocation(1042, 64);
					LOR74=(IToken)Match(input,LOR,Follow._LOR_in_logicalORExpressionNoIn5360); 
					LOR74_tree = (object)adaptor.Create(LOR74);
					root_0 = (object)adaptor.BecomeRoot(LOR74_tree, root_0);

					DebugLocation(1042, 71);
					PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn5365);
					right=logicalANDExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(1042, 97);
					 retval.value = new BinaryExpressionSyntax(SyntaxExpressionType.Or, retval.value, right.value); 

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpressionNoIn", 42);
			LeaveRule("logicalORExpressionNoIn", 42);
			LeaveRule_logicalORExpressionNoIn();
		}
		DebugLocation(1043, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalORExpressionNoIn"

	private sealed partial class conditionalExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public conditionalExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// ..\\ES3.g:1049:1: conditionalExpression returns [ExpressionSyntax value] : expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? ;
	[GrammarRule("conditionalExpression")]
	private ES3Parser.conditionalExpression_return conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 43);
		TraceIn("conditionalExpression", 43);
		ES3Parser.conditionalExpression_return retval = new ES3Parser.conditionalExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken QUE75 = default(IToken);
		IToken COLON76 = default(IToken);
		ES3Parser.logicalORExpression_return expr1 = default(ES3Parser.logicalORExpression_return);
		ES3Parser.assignmentExpression_return expr2 = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return expr3 = default(ES3Parser.assignmentExpression_return);

		object QUE75_tree = default(object);
		object COLON76_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1049, 1);
		try
		{
			// ..\\ES3.g:1050:2: (expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1050:4: expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1050, 9);
			PushFollow(Follow._logicalORExpression_in_conditionalExpression5392);
			expr1=logicalORExpression();
			PopFollow();

			adaptor.AddChild(root_0, expr1.Tree);
			DebugLocation(1050, 30);
			 retval.value = expr1.value; 
			DebugLocation(1050, 56);
			// ..\\ES3.g:1050:56: ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==QUE))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1050:58: QUE expr2= assignmentExpression COLON expr3= assignmentExpression
				{
				DebugLocation(1050, 61);
				QUE75=(IToken)Match(input,QUE,Follow._QUE_in_conditionalExpression5398); 
				QUE75_tree = (object)adaptor.Create(QUE75);
				root_0 = (object)adaptor.BecomeRoot(QUE75_tree, root_0);

				DebugLocation(1050, 68);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression5403);
				expr2=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, expr2.Tree);
				DebugLocation(1050, 95);
				COLON76=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression5405); 
				DebugLocation(1050, 102);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression5410);
				expr3=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, expr3.Tree);
				DebugLocation(1050, 124);
				 retval.value = new TernarySyntax(expr1.value, expr2.value, expr3.value); 

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 43);
			LeaveRule("conditionalExpression", 43);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(1051, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	private sealed partial class conditionalExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public conditionalExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_conditionalExpressionNoIn();
	partial void LeaveRule_conditionalExpressionNoIn();

	// $ANTLR start "conditionalExpressionNoIn"
	// ..\\ES3.g:1053:1: conditionalExpressionNoIn returns [ExpressionSyntax value] : expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? ;
	[GrammarRule("conditionalExpressionNoIn")]
	private ES3Parser.conditionalExpressionNoIn_return conditionalExpressionNoIn()
	{
		EnterRule_conditionalExpressionNoIn();
		EnterRule("conditionalExpressionNoIn", 44);
		TraceIn("conditionalExpressionNoIn", 44);
		ES3Parser.conditionalExpressionNoIn_return retval = new ES3Parser.conditionalExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken QUE77 = default(IToken);
		IToken COLON78 = default(IToken);
		ES3Parser.logicalORExpressionNoIn_return expr1 = default(ES3Parser.logicalORExpressionNoIn_return);
		ES3Parser.assignmentExpressionNoIn_return expr2 = default(ES3Parser.assignmentExpressionNoIn_return);
		ES3Parser.assignmentExpressionNoIn_return expr3 = default(ES3Parser.assignmentExpressionNoIn_return);

		object QUE77_tree = default(object);
		object COLON78_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conditionalExpressionNoIn");
		DebugLocation(1053, 1);
		try
		{
			// ..\\ES3.g:1054:2: (expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1054:4: expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1054, 9);
			PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn5431);
			expr1=logicalORExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, expr1.Tree);
			DebugLocation(1054, 34);
			 retval.value = expr1.value; 
			DebugLocation(1054, 60);
			// ..\\ES3.g:1054:60: ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==QUE))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1054:62: QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn
				{
				DebugLocation(1054, 65);
				QUE77=(IToken)Match(input,QUE,Follow._QUE_in_conditionalExpressionNoIn5437); 
				QUE77_tree = (object)adaptor.Create(QUE77);
				root_0 = (object)adaptor.BecomeRoot(QUE77_tree, root_0);

				DebugLocation(1054, 72);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn5442);
				expr2=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, expr2.Tree);
				DebugLocation(1054, 103);
				COLON78=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpressionNoIn5444); 
				DebugLocation(1054, 110);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn5449);
				expr3=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, expr3.Tree);
				DebugLocation(1054, 136);
				 retval.value = new TernarySyntax(expr1.value, expr2.value, expr3.value); 

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpressionNoIn", 44);
			LeaveRule("conditionalExpressionNoIn", 44);
			LeaveRule_conditionalExpressionNoIn();
		}
		DebugLocation(1055, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "conditionalExpressionNoIn"

	private sealed partial class assignmentExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignmentExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// ..\\ES3.g:1083:1: assignmentExpression returns [ExpressionSyntax value] : lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private ES3Parser.assignmentExpression_return assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 45);
		TraceIn("assignmentExpression", 45);
		ES3Parser.assignmentExpression_return retval = new ES3Parser.assignmentExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.conditionalExpression_return lhs = default(ES3Parser.conditionalExpression_return);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ES3Parser.assignmentExpression_return exp = default(ES3Parser.assignmentExpression_return);



		    bool? isLhs = null;

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(1083, 1);
		try
		{
			// ..\\ES3.g:1087:2: (lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1088:9: lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1088, 12);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression5490);
			lhs=conditionalExpression();
			PopFollow();

			adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(1089, 9);
			 retval.value = (lhs!=null?lhs.value:default(ExpressionSyntax)); 
			DebugLocation(1090, 6);
			// ..\\ES3.g:1090:6: ({...}?ass= assignmentOperator exp= assignmentExpression )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==ADDASS||LA53_0==ANDASS||LA53_0==ASSIGN||LA53_0==DIVASS||LA53_0==MODASS||LA53_0==MULASS||LA53_0==ORASS||LA53_0==SHLASS||LA53_0==SHRASS||LA53_0==SHUASS||LA53_0==SUBASS||LA53_0==XORASS))
			{
				int LA53_1 = input.LA(2);

				if ((( IsLeftHandSideAssign((lhs!=null?lhs.value:default(ExpressionSyntax)), ref isLhs) )))
				{
					alt53 = 1;
				}
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1091:13: {...}?ass= assignmentOperator exp= assignmentExpression
				{
				DebugLocation(1091, 13);
				if (!(( IsLeftHandSideAssign((lhs!=null?lhs.value:default(ExpressionSyntax)), ref isLhs) )))
				{
					throw new FailedPredicateException(input, "assignmentExpression", " IsLeftHandSideAssign($lhs.value, ref isLhs) ");
				}
				DebugLocation(1092, 16);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression5537);
				ass=assignmentOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(ass.Tree, root_0);
				DebugLocation(1093, 16);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression5554);
				exp=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, exp.Tree);
				DebugLocation(1094, 13);

				                retval.value = new AssignmentSyntax(
				                    ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)),
				                    retval.value,
				                    (exp!=null?exp.value:default(ExpressionSyntax))
				                );
				            

				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 45);
			LeaveRule("assignmentExpression", 45);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(1102, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	private sealed partial class assignmentOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignmentOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();

	// $ANTLR start "assignmentOperator"
	// ..\\ES3.g:1104:1: assignmentOperator : ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS );
	[GrammarRule("assignmentOperator")]
	private ES3Parser.assignmentOperator_return assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 46);
		TraceIn("assignmentOperator", 46);
		ES3Parser.assignmentOperator_return retval = new ES3Parser.assignmentOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set79 = default(IToken);

		object set79_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(1104, 1);
		try
		{
			// ..\\ES3.g:1105:2: ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1105, 2);
			set79=(IToken)input.LT(1);
			if (input.LA(1)==ADDASS||input.LA(1)==ANDASS||input.LA(1)==ASSIGN||input.LA(1)==DIVASS||input.LA(1)==MODASS||input.LA(1)==MULASS||input.LA(1)==ORASS||input.LA(1)==SHLASS||input.LA(1)==SHRASS||input.LA(1)==SHUASS||input.LA(1)==SUBASS||input.LA(1)==XORASS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set79));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentOperator", 46);
			LeaveRule("assignmentOperator", 46);
			LeaveRule_assignmentOperator();
		}
		DebugLocation(1117, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	private sealed partial class assignmentExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignmentExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentExpressionNoIn();
	partial void LeaveRule_assignmentExpressionNoIn();

	// $ANTLR start "assignmentExpressionNoIn"
	// ..\\ES3.g:1119:1: assignmentExpressionNoIn returns [ExpressionSyntax value] : lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? ;
	[GrammarRule("assignmentExpressionNoIn")]
	private ES3Parser.assignmentExpressionNoIn_return assignmentExpressionNoIn()
	{
		EnterRule_assignmentExpressionNoIn();
		EnterRule("assignmentExpressionNoIn", 47);
		TraceIn("assignmentExpressionNoIn", 47);
		ES3Parser.assignmentExpressionNoIn_return retval = new ES3Parser.assignmentExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.conditionalExpressionNoIn_return lhs = default(ES3Parser.conditionalExpressionNoIn_return);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ES3Parser.assignmentExpressionNoIn_return exp = default(ES3Parser.assignmentExpressionNoIn_return);



			bool? isLhs = null;

		try { DebugEnterRule(GrammarFileName, "assignmentExpressionNoIn");
		DebugLocation(1119, 1);
		try
		{
			// ..\\ES3.g:1124:2: (lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1125:9: lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1125, 12);
			PushFollow(Follow._conditionalExpressionNoIn_in_assignmentExpressionNoIn5677);
			lhs=conditionalExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(1126, 9);
			 retval.value = (lhs!=null?lhs.value:default(ExpressionSyntax)); 
			DebugLocation(1127, 6);
			// ..\\ES3.g:1127:6: ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==ADDASS||LA54_0==ANDASS||LA54_0==ASSIGN||LA54_0==DIVASS||LA54_0==MODASS||LA54_0==MULASS||LA54_0==ORASS||LA54_0==SHLASS||LA54_0==SHRASS||LA54_0==SHUASS||LA54_0==SUBASS||LA54_0==XORASS))
			{
				int LA54_1 = input.LA(2);

				if ((( IsLeftHandSideAssign((lhs!=null?lhs.value:default(ExpressionSyntax)), ref isLhs) )))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1128:13: {...}?ass= assignmentOperator exp= assignmentExpressionNoIn
				{
				DebugLocation(1128, 13);
				if (!(( IsLeftHandSideAssign((lhs!=null?lhs.value:default(ExpressionSyntax)), ref isLhs) )))
				{
					throw new FailedPredicateException(input, "assignmentExpressionNoIn", " IsLeftHandSideAssign($lhs.value, ref isLhs) ");
				}
				DebugLocation(1129, 16);
				PushFollow(Follow._assignmentOperator_in_assignmentExpressionNoIn5725);
				ass=assignmentOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(ass.Tree, root_0);
				DebugLocation(1130, 16);
				PushFollow(Follow._assignmentExpressionNoIn_in_assignmentExpressionNoIn5742);
				exp=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, exp.Tree);
				DebugLocation(1131, 13);

				                retval.value = new AssignmentSyntax(
				                    ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)),
				                    retval.value,
				                    (exp!=null?exp.value:default(ExpressionSyntax))
				                );
				            

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpressionNoIn", 47);
			LeaveRule("assignmentExpressionNoIn", 47);
			LeaveRule_assignmentExpressionNoIn();
		}
		DebugLocation(1139, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "assignmentExpressionNoIn"

	private sealed partial class expression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// ..\\ES3.g:1145:1: expression returns [ExpressionSyntax value] : first= assignmentExpression ( COMMA follow= assignmentExpression )* ;
	[GrammarRule("expression")]
	private ES3Parser.expression_return expression()
	{
		EnterRule_expression();
		EnterRule("expression", 48);
		TraceIn("expression", 48);
		ES3Parser.expression_return retval = new ES3Parser.expression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA80 = default(IToken);
		ES3Parser.assignmentExpression_return first = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return follow = default(ES3Parser.assignmentExpression_return);

		object COMMA80_tree = default(object);


		    List<SyntaxNode> nodes = null;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(1145, 1);
		try
		{
			// ..\\ES3.g:1153:2: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1154:9: first= assignmentExpression ( COMMA follow= assignmentExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1154, 14);
			PushFollow(Follow._assignmentExpression_in_expression5808);
			first=assignmentExpression();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1155, 9);
			 retval.value = (first!=null?first.value:default(ExpressionSyntax)); 
			DebugLocation(1156, 9);
			// ..\\ES3.g:1156:9: ( COMMA follow= assignmentExpression )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==COMMA))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1157:13: COMMA follow= assignmentExpression
					{
					DebugLocation(1157, 13);
					COMMA80=(IToken)Match(input,COMMA,Follow._COMMA_in_expression5842); 
					COMMA80_tree = (object)adaptor.Create(COMMA80);
					adaptor.AddChild(root_0, COMMA80_tree);

					DebugLocation(1158, 19);
					PushFollow(Follow._assignmentExpression_in_expression5858);
					follow=assignmentExpression();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1159, 13);

					                if (nodes == null)
					                    nodes = new List<SyntaxNode> { retval.value };

					                nodes.Add((follow!=null?follow.value:default(ExpressionSyntax)));
					            

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    if (nodes != null)
			        retval.value = new CommaOperatorSyntax(nodes);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 48);
			LeaveRule("expression", 48);
			LeaveRule_expression();
		}
		DebugLocation(1166, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	private sealed partial class expressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_expressionNoIn();
	partial void LeaveRule_expressionNoIn();

	// $ANTLR start "expressionNoIn"
	// ..\\ES3.g:1168:1: expressionNoIn returns [ExpressionSyntax value] : first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* ;
	[GrammarRule("expressionNoIn")]
	private ES3Parser.expressionNoIn_return expressionNoIn()
	{
		EnterRule_expressionNoIn();
		EnterRule("expressionNoIn", 49);
		TraceIn("expressionNoIn", 49);
		ES3Parser.expressionNoIn_return retval = new ES3Parser.expressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA81 = default(IToken);
		ES3Parser.assignmentExpressionNoIn_return first = default(ES3Parser.assignmentExpressionNoIn_return);
		ES3Parser.assignmentExpressionNoIn_return follow = default(ES3Parser.assignmentExpressionNoIn_return);

		object COMMA81_tree = default(object);


		    List<SyntaxNode> nodes = null;

		try { DebugEnterRule(GrammarFileName, "expressionNoIn");
		DebugLocation(1168, 1);
		try
		{
			// ..\\ES3.g:1176:2: (first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1177:9: first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1177, 14);
			PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn5918);
			first=assignmentExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1178, 9);
			 retval.value = first.value; 
			DebugLocation(1179, 9);
			// ..\\ES3.g:1179:9: ( COMMA follow= assignmentExpressionNoIn )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==COMMA))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1180:13: COMMA follow= assignmentExpressionNoIn
					{
					DebugLocation(1180, 13);
					COMMA81=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionNoIn5952); 
					COMMA81_tree = (object)adaptor.Create(COMMA81);
					adaptor.AddChild(root_0, COMMA81_tree);

					DebugLocation(1181, 19);
					PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn5968);
					follow=assignmentExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1182, 13);

					                if (nodes == null)
					                    nodes = new List<SyntaxNode> { retval.value };

					                nodes.Add((follow!=null?follow.value:default(ExpressionSyntax)));
					            

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    if (nodes != null)
			        retval.value = new CommaOperatorSyntax(nodes);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionNoIn", 49);
			LeaveRule("expressionNoIn", 49);
			LeaveRule_expressionNoIn();
		}
		DebugLocation(1189, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionNoIn"); }
		return retval;

	}
	// $ANTLR end "expressionNoIn"

	private sealed partial class semic_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public semic_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_semic();
	partial void LeaveRule_semic();

	// $ANTLR start "semic"
	// ..\\ES3.g:1213:1: semic : ( SEMIC | EOF | RBRACE | EOL | MultiLineComment );
	[GrammarRule("semic")]
	private ES3Parser.semic_return semic()
	{
		EnterRule_semic();
		EnterRule("semic", 50);
		TraceIn("semic", 50);
		ES3Parser.semic_return retval = new ES3Parser.semic_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SEMIC82 = default(IToken);
		IToken EOF83 = default(IToken);
		IToken RBRACE84 = default(IToken);
		IToken EOL85 = default(IToken);
		IToken MultiLineComment86 = default(IToken);

		object SEMIC82_tree = default(object);
		object EOF83_tree = default(object);
		object RBRACE84_tree = default(object);
		object EOL85_tree = default(object);
		object MultiLineComment86_tree = default(object);


			// Mark current position so we can unconsume a RBRACE.
			int marker = input.Mark();
			// Promote EOL if appropriate	
			PromoteEOL(retval);

		try { DebugEnterRule(GrammarFileName, "semic");
		DebugLocation(1213, 1);
		try
		{
			// ..\\ES3.g:1221:2: ( SEMIC | EOF | RBRACE | EOL | MultiLineComment )
			int alt57=5;
			try { DebugEnterDecision(57, false);
			switch (input.LA(1))
			{
			case SEMIC:
				{
				alt57 = 1;
				}
				break;
			case EOF:
				{
				alt57 = 2;
				}
				break;
			case RBRACE:
				{
				alt57 = 3;
				}
				break;
			case EOL:
				{
				alt57 = 4;
				}
				break;
			case MultiLineComment:
				{
				alt57 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1221:4: SEMIC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1221, 4);
				SEMIC82=(IToken)Match(input,SEMIC,Follow._SEMIC_in_semic6021); 
				SEMIC82_tree = (object)adaptor.Create(SEMIC82);
				adaptor.AddChild(root_0, SEMIC82_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1222:4: EOF
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1222, 4);
				EOF83=(IToken)Match(input,EOF,Follow._EOF_in_semic6026); 
				EOF83_tree = (object)adaptor.Create(EOF83);
				adaptor.AddChild(root_0, EOF83_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1223:4: RBRACE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1223, 4);
				RBRACE84=(IToken)Match(input,RBRACE,Follow._RBRACE_in_semic6031); 
				RBRACE84_tree = (object)adaptor.Create(RBRACE84);
				adaptor.AddChild(root_0, RBRACE84_tree);

				DebugLocation(1223, 11);
				 input.Rewind(marker); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1224:4: EOL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1224, 4);
				EOL85=(IToken)Match(input,EOL,Follow._EOL_in_semic6038); 
				EOL85_tree = (object)adaptor.Create(EOL85);
				adaptor.AddChild(root_0, EOL85_tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1224:10: MultiLineComment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1224, 10);
				MultiLineComment86=(IToken)Match(input,MultiLineComment,Follow._MultiLineComment_in_semic6042); 
				MultiLineComment86_tree = (object)adaptor.Create(MultiLineComment86);
				adaptor.AddChild(root_0, MultiLineComment86_tree);


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("semic", 50);
			LeaveRule("semic", 50);
			LeaveRule_semic();
		}
		DebugLocation(1225, 1);
		} finally { DebugExitRule(GrammarFileName, "semic"); }
		return retval;

	}
	// $ANTLR end "semic"

	private sealed partial class statement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// ..\\ES3.g:1232:1: statement returns [SyntaxNode value] options {k=1; } : ({...}? block |{...}?func= functionDeclaration | statementTail );
	[GrammarRule("statement")]
	private ES3Parser.statement_return statement()
	{
		EnterRule_statement();
		EnterRule("statement", 51);
		TraceIn("statement", 51);
		ES3Parser.statement_return retval = new ES3Parser.statement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.functionDeclaration_return func = default(ES3Parser.functionDeclaration_return);
		ES3Parser.block_return block87 = default(ES3Parser.block_return);
		ES3Parser.statementTail_return statementTail88 = default(ES3Parser.statementTail_return);


		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(1232, 1);
		try
		{
			// ..\\ES3.g:1238:2: ({...}? block |{...}?func= functionDeclaration | statementTail )
			int alt58=3;
			try { DebugEnterDecision(58, false);
			try
			{
				alt58 = dfa58.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1238:4: {...}? block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1238, 4);
				if (!(( input.LA(1) == LBRACE )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == LBRACE ");
				}
				DebugLocation(1238, 31);
				PushFollow(Follow._block_in_statement6076);
				block87=block();
				PopFollow();

				adaptor.AddChild(root_0, block87.Tree);
				DebugLocation(1238, 37);
				 retval.value = (block87!=null?block87.value:default(BlockSyntax)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1239:4: {...}?func= functionDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1239, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1239, 37);
				PushFollow(Follow._functionDeclaration_in_statement6087);
				func=functionDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, func.Tree);
				DebugLocation(1239, 58);
				 retval.value = func.value; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1240:4: statementTail
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1240, 4);
				PushFollow(Follow._statementTail_in_statement6094);
				statementTail88=statementTail();
				PopFollow();

				adaptor.AddChild(root_0, statementTail88.Tree);
				DebugLocation(1240, 18);
				 retval.value = (statementTail88!=null?statementTail88.value:default(SyntaxNode)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 51);
			LeaveRule("statement", 51);
			LeaveRule_statement();
		}
		DebugLocation(1241, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	private sealed partial class statementTail_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statementTail_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_statementTail();
	partial void LeaveRule_statementTail();

	// $ANTLR start "statementTail"
	// ..\\ES3.g:1243:1: statementTail returns [SyntaxNode value] : ( variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement );
	[GrammarRule("statementTail")]
	private ES3Parser.statementTail_return statementTail()
	{
		EnterRule_statementTail();
		EnterRule("statementTail", 52);
		TraceIn("statementTail", 52);
		ES3Parser.statementTail_return retval = new ES3Parser.statementTail_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.variableStatement_return variableStatement89 = default(ES3Parser.variableStatement_return);
		ES3Parser.emptyStatement_return emptyStatement90 = default(ES3Parser.emptyStatement_return);
		ES3Parser.expressionStatement_return expressionStatement91 = default(ES3Parser.expressionStatement_return);
		ES3Parser.ifStatement_return ifStatement92 = default(ES3Parser.ifStatement_return);
		ES3Parser.iterationStatement_return iterationStatement93 = default(ES3Parser.iterationStatement_return);
		ES3Parser.continueStatement_return continueStatement94 = default(ES3Parser.continueStatement_return);
		ES3Parser.breakStatement_return breakStatement95 = default(ES3Parser.breakStatement_return);
		ES3Parser.returnStatement_return returnStatement96 = default(ES3Parser.returnStatement_return);
		ES3Parser.withStatement_return withStatement97 = default(ES3Parser.withStatement_return);
		ES3Parser.labelledStatement_return labelledStatement98 = default(ES3Parser.labelledStatement_return);
		ES3Parser.switchStatement_return switchStatement99 = default(ES3Parser.switchStatement_return);
		ES3Parser.throwStatement_return throwStatement100 = default(ES3Parser.throwStatement_return);
		ES3Parser.tryStatement_return tryStatement101 = default(ES3Parser.tryStatement_return);


		try { DebugEnterRule(GrammarFileName, "statementTail");
		DebugLocation(1243, 1);
		try
		{
			// ..\\ES3.g:1255:2: ( variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement )
			int alt59=13;
			try { DebugEnterDecision(59, false);
			try
			{
				alt59 = dfa59.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1255:4: variableStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1255, 4);
				PushFollow(Follow._variableStatement_in_statementTail6117);
				variableStatement89=variableStatement();
				PopFollow();

				adaptor.AddChild(root_0, variableStatement89.Tree);
				DebugLocation(1255, 22);
				 retval.value = (variableStatement89!=null?variableStatement89.value:default(SyntaxNode)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1256:4: emptyStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1256, 4);
				PushFollow(Follow._emptyStatement_in_statementTail6124);
				emptyStatement90=emptyStatement();
				PopFollow();

				adaptor.AddChild(root_0, emptyStatement90.Tree);
				DebugLocation(1256, 19);
				 retval.value = (emptyStatement90!=null?emptyStatement90.value:default(SyntaxNode)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1257:4: expressionStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1257, 4);
				PushFollow(Follow._expressionStatement_in_statementTail6131);
				expressionStatement91=expressionStatement();
				PopFollow();

				adaptor.AddChild(root_0, expressionStatement91.Tree);
				DebugLocation(1257, 24);
				 retval.value = (expressionStatement91!=null?expressionStatement91.value:default(SyntaxNode)); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1258:4: ifStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1258, 4);
				PushFollow(Follow._ifStatement_in_statementTail6138);
				ifStatement92=ifStatement();
				PopFollow();

				adaptor.AddChild(root_0, ifStatement92.Tree);
				DebugLocation(1258, 16);
				 retval.value = (ifStatement92!=null?ifStatement92.value:default(SyntaxNode)); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1259:4: iterationStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1259, 4);
				PushFollow(Follow._iterationStatement_in_statementTail6145);
				iterationStatement93=iterationStatement();
				PopFollow();

				adaptor.AddChild(root_0, iterationStatement93.Tree);
				DebugLocation(1259, 23);
				 retval.value = (iterationStatement93!=null?iterationStatement93.value:default(SyntaxNode)); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:1260:4: continueStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1260, 4);
				PushFollow(Follow._continueStatement_in_statementTail6152);
				continueStatement94=continueStatement();
				PopFollow();

				adaptor.AddChild(root_0, continueStatement94.Tree);
				DebugLocation(1260, 22);
				 retval.value = (continueStatement94!=null?continueStatement94.value:default(SyntaxNode)); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:1261:4: breakStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1261, 4);
				PushFollow(Follow._breakStatement_in_statementTail6159);
				breakStatement95=breakStatement();
				PopFollow();

				adaptor.AddChild(root_0, breakStatement95.Tree);
				DebugLocation(1261, 19);
				 retval.value = (breakStatement95!=null?breakStatement95.value:default(SyntaxNode)); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:1262:4: returnStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1262, 4);
				PushFollow(Follow._returnStatement_in_statementTail6166);
				returnStatement96=returnStatement();
				PopFollow();

				adaptor.AddChild(root_0, returnStatement96.Tree);
				DebugLocation(1262, 20);
				 retval.value = (returnStatement96!=null?returnStatement96.value:default(ReturnSyntax)); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:1263:4: withStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1263, 4);
				PushFollow(Follow._withStatement_in_statementTail6173);
				withStatement97=withStatement();
				PopFollow();

				adaptor.AddChild(root_0, withStatement97.Tree);
				DebugLocation(1263, 18);
				 retval.value = (withStatement97!=null?withStatement97.value:default(SyntaxNode)); 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ..\\ES3.g:1264:4: labelledStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1264, 4);
				PushFollow(Follow._labelledStatement_in_statementTail6180);
				labelledStatement98=labelledStatement();
				PopFollow();

				adaptor.AddChild(root_0, labelledStatement98.Tree);
				DebugLocation(1264, 22);
				 retval.value = (labelledStatement98!=null?labelledStatement98.value:default(SyntaxNode)); 

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// ..\\ES3.g:1265:4: switchStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1265, 4);
				PushFollow(Follow._switchStatement_in_statementTail6187);
				switchStatement99=switchStatement();
				PopFollow();

				adaptor.AddChild(root_0, switchStatement99.Tree);
				DebugLocation(1265, 20);
				 retval.value = (switchStatement99!=null?switchStatement99.value:default(SyntaxNode)); 

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// ..\\ES3.g:1266:4: throwStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1266, 4);
				PushFollow(Follow._throwStatement_in_statementTail6194);
				throwStatement100=throwStatement();
				PopFollow();

				adaptor.AddChild(root_0, throwStatement100.Tree);
				DebugLocation(1266, 19);
				 retval.value = (throwStatement100!=null?throwStatement100.value:default(SyntaxNode)); 

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// ..\\ES3.g:1267:4: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1267, 4);
				PushFollow(Follow._tryStatement_in_statementTail6201);
				tryStatement101=tryStatement();
				PopFollow();

				adaptor.AddChild(root_0, tryStatement101.Tree);
				DebugLocation(1267, 17);
				 retval.value = (tryStatement101!=null?tryStatement101.value:default(TrySyntax)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			        if (!(retval.value is ForSyntax ||
			            retval.value is BlockSyntax ||
			            retval.value is WhileSyntax ||
			            retval.value is DoWhileSyntax ||
			            retval.value is SwitchSyntax ||
			            retval.value is TrySyntax ||
			            retval.value is IfSyntax)) {
			            retval.value.Source = ExtractSourceCode((CommonToken)retval.Start, (CommonToken)retval.Stop);
			        }

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementTail", 52);
			LeaveRule("statementTail", 52);
			LeaveRule_statementTail();
		}
		DebugLocation(1268, 1);
		} finally { DebugExitRule(GrammarFileName, "statementTail"); }
		return retval;

	}
	// $ANTLR end "statementTail"

	private sealed partial class block_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public BlockSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public block_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// ..\\ES3.g:1272:1: block returns [BlockSyntax value] : lb= LBRACE ( statement )* RBRACE ;
	[GrammarRule("block")]
	private ES3Parser.block_return block()
	{
		EnterRule_block();
		EnterRule("block", 53);
		TraceIn("block", 53);
		ES3Parser.block_return retval = new ES3Parser.block_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken RBRACE103 = default(IToken);
		ES3Parser.statement_return statement102 = default(ES3Parser.statement_return);

		object lb_tree = default(object);
		object RBRACE103_tree = default(object);


		    var statements = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(1272, 1);
		try
		{
			// ..\\ES3.g:1282:2: (lb= LBRACE ( statement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1283:9: lb= LBRACE ( statement )* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1283, 11);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_block6240); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(1284, 9);
			// ..\\ES3.g:1284:9: ( statement )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==ADD||LA60_0==BREAK||LA60_0==CONTINUE||LA60_0==DEC||LA60_0==DELETE||LA60_0==DO||LA60_0==DecimalLiteral||LA60_0==FALSE||LA60_0==FOR||LA60_0==FUNCTION||(LA60_0>=HexIntegerLiteral && LA60_0<=IF)||LA60_0==INC||LA60_0==INV||LA60_0==Identifier||(LA60_0>=LBRACE && LA60_0<=LBRACK)||LA60_0==LPAREN||(LA60_0>=NEW && LA60_0<=NOT)||LA60_0==NULL||LA60_0==OctalIntegerLiteral||LA60_0==RETURN||LA60_0==RegularExpressionLiteral||LA60_0==SEMIC||LA60_0==SUB||LA60_0==SWITCH||LA60_0==StringLiteral||(LA60_0>=THIS && LA60_0<=THROW)||(LA60_0>=TRUE && LA60_0<=TYPEOF)||(LA60_0>=VAR && LA60_0<=VOID)||(LA60_0>=WHILE && LA60_0<=WITH)))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1285:13: statement
					{
					DebugLocation(1285, 13);
					PushFollow(Follow._statement_in_block6264);
					statement102=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement102.Tree);
					DebugLocation(1286, 13);
					 statements.Add((statement102!=null?statement102.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(1288, 9);
			RBRACE103=(IToken)Match(input,RBRACE,Follow._RBRACE_in_block6299); 
			RBRACE103_tree = (object)adaptor.Create(RBRACE103);
			adaptor.AddChild(root_0, RBRACE103_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value = new BlockSyntax(statements)
			    {
			        Source = ExtractSourceCode((CommonToken)retval.Start, (CommonToken)retval.Stop)
			    };

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 53);
			LeaveRule("block", 53);
			LeaveRule_block();
		}
		DebugLocation(1289, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	private sealed partial class blockStatements_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public BlockSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public blockStatements_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_blockStatements();
	partial void LeaveRule_blockStatements();

	// $ANTLR start "blockStatements"
	// ..\\ES3.g:1293:1: blockStatements returns [BlockSyntax value] : ( statement )* ;
	[GrammarRule("blockStatements")]
	private ES3Parser.blockStatements_return blockStatements()
	{
		EnterRule_blockStatements();
		EnterRule("blockStatements", 54);
		TraceIn("blockStatements", 54);
		ES3Parser.blockStatements_return retval = new ES3Parser.blockStatements_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.statement_return statement104 = default(ES3Parser.statement_return);



		    var tempBody = _currentBody;
		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "blockStatements");
		DebugLocation(1293, 1);
		try
		{
			// ..\\ES3.g:1303:2: ( ( statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1304:9: ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1304, 9);
			// ..\\ES3.g:1304:9: ( statement )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==ADD||LA61_0==BREAK||LA61_0==CONTINUE||LA61_0==DEC||LA61_0==DELETE||LA61_0==DO||LA61_0==DecimalLiteral||LA61_0==FALSE||LA61_0==FOR||LA61_0==FUNCTION||(LA61_0>=HexIntegerLiteral && LA61_0<=IF)||LA61_0==INC||LA61_0==INV||LA61_0==Identifier||(LA61_0>=LBRACE && LA61_0<=LBRACK)||LA61_0==LPAREN||(LA61_0>=NEW && LA61_0<=NOT)||LA61_0==NULL||LA61_0==OctalIntegerLiteral||LA61_0==RETURN||LA61_0==RegularExpressionLiteral||LA61_0==SEMIC||LA61_0==SUB||LA61_0==SWITCH||LA61_0==StringLiteral||(LA61_0>=THIS && LA61_0<=THROW)||(LA61_0>=TRUE && LA61_0<=TYPEOF)||(LA61_0>=VAR && LA61_0<=VOID)||(LA61_0>=WHILE && LA61_0<=WITH)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1305:13: statement
					{
					DebugLocation(1305, 13);
					PushFollow(Follow._statement_in_blockStatements6346);
					statement104=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement104.Tree);
					DebugLocation(1306, 13);
					 _currentBody.Statements.Add((statement104!=null?statement104.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value = _currentBody.CreateBlock();
				retval.value.Source = ExtractSourceCode((CommonToken)retval.Start, (CommonToken)retval.Stop);
			    _currentBody = tempBody;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatements", 54);
			LeaveRule("blockStatements", 54);
			LeaveRule_blockStatements();
		}
		DebugLocation(1308, 1);
		} finally { DebugExitRule(GrammarFileName, "blockStatements"); }
		return retval;

	}
	// $ANTLR end "blockStatements"

	private sealed partial class variableStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_variableStatement();
	partial void LeaveRule_variableStatement();

	// $ANTLR start "variableStatement"
	// ..\\ES3.g:1315:1: variableStatement returns [SyntaxNode value] : VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic ;
	[GrammarRule("variableStatement")]
	private ES3Parser.variableStatement_return variableStatement()
	{
		EnterRule_variableStatement();
		EnterRule("variableStatement", 55);
		TraceIn("variableStatement", 55);
		ES3Parser.variableStatement_return retval = new ES3Parser.variableStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken VAR105 = default(IToken);
		IToken COMMA106 = default(IToken);
		ES3Parser.variableDeclaration_return first = default(ES3Parser.variableDeclaration_return);
		ES3Parser.variableDeclaration_return follow = default(ES3Parser.variableDeclaration_return);
		ES3Parser.semic_return semic107 = default(ES3Parser.semic_return);

		object VAR105_tree = default(object);
		object COMMA106_tree = default(object);


		    List<SyntaxNode> statements = null;

		try { DebugEnterRule(GrammarFileName, "variableStatement");
		DebugLocation(1315, 1);
		try
		{
			// ..\\ES3.g:1323:2: ( VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1324:9: VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1324, 9);
			VAR105=(IToken)Match(input,VAR,Follow._VAR_in_variableStatement6410); 
			VAR105_tree = (object)adaptor.Create(VAR105);
			adaptor.AddChild(root_0, VAR105_tree);

			DebugLocation(1324, 18);
			PushFollow(Follow._variableDeclaration_in_variableStatement6414);
			first=variableDeclaration();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1325, 9);

			            retval.value = new VariableDeclarationSyntax(
			                (first!=null?first.value:default(VariableDeclarationSyntax)).Identifier,
			                (first!=null?first.value:default(VariableDeclarationSyntax)).Expression,
			                false
			            )
			            {
			                Target = _currentBody.DeclaredVariables.AddOrGet((first!=null?first.value:default(VariableDeclarationSyntax)).Identifier)
			            };
			        
			DebugLocation(1335, 9);
			// ..\\ES3.g:1335:9: ( COMMA follow= variableDeclaration )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==COMMA))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1336:13: COMMA follow= variableDeclaration
					{
					DebugLocation(1336, 13);
					COMMA106=(IToken)Match(input,COMMA,Follow._COMMA_in_variableStatement6448); 
					COMMA106_tree = (object)adaptor.Create(COMMA106);
					adaptor.AddChild(root_0, COMMA106_tree);

					DebugLocation(1336, 25);
					PushFollow(Follow._variableDeclaration_in_variableStatement6452);
					follow=variableDeclaration();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1337, 13);

					                if (statements == null)
					                    statements = new List<SyntaxNode> { retval.value };

					                statements.Add(
					                    new VariableDeclarationSyntax(
					                        (follow!=null?follow.value:default(VariableDeclarationSyntax)).Identifier,
					                        (follow!=null?follow.value:default(VariableDeclarationSyntax)).Expression,
					                        false
					                    )
					                    {
					                        Target = _currentBody.DeclaredVariables.AddOrGet((follow!=null?follow.value:default(VariableDeclarationSyntax)).Identifier)
					                    }
					                );
					            

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }

			DebugLocation(1353, 9);
			PushFollow(Follow._semic_in_variableStatement6487);
			semic107=semic();
			PopFollow();

			adaptor.AddChild(root_0, semic107.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    if (statements != null)
			        retval.value = new CommaOperatorSyntax(statements);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableStatement", 55);
			LeaveRule("variableStatement", 55);
			LeaveRule_variableStatement();
		}
		DebugLocation(1354, 1);
		} finally { DebugExitRule(GrammarFileName, "variableStatement"); }
		return retval;

	}
	// $ANTLR end "variableStatement"

	private sealed partial class variableDeclaration_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public VariableDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclaration_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\ES3.g:1356:1: variableDeclaration returns [VariableDeclarationSyntax value] : id= Identifier ( ASSIGN ass= assignmentExpression )? ;
	[GrammarRule("variableDeclaration")]
	private ES3Parser.variableDeclaration_return variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 56);
		TraceIn("variableDeclaration", 56);
		ES3Parser.variableDeclaration_return retval = new ES3Parser.variableDeclaration_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken ASSIGN108 = default(IToken);
		ES3Parser.assignmentExpression_return ass = default(ES3Parser.assignmentExpression_return);

		object id_tree = default(object);
		object ASSIGN108_tree = default(object);


		    ExpressionSyntax expression = null;

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(1356, 1);
		try
		{
			// ..\\ES3.g:1360:2: (id= Identifier ( ASSIGN ass= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1361:9: id= Identifier ( ASSIGN ass= assignmentExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1361, 11);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclaration6517); 
			id_tree = (object)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(1362, 9);
			// ..\\ES3.g:1362:9: ( ASSIGN ass= assignmentExpression )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==ASSIGN))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1363:13: ASSIGN ass= assignmentExpression
				{
				DebugLocation(1363, 19);
				ASSIGN108=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclaration6541); 
				ASSIGN108_tree = (object)adaptor.Create(ASSIGN108);
				root_0 = (object)adaptor.BecomeRoot(ASSIGN108_tree, root_0);

				DebugLocation(1363, 24);
				PushFollow(Follow._assignmentExpression_in_variableDeclaration6546);
				ass=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, ass.Tree);
				DebugLocation(1364, 13);
				 expression = (ass!=null?ass.value:default(ExpressionSyntax)); 

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(1366, 9);
			 retval.value = new VariableDeclarationSyntax(id.Text, expression, true); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaration", 56);
			LeaveRule("variableDeclaration", 56);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(1367, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return retval;

	}
	// $ANTLR end "variableDeclaration"

	private sealed partial class variableDeclarationNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public VariableDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclarationNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_variableDeclarationNoIn();
	partial void LeaveRule_variableDeclarationNoIn();

	// $ANTLR start "variableDeclarationNoIn"
	// ..\\ES3.g:1369:1: variableDeclarationNoIn returns [VariableDeclarationSyntax value] : id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? ;
	[GrammarRule("variableDeclarationNoIn")]
	private ES3Parser.variableDeclarationNoIn_return variableDeclarationNoIn()
	{
		EnterRule_variableDeclarationNoIn();
		EnterRule("variableDeclarationNoIn", 57);
		TraceIn("variableDeclarationNoIn", 57);
		ES3Parser.variableDeclarationNoIn_return retval = new ES3Parser.variableDeclarationNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken ASSIGN109 = default(IToken);
		ES3Parser.assignmentExpressionNoIn_return ass = default(ES3Parser.assignmentExpressionNoIn_return);

		object id_tree = default(object);
		object ASSIGN109_tree = default(object);


			ExpressionSyntax expression = null;

		try { DebugEnterRule(GrammarFileName, "variableDeclarationNoIn");
		DebugLocation(1369, 1);
		try
		{
			// ..\\ES3.g:1373:2: (id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1374:9: id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1374, 11);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn6612); 
			id_tree = (object)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(1375, 9);
			// ..\\ES3.g:1375:9: ( ASSIGN ass= assignmentExpressionNoIn )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==ASSIGN))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1376:13: ASSIGN ass= assignmentExpressionNoIn
				{
				DebugLocation(1376, 19);
				ASSIGN109=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclarationNoIn6636); 
				ASSIGN109_tree = (object)adaptor.Create(ASSIGN109);
				root_0 = (object)adaptor.BecomeRoot(ASSIGN109_tree, root_0);

				DebugLocation(1376, 24);
				PushFollow(Follow._assignmentExpressionNoIn_in_variableDeclarationNoIn6641);
				ass=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, ass.Tree);
				DebugLocation(1377, 13);
				 expression = (ass!=null?ass.value:default(ExpressionSyntax)); 

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(1379, 9);
			 retval.value = new VariableDeclarationSyntax(id.Text, expression, true); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationNoIn", 57);
			LeaveRule("variableDeclarationNoIn", 57);
			LeaveRule_variableDeclarationNoIn();
		}
		DebugLocation(1380, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationNoIn"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationNoIn"

	private sealed partial class emptyStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public emptyStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();

	// $ANTLR start "emptyStatement"
	// ..\\ES3.g:1386:1: emptyStatement returns [SyntaxNode value] : SEMIC ;
	[GrammarRule("emptyStatement")]
	private ES3Parser.emptyStatement_return emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 58);
		TraceIn("emptyStatement", 58);
		ES3Parser.emptyStatement_return retval = new ES3Parser.emptyStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SEMIC110 = default(IToken);

		object SEMIC110_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(1386, 1);
		try
		{
			// ..\\ES3.g:1387:2: ( SEMIC )
			DebugEnterAlt(1);
			// ..\\ES3.g:1387:4: SEMIC
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1387, 9);
			SEMIC110=(IToken)Match(input,SEMIC,Follow._SEMIC_in_emptyStatement6696); 
			DebugLocation(1387, 11);
			 retval.value = new EmptySyntax(); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("emptyStatement", 58);
			LeaveRule("emptyStatement", 58);
			LeaveRule_emptyStatement();
		}
		DebugLocation(1388, 1);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return retval;

	}
	// $ANTLR end "emptyStatement"

	private sealed partial class expressionStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expressionStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();

	// $ANTLR start "expressionStatement"
	// ..\\ES3.g:1400:1: expressionStatement returns [SyntaxNode value] : expression semic ;
	[GrammarRule("expressionStatement")]
	private ES3Parser.expressionStatement_return expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 59);
		TraceIn("expressionStatement", 59);
		ES3Parser.expressionStatement_return retval = new ES3Parser.expressionStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.expression_return expression111 = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic112 = default(ES3Parser.semic_return);


		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(1400, 1);
		try
		{
			// ..\\ES3.g:1401:2: ( expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1401:4: expression semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1401, 4);
			PushFollow(Follow._expression_in_expressionStatement6721);
			expression111=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression111.Tree);
			DebugLocation(1401, 20);
			PushFollow(Follow._semic_in_expressionStatement6723);
			semic112=semic();
			PopFollow();

			DebugLocation(1401, 22);
			 retval.value = new ExpressionStatementSyntax((expression111!=null?expression111.value:default(ExpressionSyntax))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionStatement", 59);
			LeaveRule("expressionStatement", 59);
			LeaveRule_expressionStatement();
		}
		DebugLocation(1402, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return retval;

	}
	// $ANTLR end "expressionStatement"

	private sealed partial class ifStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ifStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();

	// $ANTLR start "ifStatement"
	// ..\\ES3.g:1408:1: ifStatement returns [SyntaxNode value] : IF LPAREN expression RPAREN then= statement ({...}? ELSE els= statement )? ;
	[GrammarRule("ifStatement")]
	private ES3Parser.ifStatement_return ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 60);
		TraceIn("ifStatement", 60);
		ES3Parser.ifStatement_return retval = new ES3Parser.ifStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IF113 = default(IToken);
		IToken LPAREN114 = default(IToken);
		IToken RPAREN116 = default(IToken);
		IToken ELSE117 = default(IToken);
		ES3Parser.statement_return then = default(ES3Parser.statement_return);
		ES3Parser.statement_return els = default(ES3Parser.statement_return);
		ES3Parser.expression_return expression115 = default(ES3Parser.expression_return);

		object IF113_tree = default(object);
		object LPAREN114_tree = default(object);
		object RPAREN116_tree = default(object);
		object ELSE117_tree = default(object);


		    SyntaxNode elseStatement = null;

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(1408, 1);
		try
		{
			// ..\\ES3.g:1413:2: ( IF LPAREN expression RPAREN then= statement ({...}? ELSE els= statement )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1414:9: IF LPAREN expression RPAREN then= statement ({...}? ELSE els= statement )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1414, 9);
			IF113=(IToken)Match(input,IF,Follow._IF_in_ifStatement6760); 
			IF113_tree = (object)adaptor.Create(IF113);
			adaptor.AddChild(root_0, IF113_tree);

			DebugLocation(1414, 12);
			LPAREN114=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifStatement6762); 
			LPAREN114_tree = (object)adaptor.Create(LPAREN114);
			adaptor.AddChild(root_0, LPAREN114_tree);

			DebugLocation(1414, 19);
			PushFollow(Follow._expression_in_ifStatement6764);
			expression115=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression115.Tree);
			DebugLocation(1414, 30);
			RPAREN116=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifStatement6766); 
			RPAREN116_tree = (object)adaptor.Create(RPAREN116);
			adaptor.AddChild(root_0, RPAREN116_tree);

			DebugLocation(1414, 41);
			PushFollow(Follow._statement_in_ifStatement6770);
			then=statement();
			PopFollow();

			adaptor.AddChild(root_0, then.Tree);
			DebugLocation(1415, 9);
			// ..\\ES3.g:1415:9: ({...}? ELSE els= statement )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==ELSE))
			{
				int LA65_1 = input.LA(2);

				if ((( input.LA(1) == ELSE )))
				{
					alt65 = 1;
				}
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1416:13: {...}? ELSE els= statement
				{
				DebugLocation(1416, 13);
				if (!(( input.LA(1) == ELSE )))
				{
					throw new FailedPredicateException(input, "ifStatement", " input.LA(1) == ELSE ");
				}
				DebugLocation(1417, 13);
				ELSE117=(IToken)Match(input,ELSE,Follow._ELSE_in_ifStatement6808); 
				ELSE117_tree = (object)adaptor.Create(ELSE117);
				adaptor.AddChild(root_0, ELSE117_tree);

				DebugLocation(1417, 21);
				PushFollow(Follow._statement_in_ifStatement6812);
				els=statement();
				PopFollow();

				adaptor.AddChild(root_0, els.Tree);
				DebugLocation(1418, 13);
				 elseStatement = (els!=null?els.value:default(SyntaxNode)); 

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(1420, 9);
			 retval.value = new IfSyntax((expression115!=null?expression115.value:default(ExpressionSyntax)), (then!=null?then.value:default(SyntaxNode)), elseStatement); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifStatement", 60);
			LeaveRule("ifStatement", 60);
			LeaveRule_ifStatement();
		}
		DebugLocation(1421, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"

	private sealed partial class iterationStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public iterationStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_iterationStatement();
	partial void LeaveRule_iterationStatement();

	// $ANTLR start "iterationStatement"
	// ..\\ES3.g:1427:1: iterationStatement returns [SyntaxNode value] : (dos= doStatement |wh= whileStatement |fo= forStatement );
	[GrammarRule("iterationStatement")]
	private ES3Parser.iterationStatement_return iterationStatement()
	{
		EnterRule_iterationStatement();
		EnterRule("iterationStatement", 61);
		TraceIn("iterationStatement", 61);
		ES3Parser.iterationStatement_return retval = new ES3Parser.iterationStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.doStatement_return dos = default(ES3Parser.doStatement_return);
		ES3Parser.whileStatement_return wh = default(ES3Parser.whileStatement_return);
		ES3Parser.forStatement_return fo = default(ES3Parser.forStatement_return);


		try { DebugEnterRule(GrammarFileName, "iterationStatement");
		DebugLocation(1427, 1);
		try
		{
			// ..\\ES3.g:1428:2: (dos= doStatement |wh= whileStatement |fo= forStatement )
			int alt66=3;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case DO:
				{
				alt66 = 1;
				}
				break;
			case WHILE:
				{
				alt66 = 2;
				}
				break;
			case FOR:
				{
				alt66 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1428:4: dos= doStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1428, 7);
				PushFollow(Follow._doStatement_in_iterationStatement6869);
				dos=doStatement();
				PopFollow();

				adaptor.AddChild(root_0, dos.Tree);
				DebugLocation(1428, 20);
				 retval.value = dos.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1429:4: wh= whileStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1429, 6);
				PushFollow(Follow._whileStatement_in_iterationStatement6878);
				wh=whileStatement();
				PopFollow();

				adaptor.AddChild(root_0, wh.Tree);
				DebugLocation(1429, 23);
				 retval.value = wh.value; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1430:4: fo= forStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1430, 6);
				PushFollow(Follow._forStatement_in_iterationStatement6888);
				fo=forStatement();
				PopFollow();

				adaptor.AddChild(root_0, fo.Tree);
				DebugLocation(1430, 21);
				 retval.value = fo.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iterationStatement", 61);
			LeaveRule("iterationStatement", 61);
			LeaveRule_iterationStatement();
		}
		DebugLocation(1431, 1);
		} finally { DebugExitRule(GrammarFileName, "iterationStatement"); }
		return retval;

	}
	// $ANTLR end "iterationStatement"

	private sealed partial class doStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public doStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_doStatement();
	partial void LeaveRule_doStatement();

	// $ANTLR start "doStatement"
	// ..\\ES3.g:1433:1: doStatement returns [SyntaxNode value] : DO statement WHILE LPAREN expression RPAREN semic ;
	[GrammarRule("doStatement")]
	private ES3Parser.doStatement_return doStatement()
	{
		EnterRule_doStatement();
		EnterRule("doStatement", 62);
		TraceIn("doStatement", 62);
		ES3Parser.doStatement_return retval = new ES3Parser.doStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DO118 = default(IToken);
		IToken WHILE120 = default(IToken);
		IToken LPAREN121 = default(IToken);
		IToken RPAREN123 = default(IToken);
		ES3Parser.statement_return statement119 = default(ES3Parser.statement_return);
		ES3Parser.expression_return expression122 = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic124 = default(ES3Parser.semic_return);

		object DO118_tree = default(object);
		object WHILE120_tree = default(object);
		object LPAREN121_tree = default(object);
		object RPAREN123_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "doStatement");
		DebugLocation(1433, 1);
		try
		{
			// ..\\ES3.g:1434:2: ( DO statement WHILE LPAREN expression RPAREN semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1434:4: DO statement WHILE LPAREN expression RPAREN semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1434, 4);
			DO118=(IToken)Match(input,DO,Follow._DO_in_doStatement6907); 
			DO118_tree = (object)adaptor.Create(DO118);
			adaptor.AddChild(root_0, DO118_tree);

			DebugLocation(1434, 7);
			PushFollow(Follow._statement_in_doStatement6909);
			statement119=statement();
			PopFollow();

			adaptor.AddChild(root_0, statement119.Tree);
			DebugLocation(1434, 17);
			WHILE120=(IToken)Match(input,WHILE,Follow._WHILE_in_doStatement6911); 
			WHILE120_tree = (object)adaptor.Create(WHILE120);
			adaptor.AddChild(root_0, WHILE120_tree);

			DebugLocation(1434, 23);
			LPAREN121=(IToken)Match(input,LPAREN,Follow._LPAREN_in_doStatement6913); 
			LPAREN121_tree = (object)adaptor.Create(LPAREN121);
			adaptor.AddChild(root_0, LPAREN121_tree);

			DebugLocation(1434, 30);
			PushFollow(Follow._expression_in_doStatement6915);
			expression122=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression122.Tree);
			DebugLocation(1434, 41);
			RPAREN123=(IToken)Match(input,RPAREN,Follow._RPAREN_in_doStatement6917); 
			RPAREN123_tree = (object)adaptor.Create(RPAREN123);
			adaptor.AddChild(root_0, RPAREN123_tree);

			DebugLocation(1434, 48);
			PushFollow(Follow._semic_in_doStatement6919);
			semic124=semic();
			PopFollow();

			adaptor.AddChild(root_0, semic124.Tree);
			DebugLocation(1434, 54);
			 retval.value = new DoWhileSyntax((expression122!=null?expression122.value:default(ExpressionSyntax)), (statement119!=null?statement119.value:default(SyntaxNode))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("doStatement", 62);
			LeaveRule("doStatement", 62);
			LeaveRule_doStatement();
		}
		DebugLocation(1436, 1);
		} finally { DebugExitRule(GrammarFileName, "doStatement"); }
		return retval;

	}
	// $ANTLR end "doStatement"

	private sealed partial class whileStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public whileStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// ..\\ES3.g:1438:1: whileStatement returns [SyntaxNode value] : WHILE LPAREN expression RPAREN statement ;
	[GrammarRule("whileStatement")]
	private ES3Parser.whileStatement_return whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 63);
		TraceIn("whileStatement", 63);
		ES3Parser.whileStatement_return retval = new ES3Parser.whileStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WHILE125 = default(IToken);
		IToken LPAREN126 = default(IToken);
		IToken RPAREN128 = default(IToken);
		ES3Parser.expression_return expression127 = default(ES3Parser.expression_return);
		ES3Parser.statement_return statement129 = default(ES3Parser.statement_return);

		object WHILE125_tree = default(object);
		object LPAREN126_tree = default(object);
		object RPAREN128_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(1438, 1);
		try
		{
			// ..\\ES3.g:1439:2: ( WHILE LPAREN expression RPAREN statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1439:4: WHILE LPAREN expression RPAREN statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1439, 9);
			WHILE125=(IToken)Match(input,WHILE,Follow._WHILE_in_whileStatement6939); 
			WHILE125_tree = (object)adaptor.Create(WHILE125);
			root_0 = (object)adaptor.BecomeRoot(WHILE125_tree, root_0);

			DebugLocation(1439, 17);
			LPAREN126=(IToken)Match(input,LPAREN,Follow._LPAREN_in_whileStatement6942); 
			DebugLocation(1439, 19);
			PushFollow(Follow._expression_in_whileStatement6945);
			expression127=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression127.Tree);
			DebugLocation(1439, 36);
			RPAREN128=(IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement6947); 
			DebugLocation(1439, 38);
			PushFollow(Follow._statement_in_whileStatement6950);
			statement129=statement();
			PopFollow();

			adaptor.AddChild(root_0, statement129.Tree);
			DebugLocation(1439, 48);
			 retval.value = new WhileSyntax((expression127!=null?expression127.value:default(ExpressionSyntax)), (statement129!=null?statement129.value:default(SyntaxNode))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 63);
			LeaveRule("whileStatement", 63);
			LeaveRule_whileStatement();
		}
		DebugLocation(1440, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	private sealed partial class forStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// ..\\ES3.g:1484:1: forStatement returns [SyntaxNode value] : FOR LPAREN fo= forControl RPAREN st= statement ;
	[GrammarRule("forStatement")]
	private ES3Parser.forStatement_return forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 64);
		TraceIn("forStatement", 64);
		ES3Parser.forStatement_return retval = new ES3Parser.forStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FOR130 = default(IToken);
		IToken LPAREN131 = default(IToken);
		IToken RPAREN132 = default(IToken);
		ES3Parser.forControl_return fo = default(ES3Parser.forControl_return);
		ES3Parser.statement_return st = default(ES3Parser.statement_return);

		object FOR130_tree = default(object);
		object LPAREN131_tree = default(object);
		object RPAREN132_tree = default(object);


		    ForBuilder builder;

		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(1484, 1);
		try
		{
			// ..\\ES3.g:1491:2: ( FOR LPAREN fo= forControl RPAREN st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1492:9: FOR LPAREN fo= forControl RPAREN st= statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1492, 12);
			FOR130=(IToken)Match(input,FOR,Follow._FOR_in_forStatement6987); 
			FOR130_tree = (object)adaptor.Create(FOR130);
			root_0 = (object)adaptor.BecomeRoot(FOR130_tree, root_0);

			DebugLocation(1493, 15);
			LPAREN131=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement6998); 
			DebugLocation(1494, 11);
			PushFollow(Follow._forControl_in_forStatement7011);
			fo=forControl();
			PopFollow();

			adaptor.AddChild(root_0, fo.Tree);
			DebugLocation(1495, 9);
			 builder = (fo!=null?fo.value:default(ForBuilder)); 
			DebugLocation(1496, 15);
			RPAREN132=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement7031); 
			DebugLocation(1496, 19);
			PushFollow(Follow._statement_in_forStatement7036);
			st=statement();
			PopFollow();

			adaptor.AddChild(root_0, st.Tree);
			DebugLocation(1497, 9);
			 builder.Body = (st!=null?st.value:default(SyntaxNode)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value = builder.CreateFor();

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 64);
			LeaveRule("forStatement", 64);
			LeaveRule_forStatement();
		}
		DebugLocation(1498, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	private sealed partial class forControl_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ForBuilder value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControl_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControl();
	partial void LeaveRule_forControl();

	// $ANTLR start "forControl"
	// ..\\ES3.g:1500:1: forControl returns [ForBuilder value] : (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic );
	[GrammarRule("forControl")]
	private ES3Parser.forControl_return forControl()
	{
		EnterRule_forControl();
		EnterRule("forControl", 65);
		TraceIn("forControl", 65);
		ES3Parser.forControl_return retval = new ES3Parser.forControl_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.forControlVar_return ex1 = default(ES3Parser.forControlVar_return);
		ES3Parser.forControlExpression_return ex2 = default(ES3Parser.forControlExpression_return);
		ES3Parser.forControlSemic_return ex3 = default(ES3Parser.forControlSemic_return);


		try { DebugEnterRule(GrammarFileName, "forControl");
		DebugLocation(1500, 1);
		try
		{
			// ..\\ES3.g:1501:2: (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt67 = 1;
				}
				break;
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt67 = 2;
				}
				break;
			case SEMIC:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1502:9: ex1= forControlVar
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1502, 12);
				PushFollow(Follow._forControlVar_in_forControl7071);
				ex1=forControlVar();
				PopFollow();

				adaptor.AddChild(root_0, ex1.Tree);
				DebugLocation(1503, 9);
				 retval.value = (ex1!=null?ex1.value:default(ForBuilder)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1505:9: ex2= forControlExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1505, 12);
				PushFollow(Follow._forControlExpression_in_forControl7096);
				ex2=forControlExpression();
				PopFollow();

				adaptor.AddChild(root_0, ex2.Tree);
				DebugLocation(1506, 9);
				 retval.value = (ex2!=null?ex2.value:default(ForBuilder)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1508:9: ex3= forControlSemic
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1508, 12);
				PushFollow(Follow._forControlSemic_in_forControl7121);
				ex3=forControlSemic();
				PopFollow();

				adaptor.AddChild(root_0, ex3.Tree);
				DebugLocation(1509, 9);
				 retval.value = (ex3!=null?ex3.value:default(ForBuilder)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControl", 65);
			LeaveRule("forControl", 65);
			LeaveRule_forControl();
		}
		DebugLocation(1510, 1);
		} finally { DebugExitRule(GrammarFileName, "forControl"); }
		return retval;

	}
	// $ANTLR end "forControl"

	private sealed partial class forControlVar_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ForBuilder value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControlVar_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControlVar();
	partial void LeaveRule_forControlVar();

	// $ANTLR start "forControlVar"
	// ..\\ES3.g:1512:1: forControlVar returns [ForBuilder value] : VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) ;
	[GrammarRule("forControlVar")]
	private ES3Parser.forControlVar_return forControlVar()
	{
		EnterRule_forControlVar();
		EnterRule("forControlVar", 66);
		TraceIn("forControlVar", 66);
		ES3Parser.forControlVar_return retval = new ES3Parser.forControlVar_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken VAR133 = default(IToken);
		IToken IN134 = default(IToken);
		IToken COMMA135 = default(IToken);
		IToken SEMIC136 = default(IToken);
		IToken SEMIC137 = default(IToken);
		ES3Parser.variableDeclarationNoIn_return first = default(ES3Parser.variableDeclarationNoIn_return);
		ES3Parser.expression_return ex = default(ES3Parser.expression_return);
		ES3Parser.variableDeclarationNoIn_return follow = default(ES3Parser.variableDeclarationNoIn_return);
		ES3Parser.expression_return ex1 = default(ES3Parser.expression_return);
		ES3Parser.expression_return ex2 = default(ES3Parser.expression_return);

		object VAR133_tree = default(object);
		object IN134_tree = default(object);
		object COMMA135_tree = default(object);
		object SEMIC136_tree = default(object);
		object SEMIC137_tree = default(object);


		    retval.value = new ForBuilder();
		    List<SyntaxNode> statements = null;

		try { DebugEnterRule(GrammarFileName, "forControlVar");
		DebugLocation(1512, 1);
		try
		{
			// ..\\ES3.g:1522:2: ( VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1523:9: VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1523, 9);
			VAR133=(IToken)Match(input,VAR,Follow._VAR_in_forControlVar7165); 
			VAR133_tree = (object)adaptor.Create(VAR133);
			adaptor.AddChild(root_0, VAR133_tree);

			DebugLocation(1523, 18);
			PushFollow(Follow._variableDeclarationNoIn_in_forControlVar7169);
			first=variableDeclarationNoIn();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1524, 9);

			            retval.value.Initialization = new VariableDeclarationSyntax(
			                (first!=null?first.value:default(VariableDeclarationSyntax)).Identifier,
			                (first!=null?first.value:default(VariableDeclarationSyntax)).Expression,
			                false
			            )
			            {
			                Target = _currentBody.DeclaredVariables.AddOrGet((first!=null?first.value:default(VariableDeclarationSyntax)).Identifier)
			            };
			        
			DebugLocation(1534, 6);
			// ..\\ES3.g:1534:6: ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==IN))
			{
				alt71 = 1;
			}
			else if ((LA71_0==COMMA||LA71_0==SEMIC))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1535:7: ( IN ex= expression )
				{
				DebugLocation(1535, 7);
				// ..\\ES3.g:1535:7: ( IN ex= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1536:8: IN ex= expression
				{
				DebugLocation(1536, 8);
				IN134=(IToken)Match(input,IN,Follow._IN_in_forControlVar7203); 
				IN134_tree = (object)adaptor.Create(IN134);
				adaptor.AddChild(root_0, IN134_tree);

				DebugLocation(1536, 13);
				PushFollow(Follow._expression_in_forControlVar7207);
				ex=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex.Tree);
				DebugLocation(1537, 17);
				 retval.value.Expression = (ex!=null?ex.value:default(ExpressionSyntax)); 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1540:7: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				{
				DebugLocation(1540, 7);
				// ..\\ES3.g:1540:7: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1541:8: ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )?
				{
				DebugLocation(1541, 8);
				// ..\\ES3.g:1541:8: ( COMMA follow= variableDeclarationNoIn )*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==COMMA))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1542:21: COMMA follow= variableDeclarationNoIn
						{
						DebugLocation(1542, 21);
						COMMA135=(IToken)Match(input,COMMA,Follow._COMMA_in_forControlVar7280); 
						COMMA135_tree = (object)adaptor.Create(COMMA135);
						adaptor.AddChild(root_0, COMMA135_tree);

						DebugLocation(1542, 33);
						PushFollow(Follow._variableDeclarationNoIn_in_forControlVar7284);
						follow=variableDeclarationNoIn();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(1543, 21);

						                        if (statements == null)
						                            statements = new List<SyntaxNode> { retval.value.Initialization };
						                        
						                        statements.Add(
						                            new VariableDeclarationSyntax(
						                                (follow!=null?follow.value:default(VariableDeclarationSyntax)).Identifier,
						                                (follow!=null?follow.value:default(VariableDeclarationSyntax)).Expression,
						                                false
						                            )
						                            {
						                                Target = _currentBody.DeclaredVariables.AddOrGet((follow!=null?follow.value:default(VariableDeclarationSyntax)).Identifier)
						                            }
						                        );
						                    

						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }

				DebugLocation(1559, 8);
				SEMIC136=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlVar7335); 
				SEMIC136_tree = (object)adaptor.Create(SEMIC136);
				adaptor.AddChild(root_0, SEMIC136_tree);

				DebugLocation(1560, 17);
				// ..\\ES3.g:1560:17: (ex1= expression )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==ADD||LA69_0==DEC||LA69_0==DELETE||LA69_0==DecimalLiteral||LA69_0==FALSE||LA69_0==FUNCTION||LA69_0==HexIntegerLiteral||LA69_0==INC||LA69_0==INV||LA69_0==Identifier||(LA69_0>=LBRACE && LA69_0<=LBRACK)||LA69_0==LPAREN||(LA69_0>=NEW && LA69_0<=NOT)||LA69_0==NULL||LA69_0==OctalIntegerLiteral||LA69_0==RegularExpressionLiteral||LA69_0==SUB||LA69_0==StringLiteral||LA69_0==THIS||LA69_0==TRUE||LA69_0==TYPEOF||LA69_0==VOID))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1561:21: ex1= expression
					{
					DebugLocation(1561, 24);
					PushFollow(Follow._expression_in_forControlVar7377);
					ex1=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex1.Tree);
					DebugLocation(1562, 21);
					 retval.value.Test = (ex1!=null?ex1.value:default(ExpressionSyntax));

					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(1564, 17);
				SEMIC137=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlVar7436); 
				SEMIC137_tree = (object)adaptor.Create(SEMIC137);
				adaptor.AddChild(root_0, SEMIC137_tree);

				DebugLocation(1565, 17);
				// ..\\ES3.g:1565:17: (ex2= expression )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==ADD||LA70_0==DEC||LA70_0==DELETE||LA70_0==DecimalLiteral||LA70_0==FALSE||LA70_0==FUNCTION||LA70_0==HexIntegerLiteral||LA70_0==INC||LA70_0==INV||LA70_0==Identifier||(LA70_0>=LBRACE && LA70_0<=LBRACK)||LA70_0==LPAREN||(LA70_0>=NEW && LA70_0<=NOT)||LA70_0==NULL||LA70_0==OctalIntegerLiteral||LA70_0==RegularExpressionLiteral||LA70_0==SUB||LA70_0==StringLiteral||LA70_0==THIS||LA70_0==TRUE||LA70_0==TYPEOF||LA70_0==VOID))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1566:21: ex2= expression
					{
					DebugLocation(1566, 24);
					PushFollow(Follow._expression_in_forControlVar7478);
					ex2=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex2.Tree);
					DebugLocation(1567, 21);
					 retval.value.Increment = (ex2!=null?ex2.value:default(ExpressionSyntax)); 

					}
					break;

				}
				} finally { DebugExitSubRule(70); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    if (statements != null)
			        retval.value.Initialization = new CommaOperatorSyntax(statements);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControlVar", 66);
			LeaveRule("forControlVar", 66);
			LeaveRule_forControlVar();
		}
		DebugLocation(1571, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlVar"); }
		return retval;

	}
	// $ANTLR end "forControlVar"

	private sealed partial class forControlExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ForBuilder value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControlExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControlExpression();
	partial void LeaveRule_forControlExpression();

	// $ANTLR start "forControlExpression"
	// ..\\ES3.g:1573:1: forControlExpression returns [ForBuilder value] : ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) ;
	[GrammarRule("forControlExpression")]
	private ES3Parser.forControlExpression_return forControlExpression()
	{
		EnterRule_forControlExpression();
		EnterRule("forControlExpression", 67);
		TraceIn("forControlExpression", 67);
		ES3Parser.forControlExpression_return retval = new ES3Parser.forControlExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IN138 = default(IToken);
		IToken SEMIC139 = default(IToken);
		IToken SEMIC140 = default(IToken);
		ES3Parser.expressionNoIn_return ex1 = default(ES3Parser.expressionNoIn_return);
		ES3Parser.expression_return ex2 = default(ES3Parser.expression_return);
		ES3Parser.expression_return ex3 = default(ES3Parser.expression_return);

		object IN138_tree = default(object);
		object SEMIC139_tree = default(object);
		object SEMIC140_tree = default(object);


		    retval.value = new ForBuilder();
			bool? isLhs = null;

		try { DebugEnterRule(GrammarFileName, "forControlExpression");
		DebugLocation(1573, 1);
		try
		{
			// ..\\ES3.g:1579:2: (ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1580:9: ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1580, 12);
			PushFollow(Follow._expressionNoIn_in_forControlExpression7564);
			ex1=expressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, ex1.Tree);
			DebugLocation(1581, 9);
			 retval.value.Initialization = (ex1!=null?ex1.value:default(ExpressionSyntax)); 
			DebugLocation(1582, 6);
			// ..\\ES3.g:1582:6: ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==IN))
			{
				alt74 = 1;
			}
			else if ((LA74_0==SEMIC))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1583:7: {...}? ( IN ex2= expression )
				{
				DebugLocation(1583, 7);
				if (!(( IsLeftHandSideIn((ex1!=null?ex1.value:default(ExpressionSyntax)), ref isLhs) )))
				{
					throw new FailedPredicateException(input, "forControlExpression", " IsLeftHandSideIn($ex1.value, ref isLhs) ");
				}
				DebugLocation(1584, 13);
				// ..\\ES3.g:1584:13: ( IN ex2= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1585:8: IN ex2= expression
				{
				DebugLocation(1585, 8);
				IN138=(IToken)Match(input,IN,Follow._IN_in_forControlExpression7613); 
				IN138_tree = (object)adaptor.Create(IN138);
				adaptor.AddChild(root_0, IN138_tree);

				DebugLocation(1585, 14);
				PushFollow(Follow._expression_in_forControlExpression7617);
				ex2=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex2.Tree);
				DebugLocation(1586, 17);
				 retval.value.Expression = (ex2!=null?ex2.value:default(ExpressionSyntax)); 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1589:7: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				{
				DebugLocation(1589, 7);
				// ..\\ES3.g:1589:7: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1590:8: SEMIC (ex2= expression )? SEMIC (ex3= expression )?
				{
				DebugLocation(1590, 8);
				SEMIC139=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlExpression7668); 
				SEMIC139_tree = (object)adaptor.Create(SEMIC139);
				adaptor.AddChild(root_0, SEMIC139_tree);

				DebugLocation(1591, 17);
				// ..\\ES3.g:1591:17: (ex2= expression )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==ADD||LA72_0==DEC||LA72_0==DELETE||LA72_0==DecimalLiteral||LA72_0==FALSE||LA72_0==FUNCTION||LA72_0==HexIntegerLiteral||LA72_0==INC||LA72_0==INV||LA72_0==Identifier||(LA72_0>=LBRACE && LA72_0<=LBRACK)||LA72_0==LPAREN||(LA72_0>=NEW && LA72_0<=NOT)||LA72_0==NULL||LA72_0==OctalIntegerLiteral||LA72_0==RegularExpressionLiteral||LA72_0==SUB||LA72_0==StringLiteral||LA72_0==THIS||LA72_0==TRUE||LA72_0==TYPEOF||LA72_0==VOID))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1592:21: ex2= expression
					{
					DebugLocation(1592, 24);
					PushFollow(Follow._expression_in_forControlExpression7710);
					ex2=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex2.Tree);
					DebugLocation(1593, 21);
					 retval.value.Test = (ex2!=null?ex2.value:default(ExpressionSyntax));

					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(1595, 17);
				SEMIC140=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlExpression7769); 
				SEMIC140_tree = (object)adaptor.Create(SEMIC140);
				adaptor.AddChild(root_0, SEMIC140_tree);

				DebugLocation(1596, 17);
				// ..\\ES3.g:1596:17: (ex3= expression )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==ADD||LA73_0==DEC||LA73_0==DELETE||LA73_0==DecimalLiteral||LA73_0==FALSE||LA73_0==FUNCTION||LA73_0==HexIntegerLiteral||LA73_0==INC||LA73_0==INV||LA73_0==Identifier||(LA73_0>=LBRACE && LA73_0<=LBRACK)||LA73_0==LPAREN||(LA73_0>=NEW && LA73_0<=NOT)||LA73_0==NULL||LA73_0==OctalIntegerLiteral||LA73_0==RegularExpressionLiteral||LA73_0==SUB||LA73_0==StringLiteral||LA73_0==THIS||LA73_0==TRUE||LA73_0==TYPEOF||LA73_0==VOID))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1597:21: ex3= expression
					{
					DebugLocation(1597, 24);
					PushFollow(Follow._expression_in_forControlExpression7811);
					ex3=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex3.Tree);
					DebugLocation(1598, 21);
					 retval.value.Increment = (ex3!=null?ex3.value:default(ExpressionSyntax)); 

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControlExpression", 67);
			LeaveRule("forControlExpression", 67);
			LeaveRule_forControlExpression();
		}
		DebugLocation(1602, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlExpression"); }
		return retval;

	}
	// $ANTLR end "forControlExpression"

	private sealed partial class forControlSemic_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ForBuilder value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControlSemic_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControlSemic();
	partial void LeaveRule_forControlSemic();

	// $ANTLR start "forControlSemic"
	// ..\\ES3.g:1604:1: forControlSemic returns [ForBuilder value] : SEMIC (ex1= expression )? SEMIC (ex2= expression )? ;
	[GrammarRule("forControlSemic")]
	private ES3Parser.forControlSemic_return forControlSemic()
	{
		EnterRule_forControlSemic();
		EnterRule("forControlSemic", 68);
		TraceIn("forControlSemic", 68);
		ES3Parser.forControlSemic_return retval = new ES3Parser.forControlSemic_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SEMIC141 = default(IToken);
		IToken SEMIC142 = default(IToken);
		ES3Parser.expression_return ex1 = default(ES3Parser.expression_return);
		ES3Parser.expression_return ex2 = default(ES3Parser.expression_return);

		object SEMIC141_tree = default(object);
		object SEMIC142_tree = default(object);


			retval.value = new ForBuilder();

		try { DebugEnterRule(GrammarFileName, "forControlSemic");
		DebugLocation(1604, 1);
		try
		{
			// ..\\ES3.g:1608:2: ( SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1609:9: SEMIC (ex1= expression )? SEMIC (ex2= expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1609, 9);
			SEMIC141=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlSemic7894); 
			SEMIC141_tree = (object)adaptor.Create(SEMIC141);
			adaptor.AddChild(root_0, SEMIC141_tree);

			DebugLocation(1610, 9);
			// ..\\ES3.g:1610:9: (ex1= expression )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==ADD||LA75_0==DEC||LA75_0==DELETE||LA75_0==DecimalLiteral||LA75_0==FALSE||LA75_0==FUNCTION||LA75_0==HexIntegerLiteral||LA75_0==INC||LA75_0==INV||LA75_0==Identifier||(LA75_0>=LBRACE && LA75_0<=LBRACK)||LA75_0==LPAREN||(LA75_0>=NEW && LA75_0<=NOT)||LA75_0==NULL||LA75_0==OctalIntegerLiteral||LA75_0==RegularExpressionLiteral||LA75_0==SUB||LA75_0==StringLiteral||LA75_0==THIS||LA75_0==TRUE||LA75_0==TYPEOF||LA75_0==VOID))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1611:13: ex1= expression
				{
				DebugLocation(1611, 16);
				PushFollow(Follow._expression_in_forControlSemic7920);
				ex1=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex1.Tree);
				DebugLocation(1612, 13);
				 retval.value.Test = (ex1!=null?ex1.value:default(ExpressionSyntax));

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(1614, 9);
			SEMIC142=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlSemic7955); 
			SEMIC142_tree = (object)adaptor.Create(SEMIC142);
			adaptor.AddChild(root_0, SEMIC142_tree);

			DebugLocation(1615, 9);
			// ..\\ES3.g:1615:9: (ex2= expression )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==ADD||LA76_0==DEC||LA76_0==DELETE||LA76_0==DecimalLiteral||LA76_0==FALSE||LA76_0==FUNCTION||LA76_0==HexIntegerLiteral||LA76_0==INC||LA76_0==INV||LA76_0==Identifier||(LA76_0>=LBRACE && LA76_0<=LBRACK)||LA76_0==LPAREN||(LA76_0>=NEW && LA76_0<=NOT)||LA76_0==NULL||LA76_0==OctalIntegerLiteral||LA76_0==RegularExpressionLiteral||LA76_0==SUB||LA76_0==StringLiteral||LA76_0==THIS||LA76_0==TRUE||LA76_0==TYPEOF||LA76_0==VOID))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1616:13: ex2= expression
				{
				DebugLocation(1616, 16);
				PushFollow(Follow._expression_in_forControlSemic7981);
				ex2=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex2.Tree);
				DebugLocation(1617, 13);
				 retval.value.Increment = (ex2!=null?ex2.value:default(ExpressionSyntax)); 

				}
				break;

			}
			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControlSemic", 68);
			LeaveRule("forControlSemic", 68);
			LeaveRule_forControlSemic();
		}
		DebugLocation(1619, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlSemic"); }
		return retval;

	}
	// $ANTLR end "forControlSemic"

	private sealed partial class continueStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public continueStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();

	// $ANTLR start "continueStatement"
	// ..\\ES3.g:1630:1: continueStatement returns [SyntaxNode value] : CONTINUE (lb= Identifier )? semic ;
	[GrammarRule("continueStatement")]
	private ES3Parser.continueStatement_return continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 69);
		TraceIn("continueStatement", 69);
		ES3Parser.continueStatement_return retval = new ES3Parser.continueStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken CONTINUE143 = default(IToken);
		ES3Parser.semic_return semic144 = default(ES3Parser.semic_return);

		object lb_tree = default(object);
		object CONTINUE143_tree = default(object);

		 
			string label = null;

		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(1630, 1);
		try
		{
			// ..\\ES3.g:1634:2: ( CONTINUE (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1635:9: CONTINUE (lb= Identifier )? semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1635, 17);
			CONTINUE143=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_continueStatement8041); 
			CONTINUE143_tree = (object)adaptor.Create(CONTINUE143);
			root_0 = (object)adaptor.BecomeRoot(CONTINUE143_tree, root_0);

			DebugLocation(1636, 9);
			 if (input.LA(1) == Identifier) PromoteEOL(null); 
			DebugLocation(1637, 9);
			// ..\\ES3.g:1637:9: (lb= Identifier )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==Identifier))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1638:13: lb= Identifier
				{
				DebugLocation(1638, 15);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_continueStatement8078); 
				lb_tree = (object)adaptor.Create(lb);
				adaptor.AddChild(root_0, lb_tree);

				DebugLocation(1639, 13);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(1641, 14);
			PushFollow(Follow._semic_in_continueStatement8113);
			semic144=semic();
			PopFollow();

			DebugLocation(1642, 9);
			 retval.value = new ContinueSyntax(label); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continueStatement", 69);
			LeaveRule("continueStatement", 69);
			LeaveRule_continueStatement();
		}
		DebugLocation(1643, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return retval;

	}
	// $ANTLR end "continueStatement"

	private sealed partial class breakStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public breakStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();

	// $ANTLR start "breakStatement"
	// ..\\ES3.g:1654:1: breakStatement returns [SyntaxNode value] : BREAK (lb= Identifier )? semic ;
	[GrammarRule("breakStatement")]
	private ES3Parser.breakStatement_return breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 70);
		TraceIn("breakStatement", 70);
		ES3Parser.breakStatement_return retval = new ES3Parser.breakStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken BREAK145 = default(IToken);
		ES3Parser.semic_return semic146 = default(ES3Parser.semic_return);

		object lb_tree = default(object);
		object BREAK145_tree = default(object);

		 
			string label = null; 

		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(1654, 1);
		try
		{
			// ..\\ES3.g:1658:2: ( BREAK (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1659:9: BREAK (lb= Identifier )? semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1659, 14);
			BREAK145=(IToken)Match(input,BREAK,Follow._BREAK_in_breakStatement8159); 
			BREAK145_tree = (object)adaptor.Create(BREAK145);
			root_0 = (object)adaptor.BecomeRoot(BREAK145_tree, root_0);

			DebugLocation(1660, 9);
			 if (input.LA(1) == Identifier) PromoteEOL(null); 
			DebugLocation(1661, 9);
			// ..\\ES3.g:1661:9: (lb= Identifier )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==Identifier))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1662:13: lb= Identifier
				{
				DebugLocation(1662, 15);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_breakStatement8196); 
				lb_tree = (object)adaptor.Create(lb);
				adaptor.AddChild(root_0, lb_tree);

				DebugLocation(1662, 27);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(1664, 14);
			PushFollow(Follow._semic_in_breakStatement8219);
			semic146=semic();
			PopFollow();

			DebugLocation(1665, 9);
			 retval.value = new BreakSyntax(label); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("breakStatement", 70);
			LeaveRule("breakStatement", 70);
			LeaveRule_breakStatement();
		}
		DebugLocation(1666, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return retval;

	}
	// $ANTLR end "breakStatement"

	private sealed partial class returnStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ReturnSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public returnStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// ..\\ES3.g:1685:1: returnStatement returns [ReturnSyntax value] : RETURN (expr= expression )? semic ;
	[GrammarRule("returnStatement")]
	private ES3Parser.returnStatement_return returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 71);
		TraceIn("returnStatement", 71);
		ES3Parser.returnStatement_return retval = new ES3Parser.returnStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken RETURN147 = default(IToken);
		ES3Parser.expression_return expr = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic148 = default(ES3Parser.semic_return);

		object RETURN147_tree = default(object);


		    ExpressionSyntax returnExpression = null;

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(1685, 1);
		try
		{
			// ..\\ES3.g:1689:2: ( RETURN (expr= expression )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1690:9: RETURN (expr= expression )? semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1690, 15);
			RETURN147=(IToken)Match(input,RETURN,Follow._RETURN_in_returnStatement8265); 
			RETURN147_tree = (object)adaptor.Create(RETURN147);
			root_0 = (object)adaptor.BecomeRoot(RETURN147_tree, root_0);

			DebugLocation(1691, 9);
			 PromoteEOL(null); 
			DebugLocation(1692, 9);
			// ..\\ES3.g:1692:9: (expr= expression )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==ADD||LA79_0==DEC||LA79_0==DELETE||LA79_0==DecimalLiteral||LA79_0==FALSE||LA79_0==FUNCTION||LA79_0==HexIntegerLiteral||LA79_0==INC||LA79_0==INV||LA79_0==Identifier||(LA79_0>=LBRACE && LA79_0<=LBRACK)||LA79_0==LPAREN||(LA79_0>=NEW && LA79_0<=NOT)||LA79_0==NULL||LA79_0==OctalIntegerLiteral||LA79_0==RegularExpressionLiteral||LA79_0==SUB||LA79_0==StringLiteral||LA79_0==THIS||LA79_0==TRUE||LA79_0==TYPEOF||LA79_0==VOID))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1693:13: expr= expression
				{
				DebugLocation(1693, 17);
				PushFollow(Follow._expression_in_returnStatement8302);
				expr=expression();
				PopFollow();

				adaptor.AddChild(root_0, expr.Tree);
				DebugLocation(1694, 13);
				 returnExpression = (expr!=null?expr.value:default(ExpressionSyntax)); 

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(1696, 14);
			PushFollow(Follow._semic_in_returnStatement8337);
			semic148=semic();
			PopFollow();

			DebugLocation(1697, 9);
			 retval.value = new ReturnSyntax(returnExpression); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 71);
			LeaveRule("returnStatement", 71);
			LeaveRule_returnStatement();
		}
		DebugLocation(1698, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	private sealed partial class withStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public withStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();

	// $ANTLR start "withStatement"
	// ..\\ES3.g:1704:1: withStatement returns [SyntaxNode value] : WITH LPAREN exp= expression RPAREN smt= statement ;
	[GrammarRule("withStatement")]
	private ES3Parser.withStatement_return withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 72);
		TraceIn("withStatement", 72);
		ES3Parser.withStatement_return retval = new ES3Parser.withStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WITH149 = default(IToken);
		IToken LPAREN150 = default(IToken);
		IToken RPAREN151 = default(IToken);
		ES3Parser.expression_return exp = default(ES3Parser.expression_return);
		ES3Parser.statement_return smt = default(ES3Parser.statement_return);

		object WITH149_tree = default(object);
		object LPAREN150_tree = default(object);
		object RPAREN151_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(1704, 1);
		try
		{
			// ..\\ES3.g:1705:2: ( WITH LPAREN exp= expression RPAREN smt= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1705:4: WITH LPAREN exp= expression RPAREN smt= statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1705, 8);
			WITH149=(IToken)Match(input,WITH,Follow._WITH_in_withStatement8368); 
			WITH149_tree = (object)adaptor.Create(WITH149);
			root_0 = (object)adaptor.BecomeRoot(WITH149_tree, root_0);

			DebugLocation(1705, 16);
			LPAREN150=(IToken)Match(input,LPAREN,Follow._LPAREN_in_withStatement8371); 
			DebugLocation(1705, 21);
			PushFollow(Follow._expression_in_withStatement8376);
			exp=expression();
			PopFollow();

			adaptor.AddChild(root_0, exp.Tree);
			DebugLocation(1705, 39);
			RPAREN151=(IToken)Match(input,RPAREN,Follow._RPAREN_in_withStatement8378); 
			DebugLocation(1705, 44);
			PushFollow(Follow._statement_in_withStatement8383);
			smt=statement();
			PopFollow();

			adaptor.AddChild(root_0, smt.Tree);
			DebugLocation(1705, 55);
			 retval.value = new WithSyntax(exp.value, smt.value); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("withStatement", 72);
			LeaveRule("withStatement", 72);
			LeaveRule_withStatement();
		}
		DebugLocation(1706, 1);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return retval;

	}
	// $ANTLR end "withStatement"

	private sealed partial class switchStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public switchStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// ..\\ES3.g:1712:1: switchStatement returns [SyntaxNode value] : SWITCH LPAREN expression RPAREN LBRACE ({...}? =>def= defaultClause | caseClause )* RBRACE ;
	[GrammarRule("switchStatement")]
	private ES3Parser.switchStatement_return switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 73);
		TraceIn("switchStatement", 73);
		ES3Parser.switchStatement_return retval = new ES3Parser.switchStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SWITCH152 = default(IToken);
		IToken LPAREN153 = default(IToken);
		IToken RPAREN155 = default(IToken);
		IToken LBRACE156 = default(IToken);
		IToken RBRACE158 = default(IToken);
		ES3Parser.defaultClause_return def = default(ES3Parser.defaultClause_return);
		ES3Parser.expression_return expression154 = default(ES3Parser.expression_return);
		ES3Parser.caseClause_return caseClause157 = default(ES3Parser.caseClause_return);

		object SWITCH152_tree = default(object);
		object LPAREN153_tree = default(object);
		object RPAREN155_tree = default(object);
		object LBRACE156_tree = default(object);
		object RBRACE158_tree = default(object);


		    BlockSyntax block = null;
		    var cases = new List<CaseClause>();

		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(1712, 1);
		try
		{
			// ..\\ES3.g:1717:2: ( SWITCH LPAREN expression RPAREN LBRACE ({...}? =>def= defaultClause | caseClause )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1718:9: SWITCH LPAREN expression RPAREN LBRACE ({...}? =>def= defaultClause | caseClause )* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1718, 9);
			SWITCH152=(IToken)Match(input,SWITCH,Follow._SWITCH_in_switchStatement8418); 
			SWITCH152_tree = (object)adaptor.Create(SWITCH152);
			adaptor.AddChild(root_0, SWITCH152_tree);

			DebugLocation(1718, 16);
			LPAREN153=(IToken)Match(input,LPAREN,Follow._LPAREN_in_switchStatement8420); 
			LPAREN153_tree = (object)adaptor.Create(LPAREN153);
			adaptor.AddChild(root_0, LPAREN153_tree);

			DebugLocation(1718, 23);
			PushFollow(Follow._expression_in_switchStatement8422);
			expression154=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression154.Tree);
			DebugLocation(1718, 34);
			RPAREN155=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement8424); 
			RPAREN155_tree = (object)adaptor.Create(RPAREN155);
			adaptor.AddChild(root_0, RPAREN155_tree);

			DebugLocation(1718, 41);
			LBRACE156=(IToken)Match(input,LBRACE,Follow._LBRACE_in_switchStatement8426); 
			LBRACE156_tree = (object)adaptor.Create(LBRACE156);
			adaptor.AddChild(root_0, LBRACE156_tree);

			DebugLocation(1719, 9);
			// ..\\ES3.g:1719:9: ({...}? =>def= defaultClause | caseClause )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=3;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==DEFAULT) && (( block == null )))
				{
					alt80 = 1;
				}
				else if ((LA80_0==CASE))
				{
					alt80 = 2;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1720:13: {...}? =>def= defaultClause
					{
					DebugLocation(1720, 13);
					if (!(( block == null )))
					{
						throw new FailedPredicateException(input, "switchStatement", " block == null ");
					}
					DebugLocation(1721, 16);
					PushFollow(Follow._defaultClause_in_switchStatement8467);
					def=defaultClause();
					PopFollow();

					adaptor.AddChild(root_0, def.Tree);
					DebugLocation(1722, 13);
					 block = (def!=null?def.value:default(BlockSyntax)); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:1724:13: caseClause
					{
					DebugLocation(1724, 13);
					PushFollow(Follow._caseClause_in_switchStatement8505);
					caseClause157=caseClause();
					PopFollow();

					adaptor.AddChild(root_0, caseClause157.Tree);
					DebugLocation(1725, 13);
					 cases.Add((caseClause157!=null?caseClause157.value:default(CaseClause))); 

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }

			DebugLocation(1727, 9);
			RBRACE158=(IToken)Match(input,RBRACE,Follow._RBRACE_in_switchStatement8540); 
			RBRACE158_tree = (object)adaptor.Create(RBRACE158);
			adaptor.AddChild(root_0, RBRACE158_tree);

			DebugLocation(1728, 9);
			 retval.value = new SwitchSyntax((expression154!=null?expression154.value:default(ExpressionSyntax)), cases, block); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 73);
			LeaveRule("switchStatement", 73);
			LeaveRule_switchStatement();
		}
		DebugLocation(1729, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	private sealed partial class caseClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public CaseClause value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public caseClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_caseClause();
	partial void LeaveRule_caseClause();

	// $ANTLR start "caseClause"
	// ..\\ES3.g:1731:1: caseClause returns [CaseClause value] : CASE expression COLON ( statement )* ;
	[GrammarRule("caseClause")]
	private ES3Parser.caseClause_return caseClause()
	{
		EnterRule_caseClause();
		EnterRule("caseClause", 74);
		TraceIn("caseClause", 74);
		ES3Parser.caseClause_return retval = new ES3Parser.caseClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CASE159 = default(IToken);
		IToken COLON161 = default(IToken);
		ES3Parser.expression_return expression160 = default(ES3Parser.expression_return);
		ES3Parser.statement_return statement162 = default(ES3Parser.statement_return);

		object CASE159_tree = default(object);
		object COLON161_tree = default(object);


		    var statements = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "caseClause");
		DebugLocation(1731, 1);
		try
		{
			// ..\\ES3.g:1735:2: ( CASE expression COLON ( statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1736:9: CASE expression COLON ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1736, 13);
			CASE159=(IToken)Match(input,CASE,Follow._CASE_in_caseClause8578); 
			CASE159_tree = (object)adaptor.Create(CASE159);
			root_0 = (object)adaptor.BecomeRoot(CASE159_tree, root_0);

			DebugLocation(1736, 15);
			PushFollow(Follow._expression_in_caseClause8581);
			expression160=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression160.Tree);
			DebugLocation(1736, 31);
			COLON161=(IToken)Match(input,COLON,Follow._COLON_in_caseClause8583); 
			DebugLocation(1737, 9);
			// ..\\ES3.g:1737:9: ( statement )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==ADD||LA81_0==BREAK||LA81_0==CONTINUE||LA81_0==DEC||LA81_0==DELETE||LA81_0==DO||LA81_0==DecimalLiteral||LA81_0==FALSE||LA81_0==FOR||LA81_0==FUNCTION||(LA81_0>=HexIntegerLiteral && LA81_0<=IF)||LA81_0==INC||LA81_0==INV||LA81_0==Identifier||(LA81_0>=LBRACE && LA81_0<=LBRACK)||LA81_0==LPAREN||(LA81_0>=NEW && LA81_0<=NOT)||LA81_0==NULL||LA81_0==OctalIntegerLiteral||LA81_0==RETURN||LA81_0==RegularExpressionLiteral||LA81_0==SEMIC||LA81_0==SUB||LA81_0==SWITCH||LA81_0==StringLiteral||(LA81_0>=THIS && LA81_0<=THROW)||(LA81_0>=TRUE && LA81_0<=TYPEOF)||(LA81_0>=VAR && LA81_0<=VOID)||(LA81_0>=WHILE && LA81_0<=WITH)))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1738:13: statement
					{
					DebugLocation(1738, 13);
					PushFollow(Follow._statement_in_caseClause8608);
					statement162=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement162.Tree);
					DebugLocation(1739, 13);
					 statements.Add((statement162!=null?statement162.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(1741, 9);
			 retval.value = new CaseClause((expression160!=null?expression160.value:default(ExpressionSyntax)), new BlockSyntax(statements)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseClause", 74);
			LeaveRule("caseClause", 74);
			LeaveRule_caseClause();
		}
		DebugLocation(1742, 1);
		} finally { DebugExitRule(GrammarFileName, "caseClause"); }
		return retval;

	}
	// $ANTLR end "caseClause"

	private sealed partial class defaultClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public BlockSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public defaultClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_defaultClause();
	partial void LeaveRule_defaultClause();

	// $ANTLR start "defaultClause"
	// ..\\ES3.g:1744:1: defaultClause returns [BlockSyntax value] : DEFAULT COLON ( statement )* ;
	[GrammarRule("defaultClause")]
	private ES3Parser.defaultClause_return defaultClause()
	{
		EnterRule_defaultClause();
		EnterRule("defaultClause", 75);
		TraceIn("defaultClause", 75);
		ES3Parser.defaultClause_return retval = new ES3Parser.defaultClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DEFAULT163 = default(IToken);
		IToken COLON164 = default(IToken);
		ES3Parser.statement_return statement165 = default(ES3Parser.statement_return);

		object DEFAULT163_tree = default(object);
		object COLON164_tree = default(object);


		    var statements = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "defaultClause");
		DebugLocation(1744, 1);
		try
		{
			// ..\\ES3.g:1748:2: ( DEFAULT COLON ( statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1749:9: DEFAULT COLON ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1749, 16);
			DEFAULT163=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_defaultClause8672); 
			DEFAULT163_tree = (object)adaptor.Create(DEFAULT163);
			root_0 = (object)adaptor.BecomeRoot(DEFAULT163_tree, root_0);

			DebugLocation(1749, 23);
			COLON164=(IToken)Match(input,COLON,Follow._COLON_in_defaultClause8675); 
			DebugLocation(1750, 9);
			// ..\\ES3.g:1750:9: ( statement )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==ADD||LA82_0==BREAK||LA82_0==CONTINUE||LA82_0==DEC||LA82_0==DELETE||LA82_0==DO||LA82_0==DecimalLiteral||LA82_0==FALSE||LA82_0==FOR||LA82_0==FUNCTION||(LA82_0>=HexIntegerLiteral && LA82_0<=IF)||LA82_0==INC||LA82_0==INV||LA82_0==Identifier||(LA82_0>=LBRACE && LA82_0<=LBRACK)||LA82_0==LPAREN||(LA82_0>=NEW && LA82_0<=NOT)||LA82_0==NULL||LA82_0==OctalIntegerLiteral||LA82_0==RETURN||LA82_0==RegularExpressionLiteral||LA82_0==SEMIC||LA82_0==SUB||LA82_0==SWITCH||LA82_0==StringLiteral||(LA82_0>=THIS && LA82_0<=THROW)||(LA82_0>=TRUE && LA82_0<=TYPEOF)||(LA82_0>=VAR && LA82_0<=VOID)||(LA82_0>=WHILE && LA82_0<=WITH)))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1751:13: statement
					{
					DebugLocation(1751, 13);
					PushFollow(Follow._statement_in_defaultClause8700);
					statement165=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement165.Tree);
					DebugLocation(1752, 13);
					 statements.Add((statement165!=null?statement165.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(1754, 9);
			 retval.value = new BlockSyntax(statements); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultClause", 75);
			LeaveRule("defaultClause", 75);
			LeaveRule_defaultClause();
		}
		DebugLocation(1755, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultClause"); }
		return retval;

	}
	// $ANTLR end "defaultClause"

	private sealed partial class labelledStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public labelledStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_labelledStatement();
	partial void LeaveRule_labelledStatement();

	// $ANTLR start "labelledStatement"
	// ..\\ES3.g:1761:1: labelledStatement returns [SyntaxNode value] : lb= Identifier COLON st= statement ;
	[GrammarRule("labelledStatement")]
	private ES3Parser.labelledStatement_return labelledStatement()
	{
		EnterRule_labelledStatement();
		EnterRule("labelledStatement", 76);
		TraceIn("labelledStatement", 76);
		ES3Parser.labelledStatement_return retval = new ES3Parser.labelledStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken COLON166 = default(IToken);
		ES3Parser.statement_return st = default(ES3Parser.statement_return);

		object lb_tree = default(object);
		object COLON166_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "labelledStatement");
		DebugLocation(1761, 1);
		try
		{
			// ..\\ES3.g:1762:2: (lb= Identifier COLON st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1763:9: lb= Identifier COLON st= statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1763, 11);
			lb=(IToken)Match(input,Identifier,Follow._Identifier_in_labelledStatement8766); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(1763, 23);
			COLON166=(IToken)Match(input,COLON,Follow._COLON_in_labelledStatement8768); 
			COLON166_tree = (object)adaptor.Create(COLON166);
			adaptor.AddChild(root_0, COLON166_tree);

			DebugLocation(1763, 31);
			PushFollow(Follow._statement_in_labelledStatement8772);
			st=statement();
			PopFollow();

			adaptor.AddChild(root_0, st.Tree);
			DebugLocation(1764, 9);
			 retval.value = new LabelSyntax(lb.Text, (st!=null?st.value:default(SyntaxNode))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labelledStatement", 76);
			LeaveRule("labelledStatement", 76);
			LeaveRule_labelledStatement();
		}
		DebugLocation(1765, 1);
		} finally { DebugExitRule(GrammarFileName, "labelledStatement"); }
		return retval;

	}
	// $ANTLR end "labelledStatement"

	private sealed partial class throwStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public throwStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();

	// $ANTLR start "throwStatement"
	// ..\\ES3.g:1786:1: throwStatement returns [SyntaxNode value] : THROW exp= expression semic ;
	[GrammarRule("throwStatement")]
	private ES3Parser.throwStatement_return throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 77);
		TraceIn("throwStatement", 77);
		ES3Parser.throwStatement_return retval = new ES3Parser.throwStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken THROW167 = default(IToken);
		ES3Parser.expression_return exp = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic168 = default(ES3Parser.semic_return);

		object THROW167_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(1786, 1);
		try
		{
			// ..\\ES3.g:1787:2: ( THROW exp= expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1787:4: THROW exp= expression semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1787, 9);
			THROW167=(IToken)Match(input,THROW,Follow._THROW_in_throwStatement8804); 
			THROW167_tree = (object)adaptor.Create(THROW167);
			root_0 = (object)adaptor.BecomeRoot(THROW167_tree, root_0);

			DebugLocation(1787, 11);
			 PromoteEOL(null); 
			DebugLocation(1787, 36);
			PushFollow(Follow._expression_in_throwStatement8811);
			exp=expression();
			PopFollow();

			adaptor.AddChild(root_0, exp.Tree);
			DebugLocation(1787, 48);
			 retval.value = new ThrowSyntax(exp.value); 
			DebugLocation(1787, 94);
			PushFollow(Follow._semic_in_throwStatement8815);
			semic168=semic();
			PopFollow();


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwStatement", 77);
			LeaveRule("throwStatement", 77);
			LeaveRule_throwStatement();
		}
		DebugLocation(1788, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return retval;

	}
	// $ANTLR end "throwStatement"

	private sealed partial class tryStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public TrySyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tryStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();

	// $ANTLR start "tryStatement"
	// ..\\ES3.g:1794:1: tryStatement returns [TrySyntax value] : TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) ;
	[GrammarRule("tryStatement")]
	private ES3Parser.tryStatement_return tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 78);
		TraceIn("tryStatement", 78);
		ES3Parser.tryStatement_return retval = new ES3Parser.tryStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TRY169 = default(IToken);
		ES3Parser.block_return b = default(ES3Parser.block_return);
		ES3Parser.catchClause_return c = default(ES3Parser.catchClause_return);
		ES3Parser.finallyClause_return first = default(ES3Parser.finallyClause_return);
		ES3Parser.finallyClause_return last = default(ES3Parser.finallyClause_return);

		object TRY169_tree = default(object);


		    CatchClause @catch = null;
		    FinallyClause @finally = null;

		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(1794, 1);
		try
		{
			// ..\\ES3.g:1799:2: ( TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1800:9: TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1800, 12);
			TRY169=(IToken)Match(input,TRY,Follow._TRY_in_tryStatement8848); 
			TRY169_tree = (object)adaptor.Create(TRY169);
			root_0 = (object)adaptor.BecomeRoot(TRY169_tree, root_0);

			DebugLocation(1800, 15);
			PushFollow(Follow._block_in_tryStatement8853);
			b=block();
			PopFollow();

			adaptor.AddChild(root_0, b.Tree);
			DebugLocation(1801, 9);
			// ..\\ES3.g:1801:9: (c= catchClause (first= finallyClause )? |last= finallyClause )
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==CATCH))
			{
				alt84 = 1;
			}
			else if ((LA84_0==FINALLY))
			{
				alt84 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1802:13: c= catchClause (first= finallyClause )?
				{
				DebugLocation(1802, 14);
				PushFollow(Follow._catchClause_in_tryStatement8879);
				c=catchClause();
				PopFollow();

				adaptor.AddChild(root_0, c.Tree);
				DebugLocation(1803, 13);
				 @catch = c.value; 
				DebugLocation(1804, 13);
				// ..\\ES3.g:1804:13: (first= finallyClause )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==FINALLY))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1805:17: first= finallyClause
					{
					DebugLocation(1805, 22);
					PushFollow(Follow._finallyClause_in_tryStatement8927);
					first=finallyClause();
					PopFollow();

					adaptor.AddChild(root_0, first.Tree);
					DebugLocation(1806, 17);
					 @finally = first.value; 

					}
					break;

				}
				} finally { DebugExitSubRule(83); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1809:13: last= finallyClause
				{
				DebugLocation(1809, 17);
				PushFollow(Follow._finallyClause_in_tryStatement8986);
				last=finallyClause();
				PopFollow();

				adaptor.AddChild(root_0, last.Tree);
				DebugLocation(1810, 13);
				 @finally = last.value; 

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(1812, 9);
			 retval.value = new TrySyntax((b!=null?b.value:default(BlockSyntax)), @catch, @finally); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 78);
			LeaveRule("tryStatement", 78);
			LeaveRule_tryStatement();
		}
		DebugLocation(1813, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	private sealed partial class catchClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public CatchClause value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public catchClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();

	// $ANTLR start "catchClause"
	// ..\\ES3.g:1815:1: catchClause returns [CatchClause value] : CATCH LPAREN id= Identifier RPAREN block ;
	[GrammarRule("catchClause")]
	private ES3Parser.catchClause_return catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 79);
		TraceIn("catchClause", 79);
		ES3Parser.catchClause_return retval = new ES3Parser.catchClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken CATCH170 = default(IToken);
		IToken LPAREN171 = default(IToken);
		IToken RPAREN172 = default(IToken);
		ES3Parser.block_return block173 = default(ES3Parser.block_return);

		object id_tree = default(object);
		object CATCH170_tree = default(object);
		object LPAREN171_tree = default(object);
		object RPAREN172_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1815, 1);
		try
		{
			// ..\\ES3.g:1819:2: ( CATCH LPAREN id= Identifier RPAREN block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1820:9: CATCH LPAREN id= Identifier RPAREN block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1820, 14);
			CATCH170=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause9048); 
			CATCH170_tree = (object)adaptor.Create(CATCH170);
			root_0 = (object)adaptor.BecomeRoot(CATCH170_tree, root_0);

			DebugLocation(1820, 22);
			LPAREN171=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause9051); 
			DebugLocation(1820, 26);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_catchClause9056); 
			id_tree = (object)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(1820, 44);
			RPAREN172=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause9058); 
			DebugLocation(1820, 46);
			PushFollow(Follow._block_in_catchClause9061);
			block173=block();
			PopFollow();

			adaptor.AddChild(root_0, block173.Tree);
			DebugLocation(1821, 9);
			 retval.value = new CatchClause((id!=null?id.Text:null), (block173!=null?block173.value:default(BlockSyntax))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value.Target = _currentBody.DeclaredVariables.AddOrGet(retval.value.Identifier);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 79);
			LeaveRule("catchClause", 79);
			LeaveRule_catchClause();
		}
		DebugLocation(1822, 1);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	private sealed partial class finallyClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public FinallyClause value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public finallyClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();

	// $ANTLR start "finallyClause"
	// ..\\ES3.g:1824:1: finallyClause returns [FinallyClause value] : FINALLY block ;
	[GrammarRule("finallyClause")]
	private ES3Parser.finallyClause_return finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 80);
		TraceIn("finallyClause", 80);
		ES3Parser.finallyClause_return retval = new ES3Parser.finallyClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FINALLY174 = default(IToken);
		ES3Parser.block_return block175 = default(ES3Parser.block_return);

		object FINALLY174_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(1824, 1);
		try
		{
			// ..\\ES3.g:1825:2: ( FINALLY block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1826:9: FINALLY block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1826, 16);
			FINALLY174=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause9095); 
			FINALLY174_tree = (object)adaptor.Create(FINALLY174);
			root_0 = (object)adaptor.BecomeRoot(FINALLY174_tree, root_0);

			DebugLocation(1826, 18);
			PushFollow(Follow._block_in_finallyClause9098);
			block175=block();
			PopFollow();

			adaptor.AddChild(root_0, block175.Tree);
			DebugLocation(1827, 9);
			 retval.value = new FinallyClause((block175!=null?block175.value:default(BlockSyntax))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 80);
			LeaveRule("finallyClause", 80);
			LeaveRule_finallyClause();
		}
		DebugLocation(1828, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	private sealed partial class functionDeclaration_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionDeclaration_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();

	// $ANTLR start "functionDeclaration"
	// ..\\ES3.g:1840:1: functionDeclaration returns [SyntaxNode value] : FUNCTION id= Identifier parms= formalParameterList functionBody ;
	[GrammarRule("functionDeclaration")]
	private ES3Parser.functionDeclaration_return functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 81);
		TraceIn("functionDeclaration", 81);
		ES3Parser.functionDeclaration_return retval = new ES3Parser.functionDeclaration_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken FUNCTION176 = default(IToken);
		ES3Parser.formalParameterList_return parms = default(ES3Parser.formalParameterList_return);
		ES3Parser.functionBody_return functionBody177 = default(ES3Parser.functionBody_return);

		object id_tree = default(object);
		object FUNCTION176_tree = default(object);


		    string name;
		    List<string> parameters;
		    BlockSyntax body;

		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(1840, 1);
		try
		{
			// ..\\ES3.g:1860:2: ( FUNCTION id= Identifier parms= formalParameterList functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1861:9: FUNCTION id= Identifier parms= formalParameterList functionBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1861, 9);
			FUNCTION176=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_functionDeclaration9151); 
			FUNCTION176_tree = (object)adaptor.Create(FUNCTION176);
			adaptor.AddChild(root_0, FUNCTION176_tree);

			DebugLocation(1861, 20);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_functionDeclaration9155); 
			id_tree = (object)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(1862, 9);
			 name = id.Text; 
			DebugLocation(1863, 8);
			PushFollow(Follow._formalParameterList_in_functionDeclaration9172);
			parms=formalParameterList();
			PopFollow();

			adaptor.AddChild(root_0, parms.Tree);
			DebugLocation(1864, 9);
			 parameters = (parms!=null?parms.value:default(List<string>)); 
			DebugLocation(1865, 3);
			PushFollow(Follow._functionBody_in_functionDeclaration9186);
			functionBody177=functionBody();
			PopFollow();

			adaptor.AddChild(root_0, functionBody177.Tree);
			DebugLocation(1866, 9);
			 body = (functionBody177!=null?functionBody177.value:default(BlockSyntax)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    _currentBody.FunctionDeclarations.Add(
			        new FunctionDeclarationSyntax(
			            name,
			            parameters,
			            body
			        )
			        {
			            Target = _currentBody.DeclaredVariables.AddOrGet(name)
			        }
			    );

			    retval.value = new EmptySyntax();

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDeclaration", 81);
			LeaveRule("functionDeclaration", 81);
			LeaveRule_functionDeclaration();
		}
		DebugLocation(1867, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return retval;

	}
	// $ANTLR end "functionDeclaration"

	private sealed partial class functionExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public FunctionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_functionExpression();
	partial void LeaveRule_functionExpression();

	// $ANTLR start "functionExpression"
	// ..\\ES3.g:1869:1: functionExpression returns [FunctionSyntax value] : FUNCTION (id= Identifier )? formalParameterList functionBody ;
	[GrammarRule("functionExpression")]
	private ES3Parser.functionExpression_return functionExpression()
	{
		EnterRule_functionExpression();
		EnterRule("functionExpression", 82);
		TraceIn("functionExpression", 82);
		ES3Parser.functionExpression_return retval = new ES3Parser.functionExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken FUNCTION178 = default(IToken);
		ES3Parser.formalParameterList_return formalParameterList179 = default(ES3Parser.formalParameterList_return);
		ES3Parser.functionBody_return functionBody180 = default(ES3Parser.functionBody_return);

		object id_tree = default(object);
		object FUNCTION178_tree = default(object);


		    string name = null;
		    List<string> parameters;
		    BlockSyntax body;

		try { DebugEnterRule(GrammarFileName, "functionExpression");
		DebugLocation(1869, 1);
		try
		{
			// ..\\ES3.g:1878:2: ( FUNCTION (id= Identifier )? formalParameterList functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1879:9: FUNCTION (id= Identifier )? formalParameterList functionBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1879, 9);
			FUNCTION178=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_functionExpression9229); 
			FUNCTION178_tree = (object)adaptor.Create(FUNCTION178);
			adaptor.AddChild(root_0, FUNCTION178_tree);

			DebugLocation(1880, 9);
			// ..\\ES3.g:1880:9: (id= Identifier )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==Identifier))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1881:13: id= Identifier
				{
				DebugLocation(1881, 15);
				id=(IToken)Match(input,Identifier,Follow._Identifier_in_functionExpression9255); 
				id_tree = (object)adaptor.Create(id);
				adaptor.AddChild(root_0, id_tree);

				DebugLocation(1882, 13);
				 name = id.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(1884, 9);
			PushFollow(Follow._formalParameterList_in_functionExpression9290);
			formalParameterList179=formalParameterList();
			PopFollow();

			adaptor.AddChild(root_0, formalParameterList179.Tree);
			DebugLocation(1885, 9);
			 parameters = (formalParameterList179!=null?formalParameterList179.value:default(List<string>)); 
			DebugLocation(1886, 9);
			PushFollow(Follow._functionBody_in_functionExpression9310);
			functionBody180=functionBody();
			PopFollow();

			adaptor.AddChild(root_0, functionBody180.Tree);
			DebugLocation(1887, 9);
			 body = (functionBody180!=null?functionBody180.value:default(BlockSyntax)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


				retval.value = new FunctionSyntax(name, parameters, body);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionExpression", 82);
			LeaveRule("functionExpression", 82);
			LeaveRule_functionExpression();
		}
		DebugLocation(1888, 1);
		} finally { DebugExitRule(GrammarFileName, "functionExpression"); }
		return retval;

	}
	// $ANTLR end "functionExpression"

	private sealed partial class formalParameterList_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public List<string> value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public formalParameterList_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();

	// $ANTLR start "formalParameterList"
	// ..\\ES3.g:1890:1: formalParameterList returns [List<string> value] : LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN ;
	[GrammarRule("formalParameterList")]
	private ES3Parser.formalParameterList_return formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 83);
		TraceIn("formalParameterList", 83);
		ES3Parser.formalParameterList_return retval = new ES3Parser.formalParameterList_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken first = default(IToken);
		IToken follow = default(IToken);
		IToken LPAREN181 = default(IToken);
		IToken COMMA182 = default(IToken);
		IToken RPAREN183 = default(IToken);

		object first_tree = default(object);
		object follow_tree = default(object);
		object LPAREN181_tree = default(object);
		object COMMA182_tree = default(object);
		object RPAREN183_tree = default(object);


		    List<string> identifiers = new List<string>();
		    retval.value = identifiers;

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(1890, 1);
		try
		{
			// ..\\ES3.g:1895:2: ( LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:1896:9: LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1896, 9);
			LPAREN181=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameterList9348); 
			LPAREN181_tree = (object)adaptor.Create(LPAREN181);
			adaptor.AddChild(root_0, LPAREN181_tree);

			DebugLocation(1897, 9);
			// ..\\ES3.g:1897:9: (first= Identifier ( COMMA follow= Identifier )* )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==Identifier))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1898:13: first= Identifier ( COMMA follow= Identifier )*
				{
				DebugLocation(1898, 18);
				first=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList9374); 
				first_tree = (object)adaptor.Create(first);
				adaptor.AddChild(root_0, first_tree);

				DebugLocation(1899, 13);
				 identifiers.Add((first!=null?first.Text:null)); 
				DebugLocation(1900, 13);
				// ..\\ES3.g:1900:13: ( COMMA follow= Identifier )*
				try { DebugEnterSubRule(86);
				while (true)
				{
					int alt86=2;
					try { DebugEnterDecision(86, false);
					int LA86_0 = input.LA(1);

					if ((LA86_0==COMMA))
					{
						alt86 = 1;
					}


					} finally { DebugExitDecision(86); }
					switch ( alt86 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1901:17: COMMA follow= Identifier
						{
						DebugLocation(1901, 17);
						COMMA182=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList9420); 
						COMMA182_tree = (object)adaptor.Create(COMMA182);
						adaptor.AddChild(root_0, COMMA182_tree);

						DebugLocation(1901, 29);
						follow=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList9424); 
						follow_tree = (object)adaptor.Create(follow);
						adaptor.AddChild(root_0, follow_tree);

						DebugLocation(1902, 17);
						 identifiers.Add((follow!=null?follow.Text:null)); 

						}
						break;

					default:
						goto loop86;
					}
				}

				loop86:
					;

				} finally { DebugExitSubRule(86); }


				}
				break;

			}
			} finally { DebugExitSubRule(87); }

			DebugLocation(1905, 9);
			RPAREN183=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameterList9478); 
			RPAREN183_tree = (object)adaptor.Create(RPAREN183);
			adaptor.AddChild(root_0, RPAREN183_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 83);
			LeaveRule("formalParameterList", 83);
			LeaveRule_formalParameterList();
		}
		DebugLocation(1906, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	private sealed partial class functionBody_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public BlockSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionBody_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();

	// $ANTLR start "functionBody"
	// ..\\ES3.g:1908:1: functionBody returns [BlockSyntax value] : lb= LBRACE ( sourceElement )* RBRACE ;
	[GrammarRule("functionBody")]
	private ES3Parser.functionBody_return functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 84);
		TraceIn("functionBody", 84);
		ES3Parser.functionBody_return retval = new ES3Parser.functionBody_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken RBRACE185 = default(IToken);
		ES3Parser.sourceElement_return sourceElement184 = default(ES3Parser.sourceElement_return);

		object lb_tree = default(object);
		object RBRACE185_tree = default(object);


		    var tempBody = _currentBody;
		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(1908, 1);
		try
		{
			// ..\\ES3.g:1917:2: (lb= LBRACE ( sourceElement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1918:9: lb= LBRACE ( sourceElement )* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1918, 11);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_functionBody9511); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(1919, 9);
			// ..\\ES3.g:1919:9: ( sourceElement )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==ADD||LA88_0==BREAK||LA88_0==CONTINUE||LA88_0==DEC||LA88_0==DELETE||LA88_0==DO||LA88_0==DecimalLiteral||LA88_0==FALSE||LA88_0==FOR||LA88_0==FUNCTION||(LA88_0>=HexIntegerLiteral && LA88_0<=IF)||LA88_0==INC||LA88_0==INV||LA88_0==Identifier||(LA88_0>=LBRACE && LA88_0<=LBRACK)||LA88_0==LPAREN||(LA88_0>=NEW && LA88_0<=NOT)||LA88_0==NULL||LA88_0==OctalIntegerLiteral||LA88_0==RETURN||LA88_0==RegularExpressionLiteral||LA88_0==SEMIC||LA88_0==SUB||LA88_0==SWITCH||LA88_0==StringLiteral||(LA88_0>=THIS && LA88_0<=THROW)||(LA88_0>=TRUE && LA88_0<=TYPEOF)||(LA88_0>=VAR && LA88_0<=VOID)||(LA88_0>=WHILE && LA88_0<=WITH)))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1920:13: sourceElement
					{
					DebugLocation(1920, 13);
					PushFollow(Follow._sourceElement_in_functionBody9535);
					sourceElement184=sourceElement();
					PopFollow();

					adaptor.AddChild(root_0, sourceElement184.Tree);
					DebugLocation(1921, 13);
					 _currentBody.Statements.Add((sourceElement184!=null?sourceElement184.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }

			DebugLocation(1923, 9);
			RBRACE185=(IToken)Match(input,RBRACE,Follow._RBRACE_in_functionBody9570); 
			RBRACE185_tree = (object)adaptor.Create(RBRACE185);
			adaptor.AddChild(root_0, RBRACE185_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value = _currentBody.CreateBlock();
			    _currentBody = tempBody;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionBody", 84);
			LeaveRule("functionBody", 84);
			LeaveRule_functionBody();
		}
		DebugLocation(1924, 1);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return retval;

	}
	// $ANTLR end "functionBody"

	private sealed partial class program_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ProgramSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public program_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// ..\\ES3.g:1930:1: program returns [ProgramSyntax value] : (follow= sourceElement )* ;
	[GrammarRule("program")]
	private ES3Parser.program_return program()
	{
		EnterRule_program();
		EnterRule("program", 85);
		TraceIn("program", 85);
		ES3Parser.program_return retval = new ES3Parser.program_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.sourceElement_return follow = default(ES3Parser.sourceElement_return);



		    script = input.ToString().Split('\n');
		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(1930, 1);
		try
		{
			// ..\\ES3.g:1935:2: ( (follow= sourceElement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1936:9: (follow= sourceElement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1936, 9);
			// ..\\ES3.g:1936:9: (follow= sourceElement )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==ADD||LA89_0==BREAK||LA89_0==CONTINUE||LA89_0==DEC||LA89_0==DELETE||LA89_0==DO||LA89_0==DecimalLiteral||LA89_0==FALSE||LA89_0==FOR||LA89_0==FUNCTION||(LA89_0>=HexIntegerLiteral && LA89_0<=IF)||LA89_0==INC||LA89_0==INV||LA89_0==Identifier||(LA89_0>=LBRACE && LA89_0<=LBRACK)||LA89_0==LPAREN||(LA89_0>=NEW && LA89_0<=NOT)||LA89_0==NULL||LA89_0==OctalIntegerLiteral||LA89_0==RETURN||LA89_0==RegularExpressionLiteral||LA89_0==SEMIC||LA89_0==SUB||LA89_0==SWITCH||LA89_0==StringLiteral||(LA89_0>=THIS && LA89_0<=THROW)||(LA89_0>=TRUE && LA89_0<=TYPEOF)||(LA89_0>=VAR && LA89_0<=VOID)||(LA89_0>=WHILE && LA89_0<=WITH)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1937:13: follow= sourceElement
					{
					DebugLocation(1937, 19);
					PushFollow(Follow._sourceElement_in_program9618);
					follow=sourceElement();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1938, 13);
					 _currentBody.Statements.Add((follow!=null?follow.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(1940, 9);
			 retval.value = _currentBody.CreateProgram(); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 85);
			LeaveRule("program", 85);
			LeaveRule_program();
		}
		DebugLocation(1941, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	private sealed partial class sourceElement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public sourceElement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_sourceElement();
	partial void LeaveRule_sourceElement();

	// $ANTLR start "sourceElement"
	// ..\\ES3.g:1948:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );
	[GrammarRule("sourceElement")]
	private ES3Parser.sourceElement_return sourceElement()
	{
		EnterRule_sourceElement();
		EnterRule("sourceElement", 86);
		TraceIn("sourceElement", 86);
		ES3Parser.sourceElement_return retval = new ES3Parser.sourceElement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.functionDeclaration_return func = default(ES3Parser.functionDeclaration_return);
		ES3Parser.statement_return stat = default(ES3Parser.statement_return);


		try { DebugEnterRule(GrammarFileName, "sourceElement");
		DebugLocation(1948, 1);
		try
		{
			// ..\\ES3.g:1954:2: ({...}?func= functionDeclaration |stat= statement )
			int alt90=2;
			try { DebugEnterDecision(90, false);
			try
			{
				alt90 = dfa90.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1954:4: {...}?func= functionDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1954, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "sourceElement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1954, 37);
				PushFollow(Follow._functionDeclaration_in_sourceElement9688);
				func=functionDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, func.Tree);
				DebugLocation(1954, 58);
				 retval.value = func.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1955:4: stat= statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1955, 8);
				PushFollow(Follow._statement_in_sourceElement9697);
				stat=statement();
				PopFollow();

				adaptor.AddChild(root_0, stat.Tree);
				DebugLocation(1955, 19);
				 retval.value = stat.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sourceElement", 86);
			LeaveRule("sourceElement", 86);
			LeaveRule_sourceElement();
		}
		DebugLocation(1956, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElement"); }
		return retval;

	}
	// $ANTLR end "sourceElement"
	#endregion Rules


	#region DFA
	private DFA58 dfa58;
	private DFA59 dfa59;
	private DFA90 dfa90;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa58 = new DFA58( this, SpecialStateTransition58 );
		dfa59 = new DFA59( this );
		dfa90 = new DFA90( this, SpecialStateTransition90 );
	}

	private class DFA58 : DFA
	{
		private const string DFA58_eotS =
			"\x28\xFFFF";
		private const string DFA58_eofS =
			"\x28\xFFFF";
		private const string DFA58_minS =
			"\x1\x5\x2\x0\x25\xFFFF";
		private const string DFA58_maxS =
			"\x1\xA6\x2\x0\x25\xFFFF";
		private const string DFA58_acceptS =
			"\x3\xFFFF\x1\x3\x22\xFFFF\x1\x1\x1\x2";
		private const string DFA58_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x25\xFFFF}>";
		private static readonly string[] DFA58_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x2\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x1\x1\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\xC\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\x2\x3\x2"+
				"\xFFFF\x2\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
		private static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
		private static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
		private static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
		private static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
		private static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
		private static readonly short[][] DFA58_transition;

		static DFA58()
		{
			int numStates = DFA58_transitionS.Length;
			DFA58_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA58_transition[i] = DFA.UnpackEncodedString(DFA58_transitionS[i]);
			}
		}

		public DFA58( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}

		public override string Description { get { return "1232:1: statement returns [SyntaxNode value] options {k=1; } : ({...}? block |{...}?func= functionDeclaration | statementTail );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition58(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA58_1 = input.LA(1);


				int index58_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == LBRACE ))) {s = 38;}

				else if ((true)) {s = 3;}


				input.Seek(index58_1);
				if (s >= 0) return s;
				break;
			case 1:
				int LA58_2 = input.LA(1);


				int index58_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 39;}

				else if ((true)) {s = 3;}


				input.Seek(index58_2);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 58, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\xF\xFFFF";
		private const string DFA59_eofS =
			"\x4\xFFFF\x1\x3\xA\xFFFF";
		private const string DFA59_minS =
			"\x1\x5\x3\xFFFF\x1\x5\xA\xFFFF";
		private const string DFA59_maxS =
			"\x1\xA6\x3\xFFFF\x1\xA9\xA\xFFFF";
		private const string DFA59_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1"+
			"\x9\x1\xB\x1\xC\x1\xD\x1\xA";
		private const string DFA59_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x8\xE\xFFFF\x1\x7\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x6\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x6\x2\xFFFF\x1"+
				"\x3\x5\xFFFF\x1\x3\x1\x5\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x4"+
				"\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x9\x3\xFFFF\x1\x3\x1\xFFFF\x1\x2\xA\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\xB\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xC\x2\xFFFF\x1\x3\x1\xD"+
				"\x1\x3\x2\xFFFF\x1\x1\x1\x3\x2\xFFFF\x1\x6\x1\xA",
				"",
				"",
				"",
				"\x4\x3\x2\xFFFF\x1\x3\xE\xFFFF\x1\xE\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x7\xFFFF\x2\x3\xF\xFFFF\x2\x3\x6\xFFFF\x3\x3\x9\xFFFF"+
				"\x3\x3\x2\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x5\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x2\x3\xC\xFFFF\x2\x3\x6\xFFFF\x4\x3\x1\xFFFF\x4"+
				"\x3\x3\xFFFF\x2\x3\x16\xFFFF\x2\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "1243:1: statementTail returns [SyntaxNode value] : ( variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA90 : DFA
	{
		private const string DFA90_eotS =
			"\x27\xFFFF";
		private const string DFA90_eofS =
			"\x27\xFFFF";
		private const string DFA90_minS =
			"\x1\x5\x1\x0\x25\xFFFF";
		private const string DFA90_maxS =
			"\x1\xA6\x1\x0\x25\xFFFF";
		private const string DFA90_acceptS =
			"\x2\xFFFF\x1\x2\x23\xFFFF\x1\x1";
		private const string DFA90_specialS =
			"\x1\xFFFF\x1\x0\x25\xFFFF}>";
		private static readonly string[] DFA90_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x5\xFFFF\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x1\x5\xFFFF\x2\x2\x3\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\xE\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\xC"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x2\x2\x2\xFFFF"+
				"\x2\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA90_eot = DFA.UnpackEncodedString(DFA90_eotS);
		private static readonly short[] DFA90_eof = DFA.UnpackEncodedString(DFA90_eofS);
		private static readonly char[] DFA90_min = DFA.UnpackEncodedStringToUnsignedChars(DFA90_minS);
		private static readonly char[] DFA90_max = DFA.UnpackEncodedStringToUnsignedChars(DFA90_maxS);
		private static readonly short[] DFA90_accept = DFA.UnpackEncodedString(DFA90_acceptS);
		private static readonly short[] DFA90_special = DFA.UnpackEncodedString(DFA90_specialS);
		private static readonly short[][] DFA90_transition;

		static DFA90()
		{
			int numStates = DFA90_transitionS.Length;
			DFA90_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA90_transition[i] = DFA.UnpackEncodedString(DFA90_transitionS[i]);
			}
		}

		public DFA90( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 90;
			this.eot = DFA90_eot;
			this.eof = DFA90_eof;
			this.min = DFA90_min;
			this.max = DFA90_max;
			this.accept = DFA90_accept;
			this.special = DFA90_special;
			this.transition = DFA90_transition;
		}

		public override string Description { get { return "1948:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition90(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA90_1 = input.LA(1);


				int index90_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 38;}

				else if ((true)) {s = 2;}


				input.Seek(index90_1);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 90, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _reservedWord_in_token1773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_token1778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _punctuator_in_token1783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_token1788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_token1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyword_in_reservedWord1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _futureReservedWord_in_reservedWord1811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_reservedWord1816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_reservedWord1821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_keyword1835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_futureReservedWord1970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_punctuator2250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_literal2508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_literal2517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_literal2526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_literal2535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RegularExpressionLiteral_in_literal2545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_booleanLiteral2562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_booleanLiteral2569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DecimalLiteral_in_numericLiteral2780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OctalIntegerLiteral_in_numericLiteral2789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HexIntegerLiteral_in_numericLiteral2798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression3200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_primaryExpression3209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression3218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression3227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression3236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression3245 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_primaryExpression3249 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_primaryExpression3252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayLiteral3291 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x451410008UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3311 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _COMMA_in_arrayLiteral3357 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x451410008UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3361 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_arrayLiteral3415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_arrayItem3434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_objectLiteral3487 = new BitSet(new ulong[]{0x100000000000UL,0x2004000000008010UL,0x400000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3501 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_objectLiteral3517 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x400000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3531 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_objectLiteral3561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyFunctionAssignment_in_propertyAssignment3587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyValueAssignment_in_propertyAssignment3612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_propertyFunctionAssignment3660 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x400000UL});
		public static readonly BitSet _propertyName_in_propertyFunctionAssignment3682 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _formalParameterList_in_propertyFunctionAssignment3718 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_propertyFunctionAssignment3755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyName_in_propertyValueAssignment3807 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_propertyValueAssignment3827 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_propertyValueAssignment3839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_accessor3877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_propertyName3899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_propertyName3908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_propertyName3917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberExpression3943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionExpression_in_memberExpression3952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments3975 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410009UL});
		public static readonly BitSet _assignmentExpression_in_arguments3981 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _COMMA_in_arguments3987 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_arguments3991 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_arguments4000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_generics4022 = new BitSet(new ulong[]{0x4040100A00000020UL,0x200416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_generics4028 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_generics4034 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_generics4038 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_generics4047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_leftHandSideExpression4096 = new BitSet(new ulong[]{0x4040100000000000UL,0x4120004608010UL,0x11400008UL});
		public static readonly BitSet _memberExpression_in_leftHandSideExpression4130 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _generics_in_leftHandSideExpression4175 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _arguments_in_leftHandSideExpression4224 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _LBRACK_in_leftHandSideExpression4259 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_leftHandSideExpression4263 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_leftHandSideExpression4265 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _DOT_in_leftHandSideExpression4302 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_leftHandSideExpression4306 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression4352 = new BitSet(new ulong[]{0x200000002UL,0x200UL});
		public static readonly BitSet _postfixOperator_in_postfixExpression4360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_postfixOperator4383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixOperator4392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpression4415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryOperator_in_unaryExpression4424 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression4429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELETE_in_unaryOperator4447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_unaryOperator4454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPEOF_in_unaryOperator4461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryOperator4468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryOperator4475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ADD_in_unaryOperator4484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryOperator4493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INV_in_unaryOperator4500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryOperator4507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4535 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _MUL_in_multiplicativeExpression4546 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression4555 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression4563 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4574 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4604 = new BitSet(new ulong[]{0x22UL,0x0UL,0x10000UL});
		public static readonly BitSet _ADD_in_additiveExpression4615 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SUB_in_additiveExpression4623 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4634 = new BitSet(new ulong[]{0x22UL,0x0UL,0x10000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4665 = new BitSet(new ulong[]{0x2UL,0x0UL,0xA40UL});
		public static readonly BitSet _SHL_in_shiftExpression4676 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SHR_in_shiftExpression4684 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SHU_in_shiftExpression4692 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4703 = new BitSet(new ulong[]{0x2UL,0x0UL,0xA40UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4734 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _LT_in_relationalExpression4745 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GT_in_relationalExpression4753 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _LTE_in_relationalExpression4761 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GTE_in_relationalExpression4769 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpression4777 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _IN_in_relationalExpression4785 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4796 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4822 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn4833 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GT_in_relationalExpressionNoIn4841 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _LTE_in_relationalExpressionNoIn4849 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GTE_in_relationalExpressionNoIn4857 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpressionNoIn4865 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4877 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4908 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _EQ_in_equalityExpression4919 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NEQ_in_equalityExpression4927 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SAME_in_equalityExpression4935 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NSAME_in_equalityExpression4943 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4954 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn4980 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _EQ_in_equalityExpressionNoIn4991 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NEQ_in_equalityExpressionNoIn4999 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SAME_in_equalityExpressionNoIn5007 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NSAME_in_equalityExpressionNoIn5015 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn5026 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression5053 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpression5059 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression5064 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5085 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpressionNoIn5091 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5096 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression5119 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpression5125 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression5130 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5153 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpressionNoIn5159 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5164 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression5186 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpression5192 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression5197 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5219 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpressionNoIn5225 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5230 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression5256 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpression5262 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression5267 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5288 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpressionNoIn5294 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5299 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression5321 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpression5327 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression5332 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn5354 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpressionNoIn5360 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn5365 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalORExpression_in_conditionalExpression5392 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpression5398 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression5403 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5405 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression5410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn5431 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpressionNoIn5437 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn5442 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpressionNoIn5444 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn5449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression5490 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x20000021480UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression5537 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression5554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_assignmentOperator5589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_assignmentExpressionNoIn5677 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x20000021480UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpressionNoIn5725 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_assignmentExpressionNoIn5742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression5808 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expression5842 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_expression5858 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn5918 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expressionNoIn5952 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn5968 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _SEMIC_in_semic6021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_semic6026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RBRACE_in_semic6031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOL_in_semic6038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MultiLineComment_in_semic6042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement6076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_statement6087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementTail_in_statement6094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_statementTail6117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statementTail6124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statementTail6131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statementTail6138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iterationStatement_in_statementTail6145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statementTail6152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statementTail6159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statementTail6166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statementTail6173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_statementTail6180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statementTail6187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statementTail6194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statementTail6201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block6240 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_block6264 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _RBRACE_in_block6299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatements6346 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _VAR_in_variableStatement6410 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement6414 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _COMMA_in_variableStatement6448 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement6452 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_variableStatement6487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclaration6517 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclaration6541 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclaration6546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn6612 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclarationNoIn6636 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_variableDeclarationNoIn6641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_emptyStatement6696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement6721 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_expressionStatement6723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifStatement6760 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_ifStatement6762 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_ifStatement6764 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_ifStatement6766 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_ifStatement6770 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _ELSE_in_ifStatement6808 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_ifStatement6812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doStatement_in_iterationStatement6869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_iterationStatement6878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_iterationStatement6888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_doStatement6907 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_doStatement6909 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _WHILE_in_doStatement6911 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_doStatement6913 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_doStatement6915 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_doStatement6917 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_doStatement6919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement6939 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_whileStatement6942 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_whileStatement6945 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_whileStatement6947 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_whileStatement6950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forStatement6987 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_forStatement6998 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x651410028UL});
		public static readonly BitSet _forControl_in_forStatement7011 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_forStatement7031 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_forStatement7036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlVar_in_forControl7071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlExpression_in_forControl7096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlSemic_in_forControl7121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_forControlVar7165 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar7169 = new BitSet(new ulong[]{0x8000000UL,0x100UL,0x20UL});
		public static readonly BitSet _IN_in_forControlVar7203 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlVar7207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_forControlVar7280 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar7284 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlVar7335 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlVar7377 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlVar7436 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlVar7478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionNoIn_in_forControlExpression7564 = new BitSet(new ulong[]{0x0UL,0x100UL,0x20UL});
		public static readonly BitSet _IN_in_forControlExpression7613 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlExpression7617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlExpression7668 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlExpression7710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlExpression7769 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlExpression7811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlSemic7894 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlSemic7920 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlSemic7955 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlSemic7981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_continueStatement8041 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x20UL});
		public static readonly BitSet _Identifier_in_continueStatement8078 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_continueStatement8113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_breakStatement8159 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x20UL});
		public static readonly BitSet _Identifier_in_breakStatement8196 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_breakStatement8219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_returnStatement8265 = new BitSet(new ulong[]{0x4040900A08000020UL,0x200416080460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_returnStatement8302 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_returnStatement8337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withStatement8368 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_withStatement8371 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_withStatement8376 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_withStatement8378 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_withStatement8383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_switchStatement8418 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_switchStatement8420 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_switchStatement8422 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_switchStatement8424 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _LBRACE_in_switchStatement8426 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _defaultClause_in_switchStatement8467 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _caseClause_in_switchStatement8505 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_switchStatement8540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseClause8578 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_caseClause8581 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_caseClause8583 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_caseClause8608 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _DEFAULT_in_defaultClause8672 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_defaultClause8675 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_defaultClause8700 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _Identifier_in_labelledStatement8766 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_labelledStatement8768 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_labelledStatement8772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_throwStatement8804 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_throwStatement8811 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_throwStatement8815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_tryStatement8848 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_tryStatement8853 = new BitSet(new ulong[]{0x200000000400000UL});
		public static readonly BitSet _catchClause_in_tryStatement8879 = new BitSet(new ulong[]{0x200000000400002UL});
		public static readonly BitSet _finallyClause_in_tryStatement8927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_tryStatement8986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_in_catchClause9048 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_catchClause9051 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_catchClause9056 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_catchClause9058 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_catchClause9061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause9095 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_finallyClause9098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionDeclaration9151 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_functionDeclaration9155 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionDeclaration9172 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionDeclaration9186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionExpression9229 = new BitSet(new ulong[]{0x0UL,0x4008000UL});
		public static readonly BitSet _Identifier_in_functionExpression9255 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionExpression9290 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionExpression9310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_formalParameterList9348 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x1UL});
		public static readonly BitSet _Identifier_in_formalParameterList9374 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _COMMA_in_formalParameterList9420 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_formalParameterList9424 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_formalParameterList9478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_functionBody9511 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _sourceElement_in_functionBody9535 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _RBRACE_in_functionBody9570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sourceElement_in_program9618 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _functionDeclaration_in_sourceElement9688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_sourceElement9697 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace  Jint.Parser 
