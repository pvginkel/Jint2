//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\ES3.g 2013-12-14 12:01:12

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System;
using System.Text;
using System.Globalization;
using Jint.Expressions;


using System.Collections.Generic;
using Antlr.Runtime;

namespace  Jint.Parser 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
internal partial class ES3Parser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "ADD", "ADDASS", "AND", "ANDASS", "ARGS", "ARRAY", "ASSIGN", "BLOCK", "BOOLEAN", "BREAK", "BSLASH", "BYFIELD", "BYINDEX", "BYTE", "BackslashSequence", "CALL", "CASE", "CATCH", "CEXPR", "CHAR", "CLASS", "COLON", "COMMA", "CONST", "CONTINUE", "CR", "CharacterEscapeSequence", "DEBUGGER", "DEC", "DEFAULT", "DELETE", "DIV", "DIVASS", "DO", "DOT", "DOUBLE", "DQUOTE", "DecimalDigit", "DecimalIntegerLiteral", "DecimalLiteral", "ELSE", "ENUM", "EOL", "EQ", "EXPORT", "EXPR", "EXTENDS", "EscapeSequence", "ExponentPart", "FALSE", "FF", "FINAL", "FINALLY", "FLOAT", "FOR", "FORITER", "FORSTEP", "FUNCTION", "GOTO", "GT", "GTE", "HexDigit", "HexEscapeSequence", "HexIntegerLiteral", "IF", "IMPLEMENTS", "IMPORT", "IN", "INC", "INSTANCEOF", "INT", "INTERFACE", "INV", "ITEM", "Identifier", "IdentifierNameASCIIStart", "IdentifierPart", "IdentifierStartASCII", "LABELLED", "LAND", "LBRACE", "LBRACK", "LF", "LONG", "LOR", "LPAREN", "LS", "LT", "LTE", "LineTerminator", "MOD", "MODASS", "MUL", "MULASS", "MultiLineComment", "NAMEDVALUE", "NATIVE", "NBSP", "NEG", "NEQ", "NEW", "NOT", "NSAME", "NULL", "OBJECT", "OR", "ORASS", "OctalDigit", "OctalEscapeSequence", "OctalIntegerLiteral", "PACKAGE", "PAREXPR", "PDEC", "PINC", "POS", "PRIVATE", "PROTECTED", "PS", "PUBLIC", "QUE", "RBRACE", "RBRACK", "REF", "RETURN", "RPAREN", "RegularExpressionChar", "RegularExpressionFirstChar", "RegularExpressionLiteral", "SAME", "SEMIC", "SHL", "SHLASS", "SHORT", "SHR", "SHRASS", "SHU", "SHUASS", "SP", "SQUOTE", "STATIC", "SUB", "SUBASS", "SUPER", "SWITCH", "SYNCHRONIZED", "SingleLineComment", "StringLiteral", "TAB", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "TYPEOF", "USP", "UnicodeEscapeSequence", "VAR", "VOID", "VOLATILE", "VT", "WHILE", "WITH", "WhiteSpace", "XOR", "XORASS", "ZeroToThree"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int ADD=5;
	public const int ADDASS=6;
	public const int AND=7;
	public const int ANDASS=8;
	public const int ARGS=9;
	public const int ARRAY=10;
	public const int ASSIGN=11;
	public const int BLOCK=12;
	public const int BOOLEAN=13;
	public const int BREAK=14;
	public const int BSLASH=15;
	public const int BYFIELD=16;
	public const int BYINDEX=17;
	public const int BYTE=18;
	public const int BackslashSequence=19;
	public const int CALL=20;
	public const int CASE=21;
	public const int CATCH=22;
	public const int CEXPR=23;
	public const int CHAR=24;
	public const int CLASS=25;
	public const int COLON=26;
	public const int COMMA=27;
	public const int CONST=28;
	public const int CONTINUE=29;
	public const int CR=30;
	public const int CharacterEscapeSequence=31;
	public const int DEBUGGER=32;
	public const int DEC=33;
	public const int DEFAULT=34;
	public const int DELETE=35;
	public const int DIV=36;
	public const int DIVASS=37;
	public const int DO=38;
	public const int DOT=39;
	public const int DOUBLE=40;
	public const int DQUOTE=41;
	public const int DecimalDigit=42;
	public const int DecimalIntegerLiteral=43;
	public const int DecimalLiteral=44;
	public const int ELSE=45;
	public const int ENUM=46;
	public const int EOL=47;
	public const int EQ=48;
	public const int EXPORT=49;
	public const int EXPR=50;
	public const int EXTENDS=51;
	public const int EscapeSequence=52;
	public const int ExponentPart=53;
	public const int FALSE=54;
	public const int FF=55;
	public const int FINAL=56;
	public const int FINALLY=57;
	public const int FLOAT=58;
	public const int FOR=59;
	public const int FORITER=60;
	public const int FORSTEP=61;
	public const int FUNCTION=62;
	public const int GOTO=63;
	public const int GT=64;
	public const int GTE=65;
	public const int HexDigit=66;
	public const int HexEscapeSequence=67;
	public const int HexIntegerLiteral=68;
	public const int IF=69;
	public const int IMPLEMENTS=70;
	public const int IMPORT=71;
	public const int IN=72;
	public const int INC=73;
	public const int INSTANCEOF=74;
	public const int INT=75;
	public const int INTERFACE=76;
	public const int INV=77;
	public const int ITEM=78;
	public const int Identifier=79;
	public const int IdentifierNameASCIIStart=80;
	public const int IdentifierPart=81;
	public const int IdentifierStartASCII=82;
	public const int LABELLED=83;
	public const int LAND=84;
	public const int LBRACE=85;
	public const int LBRACK=86;
	public const int LF=87;
	public const int LONG=88;
	public const int LOR=89;
	public const int LPAREN=90;
	public const int LS=91;
	public const int LT=92;
	public const int LTE=93;
	public const int LineTerminator=94;
	public const int MOD=95;
	public const int MODASS=96;
	public const int MUL=97;
	public const int MULASS=98;
	public const int MultiLineComment=99;
	public const int NAMEDVALUE=100;
	public const int NATIVE=101;
	public const int NBSP=102;
	public const int NEG=103;
	public const int NEQ=104;
	public const int NEW=105;
	public const int NOT=106;
	public const int NSAME=107;
	public const int NULL=108;
	public const int OBJECT=109;
	public const int OR=110;
	public const int ORASS=111;
	public const int OctalDigit=112;
	public const int OctalEscapeSequence=113;
	public const int OctalIntegerLiteral=114;
	public const int PACKAGE=115;
	public const int PAREXPR=116;
	public const int PDEC=117;
	public const int PINC=118;
	public const int POS=119;
	public const int PRIVATE=120;
	public const int PROTECTED=121;
	public const int PS=122;
	public const int PUBLIC=123;
	public const int QUE=124;
	public const int RBRACE=125;
	public const int RBRACK=126;
	public const int REF=127;
	public const int RETURN=128;
	public const int RPAREN=129;
	public const int RegularExpressionChar=130;
	public const int RegularExpressionFirstChar=131;
	public const int RegularExpressionLiteral=132;
	public const int SAME=133;
	public const int SEMIC=134;
	public const int SHL=135;
	public const int SHLASS=136;
	public const int SHORT=137;
	public const int SHR=138;
	public const int SHRASS=139;
	public const int SHU=140;
	public const int SHUASS=141;
	public const int SP=142;
	public const int SQUOTE=143;
	public const int STATIC=144;
	public const int SUB=145;
	public const int SUBASS=146;
	public const int SUPER=147;
	public const int SWITCH=148;
	public const int SYNCHRONIZED=149;
	public const int SingleLineComment=150;
	public const int StringLiteral=151;
	public const int TAB=152;
	public const int THIS=153;
	public const int THROW=154;
	public const int THROWS=155;
	public const int TRANSIENT=156;
	public const int TRUE=157;
	public const int TRY=158;
	public const int TYPEOF=159;
	public const int USP=160;
	public const int UnicodeEscapeSequence=161;
	public const int VAR=162;
	public const int VOID=163;
	public const int VOLATILE=164;
	public const int VT=165;
	public const int WHILE=166;
	public const int WITH=167;
	public const int WhiteSpace=168;
	public const int XOR=169;
	public const int XORASS=170;
	public const int ZeroToThree=171;

	// delegates
	// delegators

	public ES3Parser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public ES3Parser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
		

	public override string[] TokenNames { get { return ES3Parser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\ES3.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules

	partial void EnterRule_token();
	partial void LeaveRule_token();

	// $ANTLR start "token"
	// ..\\ES3.g:313:1: token : ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral );
	[GrammarRule("token")]
	private void token()
	{
		EnterRule_token();
		EnterRule("token", 1);
		TraceIn("token", 1);
		try { DebugEnterRule(GrammarFileName, "token");
		DebugLocation(313, 1);
		try
		{
			// ..\\ES3.g:314:2: ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral )
			int alt1=5;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case ABSTRACT:
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DEBUGGER:
			case DEFAULT:
			case DELETE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FALSE:
			case FINAL:
			case FINALLY:
			case FLOAT:
			case FOR:
			case FUNCTION:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case IMPORT:
			case IN:
			case INSTANCEOF:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case NEW:
			case NULL:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case RETURN:
			case SHORT:
			case STATIC:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case THIS:
			case THROW:
			case THROWS:
			case TRANSIENT:
			case TRUE:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WITH:
				{
				alt1 = 1;
				}
				break;
			case Identifier:
				{
				alt1 = 2;
				}
				break;
			case ADD:
			case ADDASS:
			case AND:
			case ANDASS:
			case ASSIGN:
			case COLON:
			case COMMA:
			case DEC:
			case DIV:
			case DIVASS:
			case DOT:
			case EQ:
			case GT:
			case GTE:
			case INC:
			case INV:
			case LAND:
			case LBRACE:
			case LBRACK:
			case LOR:
			case LPAREN:
			case LT:
			case LTE:
			case MOD:
			case MODASS:
			case MUL:
			case MULASS:
			case NEQ:
			case NOT:
			case NSAME:
			case OR:
			case ORASS:
			case QUE:
			case RBRACE:
			case RBRACK:
			case RPAREN:
			case SAME:
			case SEMIC:
			case SHL:
			case SHLASS:
			case SHR:
			case SHRASS:
			case SHU:
			case SHUASS:
			case SUB:
			case SUBASS:
			case XOR:
			case XORASS:
				{
				alt1 = 3;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt1 = 4;
				}
				break;
			case StringLiteral:
				{
				alt1 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:314:4: reservedWord
				{
				DebugLocation(314, 4);
				PushFollow(Follow._reservedWord_in_token1765);
				reservedWord();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:315:4: Identifier
				{
				DebugLocation(315, 4);
				Match(input,Identifier,Follow._Identifier_in_token1770); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:316:4: punctuator
				{
				DebugLocation(316, 4);
				PushFollow(Follow._punctuator_in_token1775);
				punctuator();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:317:4: numericLiteral
				{
				DebugLocation(317, 4);
				PushFollow(Follow._numericLiteral_in_token1780);
				numericLiteral();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:318:4: StringLiteral
				{
				DebugLocation(318, 4);
				Match(input,StringLiteral,Follow._StringLiteral_in_token1785); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("token", 1);
			LeaveRule("token", 1);
			LeaveRule_token();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "token"); }
		return;

	}
	// $ANTLR end "token"


	partial void EnterRule_reservedWord();
	partial void LeaveRule_reservedWord();

	// $ANTLR start "reservedWord"
	// ..\\ES3.g:323:1: reservedWord : ( keyword | futureReservedWord | NULL | booleanLiteral );
	[GrammarRule("reservedWord")]
	private void reservedWord()
	{
		EnterRule_reservedWord();
		EnterRule("reservedWord", 2);
		TraceIn("reservedWord", 2);
		try { DebugEnterRule(GrammarFileName, "reservedWord");
		DebugLocation(323, 1);
		try
		{
			// ..\\ES3.g:324:2: ( keyword | futureReservedWord | NULL | booleanLiteral )
			int alt2=4;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case BREAK:
			case CASE:
			case CATCH:
			case CONTINUE:
			case DEFAULT:
			case DELETE:
			case DO:
			case ELSE:
			case FINALLY:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INSTANCEOF:
			case NEW:
			case RETURN:
			case SWITCH:
			case THIS:
			case THROW:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case WHILE:
			case WITH:
				{
				alt2 = 1;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DEBUGGER:
			case DOUBLE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FINAL:
			case FLOAT:
			case GOTO:
			case IMPLEMENTS:
			case IMPORT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case SUPER:
			case SYNCHRONIZED:
			case THROWS:
			case TRANSIENT:
			case VOLATILE:
				{
				alt2 = 2;
				}
				break;
			case NULL:
				{
				alt2 = 3;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:324:4: keyword
				{
				DebugLocation(324, 4);
				PushFollow(Follow._keyword_in_reservedWord1798);
				keyword();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:325:4: futureReservedWord
				{
				DebugLocation(325, 4);
				PushFollow(Follow._futureReservedWord_in_reservedWord1803);
				futureReservedWord();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:326:4: NULL
				{
				DebugLocation(326, 4);
				Match(input,NULL,Follow._NULL_in_reservedWord1808); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:327:4: booleanLiteral
				{
				DebugLocation(327, 4);
				PushFollow(Follow._booleanLiteral_in_reservedWord1813);
				booleanLiteral();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("reservedWord", 2);
			LeaveRule("reservedWord", 2);
			LeaveRule_reservedWord();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "reservedWord"); }
		return;

	}
	// $ANTLR end "reservedWord"


	partial void EnterRule_keyword();
	partial void LeaveRule_keyword();

	// $ANTLR start "keyword"
	// ..\\ES3.g:334:1: keyword : ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH );
	[GrammarRule("keyword")]
	private void keyword()
	{
		EnterRule_keyword();
		EnterRule("keyword", 3);
		TraceIn("keyword", 3);
		try { DebugEnterRule(GrammarFileName, "keyword");
		DebugLocation(334, 1);
		try
		{
			// ..\\ES3.g:335:2: ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(335, 2);
			if (input.LA(1)==BREAK||(input.LA(1)>=CASE && input.LA(1)<=CATCH)||input.LA(1)==CONTINUE||(input.LA(1)>=DEFAULT && input.LA(1)<=DELETE)||input.LA(1)==DO||input.LA(1)==ELSE||input.LA(1)==FINALLY||input.LA(1)==FOR||input.LA(1)==FUNCTION||input.LA(1)==IF||input.LA(1)==IN||input.LA(1)==INSTANCEOF||input.LA(1)==NEW||input.LA(1)==RETURN||input.LA(1)==SWITCH||(input.LA(1)>=THIS && input.LA(1)<=THROW)||(input.LA(1)>=TRY && input.LA(1)<=TYPEOF)||(input.LA(1)>=VAR && input.LA(1)<=VOID)||(input.LA(1)>=WHILE && input.LA(1)<=WITH))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("keyword", 3);
			LeaveRule("keyword", 3);
			LeaveRule_keyword();
		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "keyword"); }
		return;

	}
	// $ANTLR end "keyword"


	partial void EnterRule_futureReservedWord();
	partial void LeaveRule_futureReservedWord();

	// $ANTLR start "futureReservedWord"
	// ..\\ES3.g:366:1: futureReservedWord : ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE );
	[GrammarRule("futureReservedWord")]
	private void futureReservedWord()
	{
		EnterRule_futureReservedWord();
		EnterRule("futureReservedWord", 4);
		TraceIn("futureReservedWord", 4);
		try { DebugEnterRule(GrammarFileName, "futureReservedWord");
		DebugLocation(366, 1);
		try
		{
			// ..\\ES3.g:367:2: ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(367, 2);
			if (input.LA(1)==ABSTRACT||input.LA(1)==BOOLEAN||input.LA(1)==BYTE||(input.LA(1)>=CHAR && input.LA(1)<=CLASS)||input.LA(1)==CONST||input.LA(1)==DEBUGGER||input.LA(1)==DOUBLE||input.LA(1)==ENUM||input.LA(1)==EXPORT||input.LA(1)==EXTENDS||input.LA(1)==FINAL||input.LA(1)==FLOAT||input.LA(1)==GOTO||(input.LA(1)>=IMPLEMENTS && input.LA(1)<=IMPORT)||(input.LA(1)>=INT && input.LA(1)<=INTERFACE)||input.LA(1)==LONG||input.LA(1)==NATIVE||input.LA(1)==PACKAGE||(input.LA(1)>=PRIVATE && input.LA(1)<=PROTECTED)||input.LA(1)==PUBLIC||input.LA(1)==SHORT||input.LA(1)==STATIC||input.LA(1)==SUPER||input.LA(1)==SYNCHRONIZED||(input.LA(1)>=THROWS && input.LA(1)<=TRANSIENT)||input.LA(1)==VOLATILE)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("futureReservedWord", 4);
			LeaveRule("futureReservedWord", 4);
			LeaveRule_futureReservedWord();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "futureReservedWord"); }
		return;

	}
	// $ANTLR end "futureReservedWord"


	partial void EnterRule_punctuator();
	partial void LeaveRule_punctuator();

	// $ANTLR start "punctuator"
	// ..\\ES3.g:452:1: punctuator : ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS );
	[GrammarRule("punctuator")]
	private void punctuator()
	{
		EnterRule_punctuator();
		EnterRule("punctuator", 5);
		TraceIn("punctuator", 5);
		try { DebugEnterRule(GrammarFileName, "punctuator");
		DebugLocation(452, 1);
		try
		{
			// ..\\ES3.g:453:2: ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(453, 2);
			if ((input.LA(1)>=ADD && input.LA(1)<=ANDASS)||input.LA(1)==ASSIGN||(input.LA(1)>=COLON && input.LA(1)<=COMMA)||input.LA(1)==DEC||(input.LA(1)>=DIV && input.LA(1)<=DIVASS)||input.LA(1)==DOT||input.LA(1)==EQ||(input.LA(1)>=GT && input.LA(1)<=GTE)||input.LA(1)==INC||input.LA(1)==INV||(input.LA(1)>=LAND && input.LA(1)<=LBRACK)||(input.LA(1)>=LOR && input.LA(1)<=LPAREN)||(input.LA(1)>=LT && input.LA(1)<=LTE)||(input.LA(1)>=MOD && input.LA(1)<=MULASS)||input.LA(1)==NEQ||(input.LA(1)>=NOT && input.LA(1)<=NSAME)||(input.LA(1)>=OR && input.LA(1)<=ORASS)||(input.LA(1)>=QUE && input.LA(1)<=RBRACK)||input.LA(1)==RPAREN||(input.LA(1)>=SAME && input.LA(1)<=SHLASS)||(input.LA(1)>=SHR && input.LA(1)<=SHUASS)||(input.LA(1)>=SUB && input.LA(1)<=SUBASS)||(input.LA(1)>=XOR && input.LA(1)<=XORASS))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("punctuator", 5);
			LeaveRule("punctuator", 5);
			LeaveRule_punctuator();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "punctuator"); }
		return;

	}
	// $ANTLR end "punctuator"


	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// ..\\ES3.g:507:1: literal returns [ExpressionSyntax value] : (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral );
	[GrammarRule("literal")]
	private ExpressionSyntax literal()
	{
		EnterRule_literal();
		EnterRule("literal", 6);
		TraceIn("literal", 6);
		ExpressionSyntax value = default(ExpressionSyntax);

		IToken exp1 = default(IToken);
		IToken exp4 = default(IToken);
		IToken exp5 = default(IToken);
		bool exp2 = default(bool);
		double exp3 = default(double);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(507, 1);
		try
		{
			// ..\\ES3.g:508:2: (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral )
			int alt3=5;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case NULL:
				{
				alt3 = 1;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt3 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt3 = 3;
				}
				break;
			case StringLiteral:
				{
				alt3 = 4;
				}
				break;
			case RegularExpressionLiteral:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:508:4: exp1= NULL
				{
				DebugLocation(508, 8);
				exp1=(IToken)Match(input,NULL,Follow._NULL_in_literal2505); 
				DebugLocation(508, 14);
				 value = new IdentifierSyntax(exp1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:509:4: exp2= booleanLiteral
				{
				DebugLocation(509, 8);
				PushFollow(Follow._booleanLiteral_in_literal2514);
				exp2=booleanLiteral();
				PopFollow();

				DebugLocation(509, 24);
				 value = new ValueSyntax(exp2); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:510:4: exp3= numericLiteral
				{
				DebugLocation(510, 8);
				PushFollow(Follow._numericLiteral_in_literal2523);
				exp3=numericLiteral();
				PopFollow();

				DebugLocation(510, 24);
				 value = new ValueSyntax(exp3); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:511:4: exp4= StringLiteral
				{
				DebugLocation(511, 8);
				exp4=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_literal2532); 
				DebugLocation(511, 24);
				 value = new ValueSyntax(ExtractString(exp4.Text)); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:512:4: exp5= RegularExpressionLiteral
				{
				DebugLocation(512, 8);
				exp5=(IToken)Match(input,RegularExpressionLiteral,Follow._RegularExpressionLiteral_in_literal2542); 
				DebugLocation(512, 34);
				 value = new RegexpSyntax(ExtractRegExpPattern(exp5.Text), ExtractRegExpOption(exp5.Text)); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 6);
			LeaveRule("literal", 6);
			LeaveRule_literal();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return value;

	}
	// $ANTLR end "literal"


	partial void EnterRule_booleanLiteral();
	partial void LeaveRule_booleanLiteral();

	// $ANTLR start "booleanLiteral"
	// ..\\ES3.g:515:1: booleanLiteral returns [bool value] : ( TRUE | FALSE );
	[GrammarRule("booleanLiteral")]
	private bool booleanLiteral()
	{
		EnterRule_booleanLiteral();
		EnterRule("booleanLiteral", 7);
		TraceIn("booleanLiteral", 7);
		bool value = default(bool);

		try { DebugEnterRule(GrammarFileName, "booleanLiteral");
		DebugLocation(515, 1);
		try
		{
			// ..\\ES3.g:516:2: ( TRUE | FALSE )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==TRUE))
			{
				alt4 = 1;
			}
			else if ((LA4_0==FALSE))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:516:4: TRUE
				{
				DebugLocation(516, 4);
				Match(input,TRUE,Follow._TRUE_in_booleanLiteral2559); 
				DebugLocation(516, 9);
				 value = true; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:517:4: FALSE
				{
				DebugLocation(517, 4);
				Match(input,FALSE,Follow._FALSE_in_booleanLiteral2566); 
				DebugLocation(517, 10);
				 value = false; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("booleanLiteral", 7);
			LeaveRule("booleanLiteral", 7);
			LeaveRule_booleanLiteral();
		}
		DebugLocation(518, 1);
		} finally { DebugExitRule(GrammarFileName, "booleanLiteral"); }
		return value;

	}
	// $ANTLR end "booleanLiteral"


	partial void EnterRule_numericLiteral();
	partial void LeaveRule_numericLiteral();

	// $ANTLR start "numericLiteral"
	// ..\\ES3.g:562:1: numericLiteral returns [double value] : (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral );
	[GrammarRule("numericLiteral")]
	private double numericLiteral()
	{
		EnterRule_numericLiteral();
		EnterRule("numericLiteral", 8);
		TraceIn("numericLiteral", 8);
		double value = default(double);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken ex3 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "numericLiteral");
		DebugLocation(562, 1);
		try
		{
			// ..\\ES3.g:563:2: (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case DecimalLiteral:
				{
				alt5 = 1;
				}
				break;
			case OctalIntegerLiteral:
				{
				alt5 = 2;
				}
				break;
			case HexIntegerLiteral:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:563:4: ex1= DecimalLiteral
				{
				DebugLocation(563, 7);
				ex1=(IToken)Match(input,DecimalLiteral,Follow._DecimalLiteral_in_numericLiteral2777); 
				DebugLocation(563, 23);
				 value = double.Parse(ex1.Text, NumberStyles.Float, _numberFormatInfo); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:564:4: ex2= OctalIntegerLiteral
				{
				DebugLocation(564, 7);
				ex2=(IToken)Match(input,OctalIntegerLiteral,Follow._OctalIntegerLiteral_in_numericLiteral2786); 
				DebugLocation(564, 28);
				 value = System.Convert.ToInt64(ex2.Text, 8); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:565:4: ex3= HexIntegerLiteral
				{
				DebugLocation(565, 7);
				ex3=(IToken)Match(input,HexIntegerLiteral,Follow._HexIntegerLiteral_in_numericLiteral2795); 
				DebugLocation(565, 26);
				 value = System.Convert.ToInt64(ex3.Text, 16); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericLiteral", 8);
			LeaveRule("numericLiteral", 8);
			LeaveRule_numericLiteral();
		}
		DebugLocation(566, 1);
		} finally { DebugExitRule(GrammarFileName, "numericLiteral"); }
		return value;

	}
	// $ANTLR end "numericLiteral"


	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// ..\\ES3.g:652:1: primaryExpression returns [ExpressionSyntax value] : (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN );
	[GrammarRule("primaryExpression")]
	private ExpressionSyntax primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 9);
		TraceIn("primaryExpression", 9);
		ExpressionSyntax value = default(ExpressionSyntax);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken lpar = default(IToken);
		ExpressionSyntax ex3 = default(ExpressionSyntax);
		ArrayDeclarationSyntax ex4 = default(ArrayDeclarationSyntax);
		JsonExpressionSyntax ex5 = default(JsonExpressionSyntax);
		ExpressionSyntax ex6 = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(652, 1);
		try
		{
			// ..\\ES3.g:653:2: (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN )
			int alt6=6;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				alt6 = 1;
				}
				break;
			case Identifier:
				{
				alt6 = 2;
				}
				break;
			case DecimalLiteral:
			case FALSE:
			case HexIntegerLiteral:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case TRUE:
				{
				alt6 = 3;
				}
				break;
			case LBRACK:
				{
				alt6 = 4;
				}
				break;
			case LBRACE:
				{
				alt6 = 5;
				}
				break;
			case LPAREN:
				{
				alt6 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:653:4: ex1= THIS
				{
				DebugLocation(653, 7);
				ex1=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression3209); 
				DebugLocation(653, 13);
				 value = new IdentifierSyntax(ex1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:654:4: ex2= Identifier
				{
				DebugLocation(654, 7);
				ex2=(IToken)Match(input,Identifier,Follow._Identifier_in_primaryExpression3218); 
				DebugLocation(654, 19);
				 value = new IdentifierSyntax(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:655:4: ex3= literal
				{
				DebugLocation(655, 7);
				PushFollow(Follow._literal_in_primaryExpression3227);
				ex3=literal();
				PopFollow();

				DebugLocation(655, 16);
				 value = ex3; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:656:4: ex4= arrayLiteral
				{
				DebugLocation(656, 7);
				PushFollow(Follow._arrayLiteral_in_primaryExpression3236);
				ex4=arrayLiteral();
				PopFollow();

				DebugLocation(656, 21);
				 value = ex4; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:657:4: ex5= objectLiteral
				{
				DebugLocation(657, 7);
				PushFollow(Follow._objectLiteral_in_primaryExpression3245);
				ex5=objectLiteral();
				PopFollow();

				DebugLocation(657, 22);
				 value = ex5; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:658:4: lpar= LPAREN ex6= expression RPAREN
				{
				DebugLocation(658, 8);
				lpar=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression3254); 
				DebugLocation(658, 19);
				PushFollow(Follow._expression_in_primaryExpression3258);
				ex6=expression();
				PopFollow();

				DebugLocation(658, 32);
				Match(input,RPAREN,Follow._RPAREN_in_primaryExpression3261); 
				DebugLocation(658, 40);
				 value = ex6; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 9);
			LeaveRule("primaryExpression", 9);
			LeaveRule_primaryExpression();
		}
		DebugLocation(659, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return value;

	}
	// $ANTLR end "primaryExpression"


	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();

	// $ANTLR start "arrayLiteral"
	// ..\\ES3.g:661:1: arrayLiteral returns [ArrayDeclarationSyntax value] : lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK ;
	[GrammarRule("arrayLiteral")]
	private ArrayDeclarationSyntax arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 10);
		TraceIn("arrayLiteral", 10);
		ArrayDeclarationSyntax value = default(ArrayDeclarationSyntax);

		IToken lb = default(IToken);
		SyntaxNode first = default(SyntaxNode);
		SyntaxNode follow = default(SyntaxNode);


		    var parameters = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(661, 1);
		try
		{
			// ..\\ES3.g:668:2: (lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK )
			DebugEnterAlt(1);
			// ..\\ES3.g:669:9: lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK
			{
			DebugLocation(669, 11);
			lb=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayLiteral3300); 
			DebugLocation(670, 3);
			// ..\\ES3.g:670:3: (first= arrayItem ( COMMA follow= arrayItem )* )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==ADD||LA8_0==COMMA||LA8_0==DEC||LA8_0==DELETE||LA8_0==DecimalLiteral||LA8_0==FALSE||LA8_0==FUNCTION||LA8_0==HexIntegerLiteral||LA8_0==INC||LA8_0==INV||LA8_0==Identifier||(LA8_0>=LBRACE && LA8_0<=LBRACK)||LA8_0==LPAREN||(LA8_0>=NEW && LA8_0<=NOT)||LA8_0==NULL||LA8_0==OctalIntegerLiteral||LA8_0==RegularExpressionLiteral||LA8_0==SUB||LA8_0==StringLiteral||LA8_0==THIS||LA8_0==TRUE||LA8_0==TYPEOF||LA8_0==VOID))
			{
				alt8 = 1;
			}
			else if ((LA8_0==RBRACK))
			{
				int LA8_2 = input.LA(2);

				if (((( input.LA(1) == COMMA )||( input.LA(1) == RBRACK ))))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:671:13: first= arrayItem ( COMMA follow= arrayItem )*
				{
				DebugLocation(671, 18);
				PushFollow(Follow._arrayItem_in_arrayLiteral3320);
				first=arrayItem();
				PopFollow();

				DebugLocation(672, 13);
				 if(first != null) parameters.Add(first); 
				DebugLocation(673, 13);
				// ..\\ES3.g:673:13: ( COMMA follow= arrayItem )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==COMMA))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:674:17: COMMA follow= arrayItem
						{
						DebugLocation(674, 17);
						Match(input,COMMA,Follow._COMMA_in_arrayLiteral3366); 
						DebugLocation(674, 29);
						PushFollow(Follow._arrayItem_in_arrayLiteral3370);
						follow=arrayItem();
						PopFollow();

						DebugLocation(675, 17);
						 if(follow != null) parameters.Add(follow); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(678, 9);
			Match(input,RBRACK,Follow._RBRACK_in_arrayLiteral3424); 

			}


				value = new ArrayDeclarationSyntax(parameters);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayLiteral", 10);
			LeaveRule("arrayLiteral", 10);
			LeaveRule_arrayLiteral();
		}
		DebugLocation(679, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return value;

	}
	// $ANTLR end "arrayLiteral"


	partial void EnterRule_arrayItem();
	partial void LeaveRule_arrayItem();

	// $ANTLR start "arrayItem"
	// ..\\ES3.g:681:1: arrayItem returns [SyntaxNode value] : (expr= assignmentExpression |{...}?|{...}?) ;
	[GrammarRule("arrayItem")]
	private SyntaxNode arrayItem()
	{
		EnterRule_arrayItem();
		EnterRule("arrayItem", 11);
		TraceIn("arrayItem", 11);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax expr = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "arrayItem");
		DebugLocation(681, 1);
		try
		{
			// ..\\ES3.g:682:2: ( (expr= assignmentExpression |{...}?|{...}?) )
			DebugEnterAlt(1);
			// ..\\ES3.g:682:4: (expr= assignmentExpression |{...}?|{...}?)
			{
			DebugLocation(682, 4);
			// ..\\ES3.g:682:4: (expr= assignmentExpression |{...}?|{...}?)
			int alt9=3;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt9 = 1;
				}
				break;
			case COMMA:
				{
				int LA9_2 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RBRACK:
				{
				int LA9_3 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:682:6: expr= assignmentExpression
				{
				DebugLocation(682, 10);
				PushFollow(Follow._assignmentExpression_in_arrayItem3443);
				expr=assignmentExpression();
				PopFollow();

				DebugLocation(682, 33);
				 value = expr; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:682:54: {...}?
				{
				DebugLocation(682, 54);
				if (!(( input.LA(1) == COMMA )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == COMMA ");
				}
				DebugLocation(682, 80);
				 value = new IdentifierSyntax("undefined"); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:682:130: {...}?
				{
				DebugLocation(682, 130);
				if (!(( input.LA(1) == RBRACK )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == RBRACK ");
				}
				DebugLocation(682, 157);
				 value = null; 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayItem", 11);
			LeaveRule("arrayItem", 11);
			LeaveRule_arrayItem();
		}
		DebugLocation(684, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayItem"); }
		return value;

	}
	// $ANTLR end "arrayItem"


	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();

	// $ANTLR start "objectLiteral"
	// ..\\ES3.g:686:1: objectLiteral returns [JsonExpressionSyntax value] : lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE ;
	[GrammarRule("objectLiteral")]
	private JsonExpressionSyntax objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 12);
		TraceIn("objectLiteral", 12);
		JsonExpressionSyntax value = default(JsonExpressionSyntax);

		IToken lb = default(IToken);
		PropertyDeclaration first = default(PropertyDeclaration);
		PropertyDeclaration follow = default(PropertyDeclaration);


		    var builder = new JsonPropertyBuilder();

		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(686, 1);
		try
		{
			// ..\\ES3.g:693:2: (lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:694:7: lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE
			{
			DebugLocation(694, 9);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_objectLiteral3496); 
			DebugLocation(694, 17);
			// ..\\ES3.g:694:17: (first= propertyAssignment ( COMMA follow= propertyAssignment )* )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==DecimalLiteral||LA11_0==HexIntegerLiteral||LA11_0==Identifier||LA11_0==OctalIntegerLiteral||LA11_0==StringLiteral))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:695:9: first= propertyAssignment ( COMMA follow= propertyAssignment )*
				{
				DebugLocation(695, 14);
				PushFollow(Follow._propertyAssignment_in_objectLiteral3510);
				first=propertyAssignment();
				PopFollow();

				DebugLocation(695, 34);
				 builder.AddProperty(first); 
				DebugLocation(695, 66);
				// ..\\ES3.g:695:66: ( COMMA follow= propertyAssignment )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==COMMA))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:696:11: COMMA follow= propertyAssignment
						{
						DebugLocation(696, 11);
						Match(input,COMMA,Follow._COMMA_in_objectLiteral3526); 
						DebugLocation(697, 17);
						PushFollow(Follow._propertyAssignment_in_objectLiteral3540);
						follow=propertyAssignment();
						PopFollow();

						DebugLocation(697, 37);
						 builder.AddProperty(follow); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(700, 7);
			Match(input,RBRACE,Follow._RBRACE_in_objectLiteral3570); 

			}


				value = new JsonExpressionSyntax(builder.GetProperties());

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("objectLiteral", 12);
			LeaveRule("objectLiteral", 12);
			LeaveRule_objectLiteral();
		}
		DebugLocation(701, 1);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return value;

	}
	// $ANTLR end "objectLiteral"


	partial void EnterRule_propertyAssignment();
	partial void LeaveRule_propertyAssignment();

	// $ANTLR start "propertyAssignment"
	// ..\\ES3.g:703:1: propertyAssignment returns [PropertyDeclaration value] : (func= propertyFunctionAssignment |data= propertyValueAssignment );
	[GrammarRule("propertyAssignment")]
	private PropertyDeclaration propertyAssignment()
	{
		EnterRule_propertyAssignment();
		EnterRule("propertyAssignment", 13);
		TraceIn("propertyAssignment", 13);
		PropertyDeclaration value = default(PropertyDeclaration);

		PropertyDeclaration func = default(PropertyDeclaration);
		PropertyDeclaration data = default(PropertyDeclaration);

		try { DebugEnterRule(GrammarFileName, "propertyAssignment");
		DebugLocation(703, 1);
		try
		{
			// ..\\ES3.g:704:2: (func= propertyFunctionAssignment |data= propertyValueAssignment )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Identifier))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==DecimalLiteral||LA12_1==HexIntegerLiteral||LA12_1==Identifier||LA12_1==OctalIntegerLiteral||LA12_1==StringLiteral))
				{
					alt12 = 1;
				}
				else if ((LA12_1==COLON))
				{
					alt12 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA12_0==DecimalLiteral||LA12_0==HexIntegerLiteral||LA12_0==OctalIntegerLiteral||LA12_0==StringLiteral))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:705:9: func= propertyFunctionAssignment
				{
				DebugLocation(705, 13);
				PushFollow(Follow._propertyFunctionAssignment_in_propertyAssignment3596);
				func=propertyFunctionAssignment();
				PopFollow();

				DebugLocation(706, 9);
				 value = func; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:708:9: data= propertyValueAssignment
				{
				DebugLocation(708, 13);
				PushFollow(Follow._propertyValueAssignment_in_propertyAssignment3621);
				data=propertyValueAssignment();
				PopFollow();

				DebugLocation(709, 9);
				 value = data; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyAssignment", 13);
			LeaveRule("propertyAssignment", 13);
			LeaveRule_propertyAssignment();
		}
		DebugLocation(710, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyAssignment"); }
		return value;

	}
	// $ANTLR end "propertyAssignment"


	partial void EnterRule_propertyFunctionAssignment();
	partial void LeaveRule_propertyFunctionAssignment();

	// $ANTLR start "propertyFunctionAssignment"
	// ..\\ES3.g:712:1: propertyFunctionAssignment returns [PropertyDeclaration value] : acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody ;
	[GrammarRule("propertyFunctionAssignment")]
	private PropertyDeclaration propertyFunctionAssignment()
	{
		EnterRule_propertyFunctionAssignment();
		EnterRule("propertyFunctionAssignment", 14);
		TraceIn("propertyFunctionAssignment", 14);
		PropertyDeclaration value = default(PropertyDeclaration);

		PropertyExpressionType acc = default(PropertyExpressionType);
		string prop2 = default(string);
		List<string> parms = default(List<string>);
		BlockSyntax statements = default(BlockSyntax);


		    PropertyExpressionType mode;
		    BlockSyntax body;
		    List<string> parameters = null;
		    string name;
		    IToken start = null;

		try { DebugEnterRule(GrammarFileName, "propertyFunctionAssignment");
		DebugLocation(712, 4);
		try
		{
			// ..\\ES3.g:733:5: (acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:734:9: acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody
			{
			DebugLocation(734, 12);
			PushFollow(Follow._accessor_in_propertyFunctionAssignment3669);
			acc=accessor();
			PopFollow();

			DebugLocation(735, 9);
			 mode = acc; 
			DebugLocation(736, 14);
			PushFollow(Follow._propertyName_in_propertyFunctionAssignment3691);
			prop2=propertyName();
			PopFollow();

			DebugLocation(737, 9);
			 name = prop2; 
			DebugLocation(738, 9);
			// ..\\ES3.g:738:9: (parms= formalParameterList )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==LPAREN))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:739:13: parms= formalParameterList
				{
				DebugLocation(739, 13);
				 start = input.LT(1); 
				DebugLocation(740, 18);
				PushFollow(Follow._formalParameterList_in_propertyFunctionAssignment3741);
				parms=formalParameterList();
				PopFollow();

				DebugLocation(741, 13);
				 parameters = parms; 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(743, 9);

			            if (start == null)
			                start = input.LT(1);
			        
			DebugLocation(747, 19);
			PushFollow(Follow._functionBody_in_propertyFunctionAssignment3788);
			statements=functionBody();
			PopFollow();

			DebugLocation(748, 9);
			 body = statements; 

			}


			    value = new PropertyDeclaration(
			        name,
			        new FunctionSyntax(
			            name,
			            parameters,
			            body,
			            null,
			            GetLocation(start, input.LT(-1))
			        ),
			        mode
			    );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyFunctionAssignment", 14);
			LeaveRule("propertyFunctionAssignment", 14);
			LeaveRule_propertyFunctionAssignment();
		}
		DebugLocation(749, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyFunctionAssignment"); }
		return value;

	}
	// $ANTLR end "propertyFunctionAssignment"


	partial void EnterRule_propertyValueAssignment();
	partial void LeaveRule_propertyValueAssignment();

	// $ANTLR start "propertyValueAssignment"
	// ..\\ES3.g:751:1: propertyValueAssignment returns [PropertyDeclaration value] : prop1= propertyName COLON ass= assignmentExpression ;
	[GrammarRule("propertyValueAssignment")]
	private PropertyDeclaration propertyValueAssignment()
	{
		EnterRule_propertyValueAssignment();
		EnterRule("propertyValueAssignment", 15);
		TraceIn("propertyValueAssignment", 15);
		PropertyDeclaration value = default(PropertyDeclaration);

		string prop1 = default(string);
		ExpressionSyntax ass = default(ExpressionSyntax);


		    string name;
		    ExpressionSyntax expression;

		try { DebugEnterRule(GrammarFileName, "propertyValueAssignment");
		DebugLocation(751, 4);
		try
		{
			// ..\\ES3.g:763:5: (prop1= propertyName COLON ass= assignmentExpression )
			DebugEnterAlt(1);
			// ..\\ES3.g:764:9: prop1= propertyName COLON ass= assignmentExpression
			{
			DebugLocation(764, 14);
			PushFollow(Follow._propertyName_in_propertyValueAssignment3840);
			prop1=propertyName();
			PopFollow();

			DebugLocation(765, 9);
			 name = prop1; 
			DebugLocation(766, 9);
			Match(input,COLON,Follow._COLON_in_propertyValueAssignment3860); 
			DebugLocation(767, 12);
			PushFollow(Follow._assignmentExpression_in_propertyValueAssignment3872);
			ass=assignmentExpression();
			PopFollow();

			DebugLocation(768, 9);
			 expression = ass; 

			}


			    value = new PropertyDeclaration(
			        name,
			        expression,
			        PropertyExpressionType.Data
			    );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyValueAssignment", 15);
			LeaveRule("propertyValueAssignment", 15);
			LeaveRule_propertyValueAssignment();
		}
		DebugLocation(769, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyValueAssignment"); }
		return value;

	}
	// $ANTLR end "propertyValueAssignment"


	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();

	// $ANTLR start "accessor"
	// ..\\ES3.g:771:1: accessor returns [PropertyExpressionType value] : ex1= Identifier {...}? =>;
	[GrammarRule("accessor")]
	private PropertyExpressionType accessor()
	{
		EnterRule_accessor();
		EnterRule("accessor", 16);
		TraceIn("accessor", 16);
		PropertyExpressionType value = default(PropertyExpressionType);

		IToken ex1 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(771, 1);
		try
		{
			// ..\\ES3.g:772:2: (ex1= Identifier {...}? =>)
			DebugEnterAlt(1);
			// ..\\ES3.g:772:4: ex1= Identifier {...}? =>
			{
			DebugLocation(772, 7);
			ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_accessor3910); 
			DebugLocation(772, 19);
			if (!(( ex1.Text=="get" || ex1.Text=="set" )))
			{
				throw new FailedPredicateException(input, "accessor", " ex1.Text==\"get\" || ex1.Text==\"set\" ");
			}
			DebugLocation(772, 61);
			 if(ex1.Text=="get") value = PropertyExpressionType.Get; if(ex1.Text=="set") value =PropertyExpressionType.Set; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("accessor", 16);
			LeaveRule("accessor", 16);
			LeaveRule_accessor();
		}
		DebugLocation(773, 1);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return value;

	}
	// $ANTLR end "accessor"


	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();

	// $ANTLR start "propertyName"
	// ..\\ES3.g:775:1: propertyName returns [string value] : (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral );
	[GrammarRule("propertyName")]
	private string propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 17);
		TraceIn("propertyName", 17);
		string value = default(string);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		double ex3 = default(double);

		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(775, 1);
		try
		{
			// ..\\ES3.g:776:2: (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case Identifier:
				{
				alt14 = 1;
				}
				break;
			case StringLiteral:
				{
				alt14 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:776:4: ex1= Identifier
				{
				DebugLocation(776, 7);
				ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_propertyName3932); 
				DebugLocation(776, 19);
				 value = ex1.Text; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:777:4: ex2= StringLiteral
				{
				DebugLocation(777, 7);
				ex2=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_propertyName3941); 
				DebugLocation(777, 22);
				 value = ExtractString(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:778:4: ex3= numericLiteral
				{
				DebugLocation(778, 7);
				PushFollow(Follow._numericLiteral_in_propertyName3950);
				ex3=numericLiteral();
				PopFollow();

				DebugLocation(778, 23);
				 value = ex3.ToString(); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyName", 17);
			LeaveRule("propertyName", 17);
			LeaveRule_propertyName();
		}
		DebugLocation(779, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return value;

	}
	// $ANTLR end "propertyName"


	partial void EnterRule_memberExpression();
	partial void LeaveRule_memberExpression();

	// $ANTLR start "memberExpression"
	// ..\\ES3.g:790:1: memberExpression returns [ExpressionSyntax value] : (prim= primaryExpression |func= functionExpression );
	[GrammarRule("memberExpression")]
	private ExpressionSyntax memberExpression()
	{
		EnterRule_memberExpression();
		EnterRule("memberExpression", 18);
		TraceIn("memberExpression", 18);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax prim = default(ExpressionSyntax);
		FunctionSyntax func = default(FunctionSyntax);

		try { DebugEnterRule(GrammarFileName, "memberExpression");
		DebugLocation(790, 1);
		try
		{
			// ..\\ES3.g:791:2: (prim= primaryExpression |func= functionExpression )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==DecimalLiteral||LA15_0==FALSE||LA15_0==HexIntegerLiteral||LA15_0==Identifier||(LA15_0>=LBRACE && LA15_0<=LBRACK)||LA15_0==LPAREN||LA15_0==NULL||LA15_0==OctalIntegerLiteral||LA15_0==RegularExpressionLiteral||LA15_0==StringLiteral||LA15_0==THIS||LA15_0==TRUE))
			{
				alt15 = 1;
			}
			else if ((LA15_0==FUNCTION))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:791:4: prim= primaryExpression
				{
				DebugLocation(791, 8);
				PushFollow(Follow._primaryExpression_in_memberExpression3976);
				prim=primaryExpression();
				PopFollow();

				DebugLocation(791, 27);
				 value = prim; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:792:4: func= functionExpression
				{
				DebugLocation(792, 8);
				PushFollow(Follow._functionExpression_in_memberExpression3985);
				func=functionExpression();
				PopFollow();

				DebugLocation(792, 28);
				 value = func; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberExpression", 18);
			LeaveRule("memberExpression", 18);
			LeaveRule_memberExpression();
		}
		DebugLocation(793, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpression"); }
		return value;

	}
	// $ANTLR end "memberExpression"


	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\ES3.g:795:1: arguments returns [List<MethodArgument> value] : LPAREN (first= argument ( COMMA follow= argument )* )? RPAREN ;
	[GrammarRule("arguments")]
	private List<MethodArgument> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 19);
		TraceIn("arguments", 19);
		List<MethodArgument> value = default(List<MethodArgument>);

		MethodArgument first = default(MethodArgument);
		MethodArgument follow = default(MethodArgument);


			value = new List<MethodArgument>();

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(795, 1);
		try
		{
			// ..\\ES3.g:799:2: ( LPAREN (first= argument ( COMMA follow= argument )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:800:9: LPAREN (first= argument ( COMMA follow= argument )* )? RPAREN
			{
			DebugLocation(800, 9);
			Match(input,LPAREN,Follow._LPAREN_in_arguments4016); 
			DebugLocation(801, 9);
			// ..\\ES3.g:801:9: (first= argument ( COMMA follow= argument )* )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==ADD||LA17_0==DEC||LA17_0==DELETE||LA17_0==DecimalLiteral||LA17_0==FALSE||LA17_0==FUNCTION||LA17_0==HexIntegerLiteral||LA17_0==INC||LA17_0==INV||LA17_0==Identifier||(LA17_0>=LBRACE && LA17_0<=LBRACK)||LA17_0==LPAREN||(LA17_0>=NEW && LA17_0<=NOT)||LA17_0==NULL||LA17_0==OctalIntegerLiteral||LA17_0==REF||LA17_0==RegularExpressionLiteral||LA17_0==SUB||LA17_0==StringLiteral||LA17_0==THIS||LA17_0==TRUE||LA17_0==TYPEOF||LA17_0==VOID))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:802:13: first= argument ( COMMA follow= argument )*
				{
				DebugLocation(802, 18);
				PushFollow(Follow._argument_in_arguments4042);
				first=argument();
				PopFollow();

				DebugLocation(803, 13);
				 value.Add(first); 
				DebugLocation(804, 13);
				// ..\\ES3.g:804:13: ( COMMA follow= argument )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==COMMA))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:805:17: COMMA follow= argument
						{
						DebugLocation(805, 17);
						Match(input,COMMA,Follow._COMMA_in_arguments4088); 
						DebugLocation(806, 23);
						PushFollow(Follow._argument_in_arguments4108);
						follow=argument();
						PopFollow();

						DebugLocation(807, 17);
						 value.Add(follow); 

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(810, 9);
			Match(input,RPAREN,Follow._RPAREN_in_arguments4162); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 19);
			LeaveRule("arguments", 19);
			LeaveRule_arguments();
		}
		DebugLocation(811, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return value;

	}
	// $ANTLR end "arguments"


	partial void EnterRule_argument();
	partial void LeaveRule_argument();

	// $ANTLR start "argument"
	// ..\\ES3.g:813:1: argument returns [MethodArgument value] : ( REF )? ex= assignmentExpression ;
	[GrammarRule("argument")]
	private MethodArgument argument()
	{
		EnterRule_argument();
		EnterRule("argument", 20);
		TraceIn("argument", 20);
		MethodArgument value = default(MethodArgument);

		ExpressionSyntax ex = default(ExpressionSyntax);


		    bool isRef = false;

		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(813, 4);
		try
		{
			// ..\\ES3.g:817:5: ( ( REF )? ex= assignmentExpression )
			DebugEnterAlt(1);
			// ..\\ES3.g:818:9: ( REF )? ex= assignmentExpression
			{
			DebugLocation(818, 9);
			// ..\\ES3.g:818:9: ( REF )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==REF))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:818:11: REF
				{
				DebugLocation(818, 11);
				Match(input,REF,Follow._REF_in_argument4195); 
				DebugLocation(818, 15);
				 isRef = true; 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(819, 11);
			PushFollow(Follow._assignmentExpression_in_argument4212);
			ex=assignmentExpression();
			PopFollow();

			DebugLocation(820, 9);
			 value = new MethodArgument(ex, isRef); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argument", 20);
			LeaveRule("argument", 20);
			LeaveRule_argument();
		}
		DebugLocation(821, 4);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return value;

	}
	// $ANTLR end "argument"


	partial void EnterRule_generics();
	partial void LeaveRule_generics();

	// $ANTLR start "generics"
	// ..\\ES3.g:823:1: generics returns [List<ExpressionSyntax> value] : LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE ;
	[GrammarRule("generics")]
	private List<ExpressionSyntax> generics()
	{
		EnterRule_generics();
		EnterRule("generics", 21);
		TraceIn("generics", 21);
		List<ExpressionSyntax> value = default(List<ExpressionSyntax>);

		ExpressionSyntax first = default(ExpressionSyntax);
		ExpressionSyntax follow = default(ExpressionSyntax);


			value = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "generics");
		DebugLocation(823, 1);
		try
		{
			// ..\\ES3.g:827:2: ( LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:827:4: LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE
			{
			DebugLocation(827, 4);
			Match(input,LBRACE,Follow._LBRACE_in_generics4245); 
			DebugLocation(827, 11);
			// ..\\ES3.g:827:11: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==ADD||LA20_0==DEC||LA20_0==DELETE||LA20_0==DecimalLiteral||LA20_0==FALSE||LA20_0==FUNCTION||LA20_0==HexIntegerLiteral||LA20_0==INC||LA20_0==INV||LA20_0==Identifier||(LA20_0>=LBRACE && LA20_0<=LBRACK)||LA20_0==LPAREN||(LA20_0>=NEW && LA20_0<=NOT)||LA20_0==NULL||LA20_0==OctalIntegerLiteral||LA20_0==RegularExpressionLiteral||LA20_0==SUB||LA20_0==StringLiteral||LA20_0==THIS||LA20_0==TRUE||LA20_0==TYPEOF||LA20_0==VOID))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:827:13: first= assignmentExpression ( COMMA follow= assignmentExpression )*
				{
				DebugLocation(827, 18);
				PushFollow(Follow._assignmentExpression_in_generics4251);
				first=assignmentExpression();
				PopFollow();

				DebugLocation(827, 40);
				 value.Add(first); 
				DebugLocation(827, 63);
				// ..\\ES3.g:827:63: ( COMMA follow= assignmentExpression )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==COMMA))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:827:65: COMMA follow= assignmentExpression
						{
						DebugLocation(827, 65);
						Match(input,COMMA,Follow._COMMA_in_generics4257); 
						DebugLocation(827, 77);
						PushFollow(Follow._assignmentExpression_in_generics4261);
						follow=assignmentExpression();
						PopFollow();

						DebugLocation(827, 99);
						 value.Add(follow); 

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(827, 128);
			Match(input,RBRACE,Follow._RBRACE_in_generics4270); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generics", 21);
			LeaveRule("generics", 21);
			LeaveRule_generics();
		}
		DebugLocation(829, 1);
		} finally { DebugExitRule(GrammarFileName, "generics"); }
		return value;

	}
	// $ANTLR end "generics"


	partial void EnterRule_leftHandSideExpression();
	partial void LeaveRule_leftHandSideExpression();

	// $ANTLR start "leftHandSideExpression"
	// ..\\ES3.g:831:1: leftHandSideExpression returns [ExpressionSyntax value] : ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* ;
	[GrammarRule("leftHandSideExpression")]
	private ExpressionSyntax leftHandSideExpression()
	{
		EnterRule_leftHandSideExpression();
		EnterRule("leftHandSideExpression", 22);
		TraceIn("leftHandSideExpression", 22);
		ExpressionSyntax value = default(ExpressionSyntax);

		IToken id = default(IToken);
		ExpressionSyntax mem = default(ExpressionSyntax);
		List<ExpressionSyntax> gen = default(List<ExpressionSyntax>);
		List<MethodArgument> arg = default(List<MethodArgument>);
		ExpressionSyntax exp = default(ExpressionSyntax);


			List<ExpressionSyntax> gens = new List<ExpressionSyntax>();
		    bool isNew = false;

		try { DebugEnterRule(GrammarFileName, "leftHandSideExpression");
		DebugLocation(831, 1);
		try
		{
			// ..\\ES3.g:840:2: ( ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:841:9: ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			{
			DebugLocation(841, 9);
			// ..\\ES3.g:841:9: ( NEW )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==NEW))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:842:13: NEW
				{
				DebugLocation(842, 13);
				Match(input,NEW,Follow._NEW_in_leftHandSideExpression4319); 
				DebugLocation(843, 13);
				 isNew = true; 

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(845, 9);
			PushFollow(Follow._memberExpression_in_leftHandSideExpression4353);
			mem=memberExpression();
			PopFollow();

			DebugLocation(846, 9);
			 value = mem; 
			DebugLocation(847, 6);
			// ..\\ES3.g:847:6: ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=4;
				try { DebugEnterDecision(23, false);
				switch (input.LA(1))
				{
				case LBRACE:
				case LPAREN:
					{
					alt23 = 1;
					}
					break;
				case LBRACK:
					{
					alt23 = 2;
					}
					break;
				case DOT:
					{
					alt23 = 3;
					}
					break;

				}

				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:848:7: (gen= generics )? arg= arguments
					{
					DebugLocation(848, 7);
					// ..\\ES3.g:848:7: (gen= generics )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==LBRACE))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:849:17: gen= generics
						{
						DebugLocation(849, 20);
						PushFollow(Follow._generics_in_leftHandSideExpression4398);
						gen=generics();
						PopFollow();

						DebugLocation(850, 17);
						 gens = gen; 

						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(852, 16);
					PushFollow(Follow._arguments_in_leftHandSideExpression4447);
					arg=arguments();
					PopFollow();

					DebugLocation(853, 13);

					                value = new MethodCallSyntax(
					                    value,
					                    arg,
					                    gens
					                );

					                if (isNew)
					                {
					                    isNew = false;
					                    value = new NewSyntax(value);
					                }
					            

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:868:13: LBRACK exp= expression RBRACK
					{
					DebugLocation(868, 13);
					Match(input,LBRACK,Follow._LBRACK_in_leftHandSideExpression4482); 
					DebugLocation(868, 23);
					PushFollow(Follow._expression_in_leftHandSideExpression4486);
					exp=expression();
					PopFollow();

					DebugLocation(868, 35);
					Match(input,RBRACK,Follow._RBRACK_in_leftHandSideExpression4488); 
					DebugLocation(869, 13);

					                value = new IndexerSyntax(
					                    value,
					                    exp
					                );
					            

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ..\\ES3.g:877:13: DOT id= Identifier
					{
					DebugLocation(877, 13);
					Match(input,DOT,Follow._DOT_in_leftHandSideExpression4525); 
					DebugLocation(877, 19);
					id=(IToken)Match(input,Identifier,Follow._Identifier_in_leftHandSideExpression4529); 
					DebugLocation(878, 13);

					                value = new PropertySyntax(
					                    value,
					                    id.Text
					                );
					            

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}


			    if (isNew)
			        value = new NewSyntax(value);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("leftHandSideExpression", 22);
			LeaveRule("leftHandSideExpression", 22);
			LeaveRule_leftHandSideExpression();
		}
		DebugLocation(885, 1);
		} finally { DebugExitRule(GrammarFileName, "leftHandSideExpression"); }
		return value;

	}
	// $ANTLR end "leftHandSideExpression"


	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();

	// $ANTLR start "postfixExpression"
	// ..\\ES3.g:897:1: postfixExpression returns [ExpressionSyntax value] : left= leftHandSideExpression (post= postfixOperator )? ;
	[GrammarRule("postfixExpression")]
	private ExpressionSyntax postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 23);
		TraceIn("postfixExpression", 23);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		SyntaxExpressionType post = default(SyntaxExpressionType);

		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(897, 1);
		try
		{
			// ..\\ES3.g:898:2: (left= leftHandSideExpression (post= postfixOperator )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:898:4: left= leftHandSideExpression (post= postfixOperator )?
			{
			DebugLocation(898, 8);
			PushFollow(Follow._leftHandSideExpression_in_postfixExpression4575);
			left=leftHandSideExpression();
			PopFollow();

			DebugLocation(898, 32);
			 value = left; if (input.LA(1) == INC || input.LA(1) == DEC) PromoteEol();  
			DebugLocation(898, 112);
			// ..\\ES3.g:898:112: (post= postfixOperator )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==DEC||LA24_0==INC))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:898:114: post= postfixOperator
				{
				DebugLocation(898, 118);
				PushFollow(Follow._postfixOperator_in_postfixExpression4583);
				post=postfixOperator();
				PopFollow();

				DebugLocation(898, 135);
				 value = new UnarySyntax(post, value); 

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("postfixExpression", 23);
			LeaveRule("postfixExpression", 23);
			LeaveRule_postfixExpression();
		}
		DebugLocation(899, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return value;

	}
	// $ANTLR end "postfixExpression"


	partial void EnterRule_postfixOperator();
	partial void LeaveRule_postfixOperator();

	// $ANTLR start "postfixOperator"
	// ..\\ES3.g:901:1: postfixOperator returns [SyntaxExpressionType value] : (op= INC |op= DEC );
	[GrammarRule("postfixOperator")]
	private SyntaxExpressionType postfixOperator()
	{
		EnterRule_postfixOperator();
		EnterRule("postfixOperator", 24);
		TraceIn("postfixOperator", 24);
		SyntaxExpressionType value = default(SyntaxExpressionType);

		IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "postfixOperator");
		DebugLocation(901, 1);
		try
		{
			// ..\\ES3.g:902:2: (op= INC |op= DEC )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==INC))
			{
				alt25 = 1;
			}
			else if ((LA25_0==DEC))
			{
				alt25 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:902:4: op= INC
				{
				DebugLocation(902, 6);
				op=(IToken)Match(input,INC,Follow._INC_in_postfixOperator4605); 
				DebugLocation(902, 11);
				 op.Type = PINC; value = SyntaxExpressionType.PostIncrementAssign; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:903:4: op= DEC
				{
				DebugLocation(903, 6);
				op=(IToken)Match(input,DEC,Follow._DEC_in_postfixOperator4614); 
				DebugLocation(903, 11);
				 op.Type = PDEC; value = SyntaxExpressionType.PostDecrementAssign; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("postfixOperator", 24);
			LeaveRule("postfixOperator", 24);
			LeaveRule_postfixOperator();
		}
		DebugLocation(904, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixOperator"); }
		return value;

	}
	// $ANTLR end "postfixOperator"


	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// ..\\ES3.g:910:1: unaryExpression returns [ExpressionSyntax value] : (post= postfixExpression |op= unaryOperator exp= unaryExpression );
	[GrammarRule("unaryExpression")]
	private ExpressionSyntax unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 25);
		TraceIn("unaryExpression", 25);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax post = default(ExpressionSyntax);
		SyntaxExpressionType op = default(SyntaxExpressionType);
		ExpressionSyntax exp = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(910, 1);
		try
		{
			// ..\\ES3.g:911:2: (post= postfixExpression |op= unaryOperator exp= unaryExpression )
			int alt26=2;
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==DecimalLiteral||LA26_0==FALSE||LA26_0==FUNCTION||LA26_0==HexIntegerLiteral||LA26_0==Identifier||(LA26_0>=LBRACE && LA26_0<=LBRACK)||LA26_0==LPAREN||LA26_0==NEW||LA26_0==NULL||LA26_0==OctalIntegerLiteral||LA26_0==RegularExpressionLiteral||LA26_0==StringLiteral||LA26_0==THIS||LA26_0==TRUE))
			{
				alt26 = 1;
			}
			else if ((LA26_0==ADD||LA26_0==DEC||LA26_0==DELETE||LA26_0==INC||LA26_0==INV||LA26_0==NOT||LA26_0==SUB||LA26_0==TYPEOF||LA26_0==VOID))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:911:4: post= postfixExpression
				{
				DebugLocation(911, 8);
				PushFollow(Follow._postfixExpression_in_unaryExpression4637);
				post=postfixExpression();
				PopFollow();

				DebugLocation(911, 27);
				 value = post; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:912:4: op= unaryOperator exp= unaryExpression
				{
				DebugLocation(912, 6);
				PushFollow(Follow._unaryOperator_in_unaryExpression4646);
				op=unaryOperator();
				PopFollow();

				DebugLocation(912, 24);
				PushFollow(Follow._unaryExpression_in_unaryExpression4650);
				exp=unaryExpression();
				PopFollow();

				DebugLocation(912, 41);
				 value = new UnarySyntax(op, exp); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 25);
			LeaveRule("unaryExpression", 25);
			LeaveRule_unaryExpression();
		}
		DebugLocation(913, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return value;

	}
	// $ANTLR end "unaryExpression"


	partial void EnterRule_unaryOperator();
	partial void LeaveRule_unaryOperator();

	// $ANTLR start "unaryOperator"
	// ..\\ES3.g:915:1: unaryOperator returns [SyntaxExpressionType value] : ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT );
	[GrammarRule("unaryOperator")]
	private SyntaxExpressionType unaryOperator()
	{
		EnterRule_unaryOperator();
		EnterRule("unaryOperator", 26);
		TraceIn("unaryOperator", 26);
		SyntaxExpressionType value = default(SyntaxExpressionType);

		IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "unaryOperator");
		DebugLocation(915, 1);
		try
		{
			// ..\\ES3.g:916:2: ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT )
			int alt27=9;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case DELETE:
				{
				alt27 = 1;
				}
				break;
			case VOID:
				{
				alt27 = 2;
				}
				break;
			case TYPEOF:
				{
				alt27 = 3;
				}
				break;
			case INC:
				{
				alt27 = 4;
				}
				break;
			case DEC:
				{
				alt27 = 5;
				}
				break;
			case ADD:
				{
				alt27 = 6;
				}
				break;
			case SUB:
				{
				alt27 = 7;
				}
				break;
			case INV:
				{
				alt27 = 8;
				}
				break;
			case NOT:
				{
				alt27 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:916:4: DELETE
				{
				DebugLocation(916, 4);
				Match(input,DELETE,Follow._DELETE_in_unaryOperator4668); 
				DebugLocation(916, 11);
				 value = SyntaxExpressionType.Delete; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:917:4: VOID
				{
				DebugLocation(917, 4);
				Match(input,VOID,Follow._VOID_in_unaryOperator4675); 
				DebugLocation(917, 9);
				 value = SyntaxExpressionType.Void; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:918:4: TYPEOF
				{
				DebugLocation(918, 4);
				Match(input,TYPEOF,Follow._TYPEOF_in_unaryOperator4682); 
				DebugLocation(918, 11);
				 value = SyntaxExpressionType.TypeOf; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:919:4: INC
				{
				DebugLocation(919, 4);
				Match(input,INC,Follow._INC_in_unaryOperator4689); 
				DebugLocation(919, 8);
				 value = SyntaxExpressionType.PreIncrementAssign; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:920:4: DEC
				{
				DebugLocation(920, 4);
				Match(input,DEC,Follow._DEC_in_unaryOperator4696); 
				DebugLocation(920, 8);
				 value = SyntaxExpressionType.PreDecrementAssign; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:921:4: op= ADD
				{
				DebugLocation(921, 6);
				op=(IToken)Match(input,ADD,Follow._ADD_in_unaryOperator4705); 
				DebugLocation(921, 11);
				 op.Type = POS; value = SyntaxExpressionType.UnaryPlus; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:922:4: op= SUB
				{
				DebugLocation(922, 6);
				op=(IToken)Match(input,SUB,Follow._SUB_in_unaryOperator4714); 
				DebugLocation(922, 11);
				 op.Type = NEG; value = SyntaxExpressionType.Negate; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:923:4: INV
				{
				DebugLocation(923, 4);
				Match(input,INV,Follow._INV_in_unaryOperator4721); 
				DebugLocation(923, 8);
				 value = SyntaxExpressionType.BitwiseNot; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:924:4: NOT
				{
				DebugLocation(924, 4);
				Match(input,NOT,Follow._NOT_in_unaryOperator4728); 
				DebugLocation(924, 8);
				 value = SyntaxExpressionType.Not; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryOperator", 26);
			LeaveRule("unaryOperator", 26);
			LeaveRule_unaryOperator();
		}
		DebugLocation(925, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
		return value;

	}
	// $ANTLR end "unaryOperator"


	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// ..\\ES3.g:931:1: multiplicativeExpression returns [ExpressionSyntax value] : left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private ExpressionSyntax multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 27);
		TraceIn("multiplicativeExpression", 27);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(931, 1);
		try
		{
			// ..\\ES3.g:935:2: (left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:935:4: left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )*
			{
			DebugLocation(935, 8);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression4756);
			left=unaryExpression();
			PopFollow();

			DebugLocation(935, 25);
			 value = left; 
			DebugLocation(935, 44);
			// ..\\ES3.g:935:44: ( ( MUL | DIV | MOD ) right= unaryExpression )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==DIV||LA29_0==MOD||LA29_0==MUL))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:936:3: ( MUL | DIV | MOD ) right= unaryExpression
					{
					DebugLocation(936, 3);
					// ..\\ES3.g:936:3: ( MUL | DIV | MOD )
					int alt28=3;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, false);
					switch (input.LA(1))
					{
					case MUL:
						{
						alt28 = 1;
						}
						break;
					case DIV:
						{
						alt28 = 2;
						}
						break;
					case MOD:
						{
						alt28 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:936:5: MUL
						{
						DebugLocation(936, 5);
						Match(input,MUL,Follow._MUL_in_multiplicativeExpression4767); 
						DebugLocation(936, 9);
						 type= SyntaxExpressionType.Multiply; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:937:5: DIV
						{
						DebugLocation(937, 5);
						Match(input,DIV,Follow._DIV_in_multiplicativeExpression4776); 
						DebugLocation(937, 9);
						 type= SyntaxExpressionType.Divide; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:938:5: MOD
						{
						DebugLocation(938, 5);
						Match(input,MOD,Follow._MOD_in_multiplicativeExpression4784); 
						DebugLocation(938, 9);
						 type= SyntaxExpressionType.Modulo; 

						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(939, 8);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression4794);
					right=unaryExpression();
					PopFollow();

					DebugLocation(939, 25);
					 value = new BinarySyntax(type, value, right); 

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 27);
			LeaveRule("multiplicativeExpression", 27);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(940, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return value;

	}
	// $ANTLR end "multiplicativeExpression"


	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// ..\\ES3.g:946:1: additiveExpression returns [ExpressionSyntax value] : left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private ExpressionSyntax additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 28);
		TraceIn("additiveExpression", 28);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(946, 1);
		try
		{
			// ..\\ES3.g:950:2: (left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:950:4: left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )*
			{
			DebugLocation(950, 8);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression4824);
			left=multiplicativeExpression();
			PopFollow();

			DebugLocation(950, 34);
			 value = left; 
			DebugLocation(950, 53);
			// ..\\ES3.g:950:53: ( ( ADD | SUB ) right= multiplicativeExpression )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==ADD||LA31_0==SUB))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:951:3: ( ADD | SUB ) right= multiplicativeExpression
					{
					DebugLocation(951, 3);
					// ..\\ES3.g:951:3: ( ADD | SUB )
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==ADD))
					{
						alt30 = 1;
					}
					else if ((LA30_0==SUB))
					{
						alt30 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:951:5: ADD
						{
						DebugLocation(951, 5);
						Match(input,ADD,Follow._ADD_in_additiveExpression4835); 
						DebugLocation(951, 9);
						 type= SyntaxExpressionType.Add; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:952:5: SUB
						{
						DebugLocation(952, 5);
						Match(input,SUB,Follow._SUB_in_additiveExpression4843); 
						DebugLocation(952, 9);
						 type= SyntaxExpressionType.Subtract; 

						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(953, 8);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression4853);
					right=multiplicativeExpression();
					PopFollow();

					DebugLocation(953, 34);
					 value = new BinarySyntax(type, value, right); 

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 28);
			LeaveRule("additiveExpression", 28);
			LeaveRule_additiveExpression();
		}
		DebugLocation(954, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return value;

	}
	// $ANTLR end "additiveExpression"


	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// ..\\ES3.g:960:1: shiftExpression returns [ExpressionSyntax value] : left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private ExpressionSyntax shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 29);
		TraceIn("shiftExpression", 29);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(960, 1);
		try
		{
			// ..\\ES3.g:964:2: (left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:964:4: left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )*
			{
			DebugLocation(964, 8);
			PushFollow(Follow._additiveExpression_in_shiftExpression4884);
			left=additiveExpression();
			PopFollow();

			DebugLocation(964, 28);
			 value = left; 
			DebugLocation(964, 47);
			// ..\\ES3.g:964:47: ( ( SHL | SHR | SHU ) right= additiveExpression )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==SHL||LA33_0==SHR||LA33_0==SHU))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:965:3: ( SHL | SHR | SHU ) right= additiveExpression
					{
					DebugLocation(965, 3);
					// ..\\ES3.g:965:3: ( SHL | SHR | SHU )
					int alt32=3;
					try { DebugEnterSubRule(32);
					try { DebugEnterDecision(32, false);
					switch (input.LA(1))
					{
					case SHL:
						{
						alt32 = 1;
						}
						break;
					case SHR:
						{
						alt32 = 2;
						}
						break;
					case SHU:
						{
						alt32 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:965:5: SHL
						{
						DebugLocation(965, 5);
						Match(input,SHL,Follow._SHL_in_shiftExpression4895); 
						DebugLocation(965, 9);
						 type= SyntaxExpressionType.LeftShift; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:966:5: SHR
						{
						DebugLocation(966, 5);
						Match(input,SHR,Follow._SHR_in_shiftExpression4903); 
						DebugLocation(966, 9);
						 type= SyntaxExpressionType.RightShift; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:967:5: SHU
						{
						DebugLocation(967, 5);
						Match(input,SHU,Follow._SHU_in_shiftExpression4911); 
						DebugLocation(967, 9);
						 type= SyntaxExpressionType.UnsignedRightShift; 

						}
						break;

					}
					} finally { DebugExitSubRule(32); }

					DebugLocation(968, 8);
					PushFollow(Follow._additiveExpression_in_shiftExpression4921);
					right=additiveExpression();
					PopFollow();

					DebugLocation(968, 28);
					 value = new BinarySyntax(type, value, right); 

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftExpression", 29);
			LeaveRule("shiftExpression", 29);
			LeaveRule_shiftExpression();
		}
		DebugLocation(969, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return value;

	}
	// $ANTLR end "shiftExpression"


	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// ..\\ES3.g:975:1: relationalExpression returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private ExpressionSyntax relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 30);
		TraceIn("relationalExpression", 30);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(975, 1);
		try
		{
			// ..\\ES3.g:979:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:979:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			{
			DebugLocation(979, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpression4952);
			left=shiftExpression();
			PopFollow();

			DebugLocation(979, 25);
			 value = left; 
			DebugLocation(979, 44);
			// ..\\ES3.g:979:44: ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if (((LA35_0>=GT && LA35_0<=GTE)||LA35_0==IN||LA35_0==INSTANCEOF||(LA35_0>=LT && LA35_0<=LTE)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:980:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression
					{
					DebugLocation(980, 3);
					// ..\\ES3.g:980:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN )
					int alt34=6;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt34 = 1;
						}
						break;
					case GT:
						{
						alt34 = 2;
						}
						break;
					case LTE:
						{
						alt34 = 3;
						}
						break;
					case GTE:
						{
						alt34 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt34 = 5;
						}
						break;
					case IN:
						{
						alt34 = 6;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:980:5: LT
						{
						DebugLocation(980, 5);
						Match(input,LT,Follow._LT_in_relationalExpression4963); 
						DebugLocation(980, 8);
						 type= SyntaxExpressionType.LessThan; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:981:5: GT
						{
						DebugLocation(981, 5);
						Match(input,GT,Follow._GT_in_relationalExpression4971); 
						DebugLocation(981, 8);
						 type= SyntaxExpressionType.GreaterThan; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:982:5: LTE
						{
						DebugLocation(982, 5);
						Match(input,LTE,Follow._LTE_in_relationalExpression4979); 
						DebugLocation(982, 9);
						 type= SyntaxExpressionType.LessThanOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:983:5: GTE
						{
						DebugLocation(983, 5);
						Match(input,GTE,Follow._GTE_in_relationalExpression4987); 
						DebugLocation(983, 9);
						 type= SyntaxExpressionType.GreaterThanOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:984:5: INSTANCEOF
						{
						DebugLocation(984, 5);
						Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpression4995); 
						DebugLocation(984, 16);
						 type= SyntaxExpressionType.InstanceOf;  

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// ..\\ES3.g:985:5: IN
						{
						DebugLocation(985, 5);
						Match(input,IN,Follow._IN_in_relationalExpression5003); 
						DebugLocation(985, 8);
						 type= SyntaxExpressionType.In;  

						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(986, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpression5013);
					right=shiftExpression();
					PopFollow();

					DebugLocation(986, 25);
					 value = new BinarySyntax(type, value, right); 

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpression", 30);
			LeaveRule("relationalExpression", 30);
			LeaveRule_relationalExpression();
		}
		DebugLocation(987, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return value;

	}
	// $ANTLR end "relationalExpression"


	partial void EnterRule_relationalExpressionNoIn();
	partial void LeaveRule_relationalExpressionNoIn();

	// $ANTLR start "relationalExpressionNoIn"
	// ..\\ES3.g:989:1: relationalExpressionNoIn returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* ;
	[GrammarRule("relationalExpressionNoIn")]
	private ExpressionSyntax relationalExpressionNoIn()
	{
		EnterRule_relationalExpressionNoIn();
		EnterRule("relationalExpressionNoIn", 31);
		TraceIn("relationalExpressionNoIn", 31);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpressionNoIn");
		DebugLocation(989, 1);
		try
		{
			// ..\\ES3.g:993:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:993:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			{
			DebugLocation(993, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn5039);
			left=shiftExpression();
			PopFollow();

			DebugLocation(993, 25);
			 value = left; 
			DebugLocation(993, 44);
			// ..\\ES3.g:993:44: ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if (((LA37_0>=GT && LA37_0<=GTE)||LA37_0==INSTANCEOF||(LA37_0>=LT && LA37_0<=LTE)))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:994:3: ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression
					{
					DebugLocation(994, 3);
					// ..\\ES3.g:994:3: ( LT | GT | LTE | GTE | INSTANCEOF )
					int alt36=5;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt36 = 1;
						}
						break;
					case GT:
						{
						alt36 = 2;
						}
						break;
					case LTE:
						{
						alt36 = 3;
						}
						break;
					case GTE:
						{
						alt36 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt36 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:994:5: LT
						{
						DebugLocation(994, 5);
						Match(input,LT,Follow._LT_in_relationalExpressionNoIn5050); 
						DebugLocation(994, 8);
						 type= SyntaxExpressionType.LessThan; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:995:5: GT
						{
						DebugLocation(995, 5);
						Match(input,GT,Follow._GT_in_relationalExpressionNoIn5058); 
						DebugLocation(995, 8);
						 type= SyntaxExpressionType.GreaterThan; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:996:5: LTE
						{
						DebugLocation(996, 5);
						Match(input,LTE,Follow._LTE_in_relationalExpressionNoIn5066); 
						DebugLocation(996, 9);
						 type= SyntaxExpressionType.LessThanOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:997:5: GTE
						{
						DebugLocation(997, 5);
						Match(input,GTE,Follow._GTE_in_relationalExpressionNoIn5074); 
						DebugLocation(997, 9);
						 type= SyntaxExpressionType.GreaterThanOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:998:5: INSTANCEOF
						{
						DebugLocation(998, 5);
						Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpressionNoIn5082); 
						DebugLocation(998, 16);
						 type= SyntaxExpressionType.InstanceOf;  

						}
						break;

					}
					} finally { DebugExitSubRule(36); }

					DebugLocation(999, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn5093);
					right=shiftExpression();
					PopFollow();

					DebugLocation(999, 25);
					 value = new BinarySyntax(type, value, right); 

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpressionNoIn", 31);
			LeaveRule("relationalExpressionNoIn", 31);
			LeaveRule_relationalExpressionNoIn();
		}
		DebugLocation(1000, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "relationalExpressionNoIn"


	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// ..\\ES3.g:1006:1: equalityExpression returns [ExpressionSyntax value] : left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private ExpressionSyntax equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 32);
		TraceIn("equalityExpression", 32);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1006, 1);
		try
		{
			// ..\\ES3.g:1010:2: (left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1010:4: left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			{
			DebugLocation(1010, 8);
			PushFollow(Follow._relationalExpression_in_equalityExpression5124);
			left=relationalExpression();
			PopFollow();

			DebugLocation(1010, 30);
			 value = left; 
			DebugLocation(1010, 49);
			// ..\\ES3.g:1010:49: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==EQ||LA39_0==NEQ||LA39_0==NSAME||LA39_0==SAME))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1011:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpression
					{
					DebugLocation(1011, 3);
					// ..\\ES3.g:1011:3: ( EQ | NEQ | SAME | NSAME )
					int alt38=4;
					try { DebugEnterSubRule(38);
					try { DebugEnterDecision(38, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt38 = 1;
						}
						break;
					case NEQ:
						{
						alt38 = 2;
						}
						break;
					case SAME:
						{
						alt38 = 3;
						}
						break;
					case NSAME:
						{
						alt38 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1011:5: EQ
						{
						DebugLocation(1011, 5);
						Match(input,EQ,Follow._EQ_in_equalityExpression5135); 
						DebugLocation(1011, 8);
						 type= SyntaxExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:1012:5: NEQ
						{
						DebugLocation(1012, 5);
						Match(input,NEQ,Follow._NEQ_in_equalityExpression5143); 
						DebugLocation(1012, 9);
						 type= SyntaxExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:1013:5: SAME
						{
						DebugLocation(1013, 5);
						Match(input,SAME,Follow._SAME_in_equalityExpression5151); 
						DebugLocation(1013, 10);
						 type= SyntaxExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:1014:5: NSAME
						{
						DebugLocation(1014, 5);
						Match(input,NSAME,Follow._NSAME_in_equalityExpression5159); 
						DebugLocation(1014, 11);
						 type= SyntaxExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(38); }

					DebugLocation(1015, 8);
					PushFollow(Follow._relationalExpression_in_equalityExpression5169);
					right=relationalExpression();
					PopFollow();

					DebugLocation(1015, 30);
					 value = new BinarySyntax(type, value, right); 

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpression", 32);
			LeaveRule("equalityExpression", 32);
			LeaveRule_equalityExpression();
		}
		DebugLocation(1016, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return value;

	}
	// $ANTLR end "equalityExpression"


	partial void EnterRule_equalityExpressionNoIn();
	partial void LeaveRule_equalityExpressionNoIn();

	// $ANTLR start "equalityExpressionNoIn"
	// ..\\ES3.g:1018:1: equalityExpressionNoIn returns [ExpressionSyntax value] : left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* ;
	[GrammarRule("equalityExpressionNoIn")]
	private ExpressionSyntax equalityExpressionNoIn()
	{
		EnterRule_equalityExpressionNoIn();
		EnterRule("equalityExpressionNoIn", 33);
		TraceIn("equalityExpressionNoIn", 33);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpressionNoIn");
		DebugLocation(1018, 1);
		try
		{
			// ..\\ES3.g:1022:2: (left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1022:4: left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			{
			DebugLocation(1022, 8);
			PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn5195);
			left=relationalExpressionNoIn();
			PopFollow();

			DebugLocation(1022, 34);
			 value = left; 
			DebugLocation(1022, 53);
			// ..\\ES3.g:1022:53: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==EQ||LA41_0==NEQ||LA41_0==NSAME||LA41_0==SAME))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1023:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn
					{
					DebugLocation(1023, 3);
					// ..\\ES3.g:1023:3: ( EQ | NEQ | SAME | NSAME )
					int alt40=4;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt40 = 1;
						}
						break;
					case NEQ:
						{
						alt40 = 2;
						}
						break;
					case SAME:
						{
						alt40 = 3;
						}
						break;
					case NSAME:
						{
						alt40 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1023:5: EQ
						{
						DebugLocation(1023, 5);
						Match(input,EQ,Follow._EQ_in_equalityExpressionNoIn5206); 
						DebugLocation(1023, 8);
						 type= SyntaxExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:1024:5: NEQ
						{
						DebugLocation(1024, 5);
						Match(input,NEQ,Follow._NEQ_in_equalityExpressionNoIn5214); 
						DebugLocation(1024, 9);
						 type= SyntaxExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:1025:5: SAME
						{
						DebugLocation(1025, 5);
						Match(input,SAME,Follow._SAME_in_equalityExpressionNoIn5222); 
						DebugLocation(1025, 10);
						 type= SyntaxExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:1026:5: NSAME
						{
						DebugLocation(1026, 5);
						Match(input,NSAME,Follow._NSAME_in_equalityExpressionNoIn5230); 
						DebugLocation(1026, 11);
						 type= SyntaxExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(1027, 8);
					PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn5240);
					right=relationalExpressionNoIn();
					PopFollow();

					DebugLocation(1027, 34);
					 value = new BinarySyntax(type, value, right); 

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpressionNoIn", 33);
			LeaveRule("equalityExpressionNoIn", 33);
			LeaveRule_equalityExpressionNoIn();
		}
		DebugLocation(1028, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "equalityExpressionNoIn"


	partial void EnterRule_bitwiseANDExpression();
	partial void LeaveRule_bitwiseANDExpression();

	// $ANTLR start "bitwiseANDExpression"
	// ..\\ES3.g:1034:1: bitwiseANDExpression returns [ExpressionSyntax value] : left= equalityExpression ( AND right= equalityExpression )* ;
	[GrammarRule("bitwiseANDExpression")]
	private ExpressionSyntax bitwiseANDExpression()
	{
		EnterRule_bitwiseANDExpression();
		EnterRule("bitwiseANDExpression", 34);
		TraceIn("bitwiseANDExpression", 34);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpression");
		DebugLocation(1034, 1);
		try
		{
			// ..\\ES3.g:1035:2: (left= equalityExpression ( AND right= equalityExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1035:4: left= equalityExpression ( AND right= equalityExpression )*
			{
			DebugLocation(1035, 8);
			PushFollow(Follow._equalityExpression_in_bitwiseANDExpression5267);
			left=equalityExpression();
			PopFollow();

			DebugLocation(1035, 28);
			 value = left; 
			DebugLocation(1035, 47);
			// ..\\ES3.g:1035:47: ( AND right= equalityExpression )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==AND))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1035:49: AND right= equalityExpression
					{
					DebugLocation(1035, 49);
					Match(input,AND,Follow._AND_in_bitwiseANDExpression5273); 
					DebugLocation(1035, 58);
					PushFollow(Follow._equalityExpression_in_bitwiseANDExpression5277);
					right=equalityExpression();
					PopFollow();

					DebugLocation(1035, 78);
					 value = new BinarySyntax(SyntaxExpressionType.BitwiseAnd, value, right); 

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseANDExpression", 34);
			LeaveRule("bitwiseANDExpression", 34);
			LeaveRule_bitwiseANDExpression();
		}
		DebugLocation(1036, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseANDExpression"


	partial void EnterRule_bitwiseANDExpressionNoIn();
	partial void LeaveRule_bitwiseANDExpressionNoIn();

	// $ANTLR start "bitwiseANDExpressionNoIn"
	// ..\\ES3.g:1038:1: bitwiseANDExpressionNoIn returns [ExpressionSyntax value] : left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* ;
	[GrammarRule("bitwiseANDExpressionNoIn")]
	private ExpressionSyntax bitwiseANDExpressionNoIn()
	{
		EnterRule_bitwiseANDExpressionNoIn();
		EnterRule("bitwiseANDExpressionNoIn", 35);
		TraceIn("bitwiseANDExpressionNoIn", 35);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpressionNoIn");
		DebugLocation(1038, 1);
		try
		{
			// ..\\ES3.g:1039:2: (left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1039:4: left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )*
			{
			DebugLocation(1039, 8);
			PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5298);
			left=equalityExpressionNoIn();
			PopFollow();

			DebugLocation(1039, 32);
			 value = left; 
			DebugLocation(1039, 51);
			// ..\\ES3.g:1039:51: ( AND right= equalityExpressionNoIn )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==AND))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1039:53: AND right= equalityExpressionNoIn
					{
					DebugLocation(1039, 53);
					Match(input,AND,Follow._AND_in_bitwiseANDExpressionNoIn5304); 
					DebugLocation(1039, 62);
					PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5308);
					right=equalityExpressionNoIn();
					PopFollow();

					DebugLocation(1039, 86);
					 value = new BinarySyntax(SyntaxExpressionType.BitwiseAnd, value, right); 

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseANDExpressionNoIn", 35);
			LeaveRule("bitwiseANDExpressionNoIn", 35);
			LeaveRule_bitwiseANDExpressionNoIn();
		}
		DebugLocation(1040, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "bitwiseANDExpressionNoIn"


	partial void EnterRule_bitwiseXORExpression();
	partial void LeaveRule_bitwiseXORExpression();

	// $ANTLR start "bitwiseXORExpression"
	// ..\\ES3.g:1042:1: bitwiseXORExpression returns [ExpressionSyntax value] : left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* ;
	[GrammarRule("bitwiseXORExpression")]
	private ExpressionSyntax bitwiseXORExpression()
	{
		EnterRule_bitwiseXORExpression();
		EnterRule("bitwiseXORExpression", 36);
		TraceIn("bitwiseXORExpression", 36);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpression");
		DebugLocation(1042, 1);
		try
		{
			// ..\\ES3.g:1043:2: (left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1043:4: left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )*
			{
			DebugLocation(1043, 8);
			PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression5331);
			left=bitwiseANDExpression();
			PopFollow();

			DebugLocation(1043, 30);
			 value = left; 
			DebugLocation(1043, 49);
			// ..\\ES3.g:1043:49: ( XOR right= bitwiseANDExpression )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==XOR))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1043:51: XOR right= bitwiseANDExpression
					{
					DebugLocation(1043, 51);
					Match(input,XOR,Follow._XOR_in_bitwiseXORExpression5337); 
					DebugLocation(1043, 60);
					PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression5341);
					right=bitwiseANDExpression();
					PopFollow();

					DebugLocation(1043, 82);
					 value = new BinarySyntax(SyntaxExpressionType.BitwiseExclusiveOr, value, right); 

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXORExpression", 36);
			LeaveRule("bitwiseXORExpression", 36);
			LeaveRule_bitwiseXORExpression();
		}
		DebugLocation(1044, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseXORExpression"


	partial void EnterRule_bitwiseXORExpressionNoIn();
	partial void LeaveRule_bitwiseXORExpressionNoIn();

	// $ANTLR start "bitwiseXORExpressionNoIn"
	// ..\\ES3.g:1046:1: bitwiseXORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* ;
	[GrammarRule("bitwiseXORExpressionNoIn")]
	private ExpressionSyntax bitwiseXORExpressionNoIn()
	{
		EnterRule_bitwiseXORExpressionNoIn();
		EnterRule("bitwiseXORExpressionNoIn", 37);
		TraceIn("bitwiseXORExpressionNoIn", 37);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpressionNoIn");
		DebugLocation(1046, 1);
		try
		{
			// ..\\ES3.g:1047:2: (left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1047:4: left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )*
			{
			DebugLocation(1047, 8);
			PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5364);
			left=bitwiseANDExpressionNoIn();
			PopFollow();

			DebugLocation(1047, 34);
			 value = left; 
			DebugLocation(1047, 53);
			// ..\\ES3.g:1047:53: ( XOR right= bitwiseANDExpressionNoIn )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==XOR))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1047:55: XOR right= bitwiseANDExpressionNoIn
					{
					DebugLocation(1047, 55);
					Match(input,XOR,Follow._XOR_in_bitwiseXORExpressionNoIn5370); 
					DebugLocation(1047, 64);
					PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5374);
					right=bitwiseANDExpressionNoIn();
					PopFollow();

					DebugLocation(1047, 90);
					 value = new BinarySyntax(SyntaxExpressionType.BitwiseExclusiveOr, value, right); 

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXORExpressionNoIn", 37);
			LeaveRule("bitwiseXORExpressionNoIn", 37);
			LeaveRule_bitwiseXORExpressionNoIn();
		}
		DebugLocation(1048, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "bitwiseXORExpressionNoIn"


	partial void EnterRule_bitwiseORExpression();
	partial void LeaveRule_bitwiseORExpression();

	// $ANTLR start "bitwiseORExpression"
	// ..\\ES3.g:1050:1: bitwiseORExpression returns [ExpressionSyntax value] : left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* ;
	[GrammarRule("bitwiseORExpression")]
	private ExpressionSyntax bitwiseORExpression()
	{
		EnterRule_bitwiseORExpression();
		EnterRule("bitwiseORExpression", 38);
		TraceIn("bitwiseORExpression", 38);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpression");
		DebugLocation(1050, 1);
		try
		{
			// ..\\ES3.g:1051:2: (left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1051:4: left= bitwiseXORExpression ( OR right= bitwiseXORExpression )*
			{
			DebugLocation(1051, 8);
			PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression5396);
			left=bitwiseXORExpression();
			PopFollow();

			DebugLocation(1051, 30);
			 value = left; 
			DebugLocation(1051, 49);
			// ..\\ES3.g:1051:49: ( OR right= bitwiseXORExpression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==OR))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1051:51: OR right= bitwiseXORExpression
					{
					DebugLocation(1051, 51);
					Match(input,OR,Follow._OR_in_bitwiseORExpression5402); 
					DebugLocation(1051, 59);
					PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression5406);
					right=bitwiseXORExpression();
					PopFollow();

					DebugLocation(1051, 81);
					 value = new BinarySyntax(SyntaxExpressionType.BitwiseOr, value, right); 

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseORExpression", 38);
			LeaveRule("bitwiseORExpression", 38);
			LeaveRule_bitwiseORExpression();
		}
		DebugLocation(1052, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseORExpression"


	partial void EnterRule_bitwiseORExpressionNoIn();
	partial void LeaveRule_bitwiseORExpressionNoIn();

	// $ANTLR start "bitwiseORExpressionNoIn"
	// ..\\ES3.g:1054:1: bitwiseORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* ;
	[GrammarRule("bitwiseORExpressionNoIn")]
	private ExpressionSyntax bitwiseORExpressionNoIn()
	{
		EnterRule_bitwiseORExpressionNoIn();
		EnterRule("bitwiseORExpressionNoIn", 39);
		TraceIn("bitwiseORExpressionNoIn", 39);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpressionNoIn");
		DebugLocation(1054, 1);
		try
		{
			// ..\\ES3.g:1055:2: (left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1055:4: left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )*
			{
			DebugLocation(1055, 8);
			PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5428);
			left=bitwiseXORExpressionNoIn();
			PopFollow();

			DebugLocation(1055, 34);
			 value = left; 
			DebugLocation(1055, 53);
			// ..\\ES3.g:1055:53: ( OR right= bitwiseXORExpressionNoIn )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==OR))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1055:55: OR right= bitwiseXORExpressionNoIn
					{
					DebugLocation(1055, 55);
					Match(input,OR,Follow._OR_in_bitwiseORExpressionNoIn5434); 
					DebugLocation(1055, 63);
					PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5438);
					right=bitwiseXORExpressionNoIn();
					PopFollow();

					DebugLocation(1055, 89);
					 value = new BinarySyntax(SyntaxExpressionType.BitwiseOr, value, right); 

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseORExpressionNoIn", 39);
			LeaveRule("bitwiseORExpressionNoIn", 39);
			LeaveRule_bitwiseORExpressionNoIn();
		}
		DebugLocation(1056, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "bitwiseORExpressionNoIn"


	partial void EnterRule_logicalANDExpression();
	partial void LeaveRule_logicalANDExpression();

	// $ANTLR start "logicalANDExpression"
	// ..\\ES3.g:1062:1: logicalANDExpression returns [ExpressionSyntax value] : left= bitwiseORExpression ( LAND right= bitwiseORExpression )* ;
	[GrammarRule("logicalANDExpression")]
	private ExpressionSyntax logicalANDExpression()
	{
		EnterRule_logicalANDExpression();
		EnterRule("logicalANDExpression", 40);
		TraceIn("logicalANDExpression", 40);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpression");
		DebugLocation(1062, 1);
		try
		{
			// ..\\ES3.g:1063:2: (left= bitwiseORExpression ( LAND right= bitwiseORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1063:3: left= bitwiseORExpression ( LAND right= bitwiseORExpression )*
			{
			DebugLocation(1063, 7);
			PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression5464);
			left=bitwiseORExpression();
			PopFollow();

			DebugLocation(1063, 29);
			 value = left; 
			DebugLocation(1063, 48);
			// ..\\ES3.g:1063:48: ( LAND right= bitwiseORExpression )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==LAND))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1063:50: LAND right= bitwiseORExpression
					{
					DebugLocation(1063, 50);
					Match(input,LAND,Follow._LAND_in_logicalANDExpression5470); 
					DebugLocation(1063, 60);
					PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression5474);
					right=bitwiseORExpression();
					PopFollow();

					DebugLocation(1063, 81);
					 value = new BinarySyntax(SyntaxExpressionType.And, value, right); 

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalANDExpression", 40);
			LeaveRule("logicalANDExpression", 40);
			LeaveRule_logicalANDExpression();
		}
		DebugLocation(1064, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpression"); }
		return value;

	}
	// $ANTLR end "logicalANDExpression"


	partial void EnterRule_logicalANDExpressionNoIn();
	partial void LeaveRule_logicalANDExpressionNoIn();

	// $ANTLR start "logicalANDExpressionNoIn"
	// ..\\ES3.g:1066:1: logicalANDExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* ;
	[GrammarRule("logicalANDExpressionNoIn")]
	private ExpressionSyntax logicalANDExpressionNoIn()
	{
		EnterRule_logicalANDExpressionNoIn();
		EnterRule("logicalANDExpressionNoIn", 41);
		TraceIn("logicalANDExpressionNoIn", 41);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpressionNoIn");
		DebugLocation(1066, 1);
		try
		{
			// ..\\ES3.g:1067:2: (left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1067:3: left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )*
			{
			DebugLocation(1067, 7);
			PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5495);
			left=bitwiseORExpressionNoIn();
			PopFollow();

			DebugLocation(1067, 33);
			 value = left; 
			DebugLocation(1067, 52);
			// ..\\ES3.g:1067:52: ( LAND right= bitwiseORExpressionNoIn )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==LAND))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1067:54: LAND right= bitwiseORExpressionNoIn
					{
					DebugLocation(1067, 54);
					Match(input,LAND,Follow._LAND_in_logicalANDExpressionNoIn5501); 
					DebugLocation(1067, 64);
					PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5505);
					right=bitwiseORExpressionNoIn();
					PopFollow();

					DebugLocation(1067, 89);
					 value = new BinarySyntax(SyntaxExpressionType.And, value, right); 

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalANDExpressionNoIn", 41);
			LeaveRule("logicalANDExpressionNoIn", 41);
			LeaveRule_logicalANDExpressionNoIn();
		}
		DebugLocation(1068, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "logicalANDExpressionNoIn"


	partial void EnterRule_logicalORExpression();
	partial void LeaveRule_logicalORExpression();

	// $ANTLR start "logicalORExpression"
	// ..\\ES3.g:1070:1: logicalORExpression returns [ExpressionSyntax value] : left= logicalANDExpression ( LOR right= logicalANDExpression )* ;
	[GrammarRule("logicalORExpression")]
	private ExpressionSyntax logicalORExpression()
	{
		EnterRule_logicalORExpression();
		EnterRule("logicalORExpression", 42);
		TraceIn("logicalORExpression", 42);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalORExpression");
		DebugLocation(1070, 1);
		try
		{
			// ..\\ES3.g:1071:2: (left= logicalANDExpression ( LOR right= logicalANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1071:4: left= logicalANDExpression ( LOR right= logicalANDExpression )*
			{
			DebugLocation(1071, 8);
			PushFollow(Follow._logicalANDExpression_in_logicalORExpression5527);
			left=logicalANDExpression();
			PopFollow();

			DebugLocation(1071, 30);
			 value = left; 
			DebugLocation(1071, 49);
			// ..\\ES3.g:1071:49: ( LOR right= logicalANDExpression )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==LOR))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1071:51: LOR right= logicalANDExpression
					{
					DebugLocation(1071, 51);
					Match(input,LOR,Follow._LOR_in_logicalORExpression5533); 
					DebugLocation(1071, 60);
					PushFollow(Follow._logicalANDExpression_in_logicalORExpression5537);
					right=logicalANDExpression();
					PopFollow();

					DebugLocation(1071, 82);
					 value = new BinarySyntax(SyntaxExpressionType.Or, value, right); 

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalORExpression", 42);
			LeaveRule("logicalORExpression", 42);
			LeaveRule_logicalORExpression();
		}
		DebugLocation(1072, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpression"); }
		return value;

	}
	// $ANTLR end "logicalORExpression"


	partial void EnterRule_logicalORExpressionNoIn();
	partial void LeaveRule_logicalORExpressionNoIn();

	// $ANTLR start "logicalORExpressionNoIn"
	// ..\\ES3.g:1074:1: logicalORExpressionNoIn returns [ExpressionSyntax value] : left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* ;
	[GrammarRule("logicalORExpressionNoIn")]
	private ExpressionSyntax logicalORExpressionNoIn()
	{
		EnterRule_logicalORExpressionNoIn();
		EnterRule("logicalORExpressionNoIn", 43);
		TraceIn("logicalORExpressionNoIn", 43);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalORExpressionNoIn");
		DebugLocation(1074, 1);
		try
		{
			// ..\\ES3.g:1075:2: (left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1075:4: left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )*
			{
			DebugLocation(1075, 8);
			PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn5559);
			left=logicalANDExpressionNoIn();
			PopFollow();

			DebugLocation(1075, 34);
			 value = left; 
			DebugLocation(1075, 53);
			// ..\\ES3.g:1075:53: ( LOR right= logicalANDExpressionNoIn )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==LOR))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1075:55: LOR right= logicalANDExpressionNoIn
					{
					DebugLocation(1075, 55);
					Match(input,LOR,Follow._LOR_in_logicalORExpressionNoIn5565); 
					DebugLocation(1075, 64);
					PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn5569);
					right=logicalANDExpressionNoIn();
					PopFollow();

					DebugLocation(1075, 90);
					 value = new BinarySyntax(SyntaxExpressionType.Or, value, right); 

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalORExpressionNoIn", 43);
			LeaveRule("logicalORExpressionNoIn", 43);
			LeaveRule_logicalORExpressionNoIn();
		}
		DebugLocation(1076, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "logicalORExpressionNoIn"


	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// ..\\ES3.g:1082:1: conditionalExpression returns [ExpressionSyntax value] : expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? ;
	[GrammarRule("conditionalExpression")]
	private ExpressionSyntax conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 44);
		TraceIn("conditionalExpression", 44);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax expr1 = default(ExpressionSyntax);
		ExpressionSyntax expr2 = default(ExpressionSyntax);
		ExpressionSyntax expr3 = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1082, 1);
		try
		{
			// ..\\ES3.g:1083:2: (expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1083:4: expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			{
			DebugLocation(1083, 9);
			PushFollow(Follow._logicalORExpression_in_conditionalExpression5596);
			expr1=logicalORExpression();
			PopFollow();

			DebugLocation(1083, 30);
			 value = expr1; 
			DebugLocation(1083, 50);
			// ..\\ES3.g:1083:50: ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==QUE))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1083:52: QUE expr2= assignmentExpression COLON expr3= assignmentExpression
				{
				DebugLocation(1083, 52);
				Match(input,QUE,Follow._QUE_in_conditionalExpression5602); 
				DebugLocation(1083, 61);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression5606);
				expr2=assignmentExpression();
				PopFollow();

				DebugLocation(1083, 83);
				Match(input,COLON,Follow._COLON_in_conditionalExpression5608); 
				DebugLocation(1083, 94);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression5612);
				expr3=assignmentExpression();
				PopFollow();

				DebugLocation(1083, 116);
				 value = new TernarySyntax(expr1, expr2, expr3); 

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpression", 44);
			LeaveRule("conditionalExpression", 44);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(1084, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return value;

	}
	// $ANTLR end "conditionalExpression"


	partial void EnterRule_conditionalExpressionNoIn();
	partial void LeaveRule_conditionalExpressionNoIn();

	// $ANTLR start "conditionalExpressionNoIn"
	// ..\\ES3.g:1086:1: conditionalExpressionNoIn returns [ExpressionSyntax value] : expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? ;
	[GrammarRule("conditionalExpressionNoIn")]
	private ExpressionSyntax conditionalExpressionNoIn()
	{
		EnterRule_conditionalExpressionNoIn();
		EnterRule("conditionalExpressionNoIn", 45);
		TraceIn("conditionalExpressionNoIn", 45);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax expr1 = default(ExpressionSyntax);
		ExpressionSyntax expr2 = default(ExpressionSyntax);
		ExpressionSyntax expr3 = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "conditionalExpressionNoIn");
		DebugLocation(1086, 1);
		try
		{
			// ..\\ES3.g:1087:2: (expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1087:4: expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			{
			DebugLocation(1087, 9);
			PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn5633);
			expr1=logicalORExpressionNoIn();
			PopFollow();

			DebugLocation(1087, 34);
			 value = expr1; 
			DebugLocation(1087, 54);
			// ..\\ES3.g:1087:54: ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==QUE))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1087:56: QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn
				{
				DebugLocation(1087, 56);
				Match(input,QUE,Follow._QUE_in_conditionalExpressionNoIn5639); 
				DebugLocation(1087, 65);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn5643);
				expr2=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1087, 91);
				Match(input,COLON,Follow._COLON_in_conditionalExpressionNoIn5645); 
				DebugLocation(1087, 102);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn5649);
				expr3=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1087, 128);
				 value = new TernarySyntax(expr1, expr2, expr3); 

				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpressionNoIn", 45);
			LeaveRule("conditionalExpressionNoIn", 45);
			LeaveRule_conditionalExpressionNoIn();
		}
		DebugLocation(1088, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "conditionalExpressionNoIn"


	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// ..\\ES3.g:1116:1: assignmentExpression returns [ExpressionSyntax value] : lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private ExpressionSyntax assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 46);
		TraceIn("assignmentExpression", 46);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax lhs = default(ExpressionSyntax);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ExpressionSyntax exp = default(ExpressionSyntax);


		    bool isLhs;

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(1116, 1);
		try
		{
			// ..\\ES3.g:1120:2: (lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1121:9: lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )?
			{
			DebugLocation(1121, 12);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression5690);
			lhs=conditionalExpression();
			PopFollow();

			DebugLocation(1122, 9);
			 value = lhs; isLhs = IsLeftHandSideAssign(lhs); 
			DebugLocation(1123, 6);
			// ..\\ES3.g:1123:6: ({...}?ass= assignmentOperator exp= assignmentExpression )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==ADDASS||LA54_0==ANDASS||LA54_0==ASSIGN||LA54_0==DIVASS||LA54_0==MODASS||LA54_0==MULASS||LA54_0==ORASS||LA54_0==SHLASS||LA54_0==SHRASS||LA54_0==SHUASS||LA54_0==SUBASS||LA54_0==XORASS))
			{
				int LA54_1 = input.LA(2);

				if ((( isLhs )))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1124:13: {...}?ass= assignmentOperator exp= assignmentExpression
				{
				DebugLocation(1124, 13);
				if (!(( isLhs )))
				{
					throw new FailedPredicateException(input, "assignmentExpression", " isLhs ");
				}
				DebugLocation(1125, 16);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression5737);
				ass=assignmentOperator();
				PopFollow();

				DebugLocation(1126, 16);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression5753);
				exp=assignmentExpression();
				PopFollow();

				DebugLocation(1127, 13);

				                value = new AssignmentSyntax(
				                    ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)),
				                    value,
				                    exp
				                );
				            

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpression", 46);
			LeaveRule("assignmentExpression", 46);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(1135, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return value;

	}
	// $ANTLR end "assignmentExpression"

	private sealed partial class assignmentOperator_return : ParserRuleReturnScope<IToken>
	{
		public assignmentOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();

	// $ANTLR start "assignmentOperator"
	// ..\\ES3.g:1137:1: assignmentOperator : ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS );
	[GrammarRule("assignmentOperator")]
	private ES3Parser.assignmentOperator_return assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 47);
		TraceIn("assignmentOperator", 47);
		ES3Parser.assignmentOperator_return retval = new ES3Parser.assignmentOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(1137, 1);
		try
		{
			// ..\\ES3.g:1138:2: ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(1138, 2);
			if (input.LA(1)==ADDASS||input.LA(1)==ANDASS||input.LA(1)==ASSIGN||input.LA(1)==DIVASS||input.LA(1)==MODASS||input.LA(1)==MULASS||input.LA(1)==ORASS||input.LA(1)==SHLASS||input.LA(1)==SHRASS||input.LA(1)==SHUASS||input.LA(1)==SUBASS||input.LA(1)==XORASS)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentOperator", 47);
			LeaveRule("assignmentOperator", 47);
			LeaveRule_assignmentOperator();
		}
		DebugLocation(1150, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"


	partial void EnterRule_assignmentExpressionNoIn();
	partial void LeaveRule_assignmentExpressionNoIn();

	// $ANTLR start "assignmentExpressionNoIn"
	// ..\\ES3.g:1152:1: assignmentExpressionNoIn returns [ExpressionSyntax value] : lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? ;
	[GrammarRule("assignmentExpressionNoIn")]
	private ExpressionSyntax assignmentExpressionNoIn()
	{
		EnterRule_assignmentExpressionNoIn();
		EnterRule("assignmentExpressionNoIn", 48);
		TraceIn("assignmentExpressionNoIn", 48);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax lhs = default(ExpressionSyntax);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ExpressionSyntax exp = default(ExpressionSyntax);


			bool isLhs;

		try { DebugEnterRule(GrammarFileName, "assignmentExpressionNoIn");
		DebugLocation(1152, 1);
		try
		{
			// ..\\ES3.g:1157:2: (lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1158:9: lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			{
			DebugLocation(1158, 12);
			PushFollow(Follow._conditionalExpressionNoIn_in_assignmentExpressionNoIn5876);
			lhs=conditionalExpressionNoIn();
			PopFollow();

			DebugLocation(1159, 9);
			 value = lhs; isLhs = IsLeftHandSideAssign(lhs); 
			DebugLocation(1160, 6);
			// ..\\ES3.g:1160:6: ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==ADDASS||LA55_0==ANDASS||LA55_0==ASSIGN||LA55_0==DIVASS||LA55_0==MODASS||LA55_0==MULASS||LA55_0==ORASS||LA55_0==SHLASS||LA55_0==SHRASS||LA55_0==SHUASS||LA55_0==SUBASS||LA55_0==XORASS))
			{
				int LA55_1 = input.LA(2);

				if ((( isLhs )))
				{
					alt55 = 1;
				}
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1161:13: {...}?ass= assignmentOperator exp= assignmentExpressionNoIn
				{
				DebugLocation(1161, 13);
				if (!(( isLhs )))
				{
					throw new FailedPredicateException(input, "assignmentExpressionNoIn", " isLhs ");
				}
				DebugLocation(1162, 16);
				PushFollow(Follow._assignmentOperator_in_assignmentExpressionNoIn5924);
				ass=assignmentOperator();
				PopFollow();

				DebugLocation(1163, 16);
				PushFollow(Follow._assignmentExpressionNoIn_in_assignmentExpressionNoIn5940);
				exp=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1164, 13);

				                value = new AssignmentSyntax(
				                    ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)),
				                    value,
				                    exp
				                );
				            

				}
				break;

			}
			} finally { DebugExitSubRule(55); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpressionNoIn", 48);
			LeaveRule("assignmentExpressionNoIn", 48);
			LeaveRule_assignmentExpressionNoIn();
		}
		DebugLocation(1172, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "assignmentExpressionNoIn"


	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// ..\\ES3.g:1178:1: expression returns [ExpressionSyntax value] : first= assignmentExpression ( COMMA follow= assignmentExpression )* ;
	[GrammarRule("expression")]
	private ExpressionSyntax expression()
	{
		EnterRule_expression();
		EnterRule("expression", 49);
		TraceIn("expression", 49);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax first = default(ExpressionSyntax);
		ExpressionSyntax follow = default(ExpressionSyntax);


		    List<ExpressionSyntax> nodes = null;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(1178, 1);
		try
		{
			// ..\\ES3.g:1186:2: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1187:9: first= assignmentExpression ( COMMA follow= assignmentExpression )*
			{
			DebugLocation(1187, 14);
			PushFollow(Follow._assignmentExpression_in_expression6006);
			first=assignmentExpression();
			PopFollow();

			DebugLocation(1188, 9);
			 value = first; 
			DebugLocation(1189, 9);
			// ..\\ES3.g:1189:9: ( COMMA follow= assignmentExpression )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==COMMA))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1190:13: COMMA follow= assignmentExpression
					{
					DebugLocation(1190, 13);
					Match(input,COMMA,Follow._COMMA_in_expression6040); 
					DebugLocation(1191, 19);
					PushFollow(Follow._assignmentExpression_in_expression6056);
					follow=assignmentExpression();
					PopFollow();

					DebugLocation(1192, 13);

					                if (nodes == null)
					                    nodes = new List<ExpressionSyntax> { value };

					                nodes.Add(follow);
					            

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}


			    if (nodes != null)
			        value = new CommaOperatorSyntax(nodes);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 49);
			LeaveRule("expression", 49);
			LeaveRule_expression();
		}
		DebugLocation(1199, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return value;

	}
	// $ANTLR end "expression"


	partial void EnterRule_expressionNoIn();
	partial void LeaveRule_expressionNoIn();

	// $ANTLR start "expressionNoIn"
	// ..\\ES3.g:1201:1: expressionNoIn returns [ExpressionSyntax value] : first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* ;
	[GrammarRule("expressionNoIn")]
	private ExpressionSyntax expressionNoIn()
	{
		EnterRule_expressionNoIn();
		EnterRule("expressionNoIn", 50);
		TraceIn("expressionNoIn", 50);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax first = default(ExpressionSyntax);
		ExpressionSyntax follow = default(ExpressionSyntax);


		    List<ExpressionSyntax> nodes = null;

		try { DebugEnterRule(GrammarFileName, "expressionNoIn");
		DebugLocation(1201, 1);
		try
		{
			// ..\\ES3.g:1209:2: (first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1210:9: first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )*
			{
			DebugLocation(1210, 14);
			PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn6116);
			first=assignmentExpressionNoIn();
			PopFollow();

			DebugLocation(1211, 9);
			 value = first; 
			DebugLocation(1212, 9);
			// ..\\ES3.g:1212:9: ( COMMA follow= assignmentExpressionNoIn )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==COMMA))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1213:13: COMMA follow= assignmentExpressionNoIn
					{
					DebugLocation(1213, 13);
					Match(input,COMMA,Follow._COMMA_in_expressionNoIn6150); 
					DebugLocation(1214, 19);
					PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn6166);
					follow=assignmentExpressionNoIn();
					PopFollow();

					DebugLocation(1215, 13);

					                if (nodes == null)
					                    nodes = new List<ExpressionSyntax> { value };

					                nodes.Add(follow);
					            

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}


			    if (nodes != null)
			        value = new CommaOperatorSyntax(nodes);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionNoIn", 50);
			LeaveRule("expressionNoIn", 50);
			LeaveRule_expressionNoIn();
		}
		DebugLocation(1222, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionNoIn"); }
		return value;

	}
	// $ANTLR end "expressionNoIn"


	partial void EnterRule_semic();
	partial void LeaveRule_semic();

	// $ANTLR start "semic"
	// ..\\ES3.g:1246:1: semic : ( SEMIC | EOF | RBRACE | EOL | MultiLineComment );
	[GrammarRule("semic")]
	private void semic()
	{
		EnterRule_semic();
		EnterRule("semic", 51);
		TraceIn("semic", 51);

			// Mark current position so we can unconsume a RBRACE.
			int marker = input.Mark();
			// Promote EOL if appropriate
			PromoteEol();

		try { DebugEnterRule(GrammarFileName, "semic");
		DebugLocation(1246, 1);
		try
		{
			// ..\\ES3.g:1254:2: ( SEMIC | EOF | RBRACE | EOL | MultiLineComment )
			int alt58=5;
			try { DebugEnterDecision(58, false);
			switch (input.LA(1))
			{
			case SEMIC:
				{
				alt58 = 1;
				}
				break;
			case EOF:
				{
				alt58 = 2;
				}
				break;
			case RBRACE:
				{
				alt58 = 3;
				}
				break;
			case EOL:
				{
				alt58 = 4;
				}
				break;
			case MultiLineComment:
				{
				alt58 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1254:4: SEMIC
				{
				DebugLocation(1254, 4);
				Match(input,SEMIC,Follow._SEMIC_in_semic6219); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1255:4: EOF
				{
				DebugLocation(1255, 4);
				Match(input,EOF,Follow._EOF_in_semic6224); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1256:4: RBRACE
				{
				DebugLocation(1256, 4);
				Match(input,RBRACE,Follow._RBRACE_in_semic6229); 
				DebugLocation(1256, 11);
				 input.Rewind(marker); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1257:4: EOL
				{
				DebugLocation(1257, 4);
				Match(input,EOL,Follow._EOL_in_semic6236); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1258:7: MultiLineComment
				{
				DebugLocation(1258, 7);
				Match(input,MultiLineComment,Follow._MultiLineComment_in_semic6244); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("semic", 51);
			LeaveRule("semic", 51);
			LeaveRule_semic();
		}
		DebugLocation(1259, 1);
		} finally { DebugExitRule(GrammarFileName, "semic"); }
		return;

	}
	// $ANTLR end "semic"


	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// ..\\ES3.g:1266:1: statement returns [SyntaxNode value] options {k=1; } : ({...}?b= block |{...}?func= functionDeclaration |st= statementTail );
	[GrammarRule("statement")]
	private SyntaxNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 52);
		TraceIn("statement", 52);
		SyntaxNode value = default(SyntaxNode);

		BlockSyntax b = default(BlockSyntax);
		SyntaxNode func = default(SyntaxNode);
		SyntaxNode st = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(1266, 1);
		try
		{
			// ..\\ES3.g:1272:2: ({...}?b= block |{...}?func= functionDeclaration |st= statementTail )
			int alt59=3;
			try { DebugEnterDecision(59, false);
			try
			{
				alt59 = dfa59.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1272:4: {...}?b= block
				{
				DebugLocation(1272, 4);
				if (!(( input.LA(1) == LBRACE )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == LBRACE ");
				}
				DebugLocation(1272, 32);
				PushFollow(Follow._block_in_statement6280);
				b=block();
				PopFollow();

				DebugLocation(1272, 39);
				 value = b; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1273:4: {...}?func= functionDeclaration
				{
				DebugLocation(1273, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1273, 37);
				PushFollow(Follow._functionDeclaration_in_statement6291);
				func=functionDeclaration();
				PopFollow();

				DebugLocation(1273, 58);
				 value = func; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1274:4: st= statementTail
				{
				DebugLocation(1274, 6);
				PushFollow(Follow._statementTail_in_statement6300);
				st=statementTail();
				PopFollow();

				DebugLocation(1274, 21);
				 value = st; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 52);
			LeaveRule("statement", 52);
			LeaveRule_statement();
		}
		DebugLocation(1275, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return value;

	}
	// $ANTLR end "statement"


	partial void EnterRule_statementTail();
	partial void LeaveRule_statementTail();

	// $ANTLR start "statementTail"
	// ..\\ES3.g:1277:1: statementTail returns [SyntaxNode value] : (vst= variableStatement |est= emptyStatement |exst= expressionStatement |ifst= ifStatement |itst= iterationStatement |cost= continueStatement |brst= breakStatement |rst= returnStatement |wist= withStatement |last= labelledStatement |swst= switchStatement |thst= throwStatement |trst= tryStatement );
	[GrammarRule("statementTail")]
	private SyntaxNode statementTail()
	{
		EnterRule_statementTail();
		EnterRule("statementTail", 53);
		TraceIn("statementTail", 53);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode vst = default(SyntaxNode);
		SyntaxNode est = default(SyntaxNode);
		SyntaxNode exst = default(SyntaxNode);
		SyntaxNode ifst = default(SyntaxNode);
		SyntaxNode itst = default(SyntaxNode);
		SyntaxNode cost = default(SyntaxNode);
		SyntaxNode brst = default(SyntaxNode);
		ReturnSyntax rst = default(ReturnSyntax);
		SyntaxNode wist = default(SyntaxNode);
		SyntaxNode last = default(SyntaxNode);
		SyntaxNode swst = default(SyntaxNode);
		SyntaxNode thst = default(SyntaxNode);
		TrySyntax trst = default(TrySyntax);

		try { DebugEnterRule(GrammarFileName, "statementTail");
		DebugLocation(1277, 1);
		try
		{
			// ..\\ES3.g:1278:2: (vst= variableStatement |est= emptyStatement |exst= expressionStatement |ifst= ifStatement |itst= iterationStatement |cost= continueStatement |brst= breakStatement |rst= returnStatement |wist= withStatement |last= labelledStatement |swst= switchStatement |thst= throwStatement |trst= tryStatement )
			int alt60=13;
			try { DebugEnterDecision(60, false);
			try
			{
				alt60 = dfa60.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1278:4: vst= variableStatement
				{
				DebugLocation(1278, 7);
				PushFollow(Follow._variableStatement_in_statementTail6321);
				vst=variableStatement();
				PopFollow();

				DebugLocation(1278, 26);
				 value = vst; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1279:4: est= emptyStatement
				{
				DebugLocation(1279, 7);
				PushFollow(Follow._emptyStatement_in_statementTail6330);
				est=emptyStatement();
				PopFollow();

				DebugLocation(1279, 23);
				 value = est; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1280:4: exst= expressionStatement
				{
				DebugLocation(1280, 8);
				PushFollow(Follow._expressionStatement_in_statementTail6339);
				exst=expressionStatement();
				PopFollow();

				DebugLocation(1280, 29);
				 value = exst; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1281:4: ifst= ifStatement
				{
				DebugLocation(1281, 8);
				PushFollow(Follow._ifStatement_in_statementTail6348);
				ifst=ifStatement();
				PopFollow();

				DebugLocation(1281, 21);
				 value = ifst; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1282:4: itst= iterationStatement
				{
				DebugLocation(1282, 8);
				PushFollow(Follow._iterationStatement_in_statementTail6357);
				itst=iterationStatement();
				PopFollow();

				DebugLocation(1282, 28);
				 value = itst; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:1283:4: cost= continueStatement
				{
				DebugLocation(1283, 8);
				PushFollow(Follow._continueStatement_in_statementTail6366);
				cost=continueStatement();
				PopFollow();

				DebugLocation(1283, 27);
				 value = cost; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:1284:4: brst= breakStatement
				{
				DebugLocation(1284, 8);
				PushFollow(Follow._breakStatement_in_statementTail6375);
				brst=breakStatement();
				PopFollow();

				DebugLocation(1284, 24);
				 value = brst; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:1285:4: rst= returnStatement
				{
				DebugLocation(1285, 7);
				PushFollow(Follow._returnStatement_in_statementTail6384);
				rst=returnStatement();
				PopFollow();

				DebugLocation(1285, 24);
				 value = rst; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:1286:4: wist= withStatement
				{
				DebugLocation(1286, 8);
				PushFollow(Follow._withStatement_in_statementTail6393);
				wist=withStatement();
				PopFollow();

				DebugLocation(1286, 23);
				 value = wist; 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ..\\ES3.g:1287:4: last= labelledStatement
				{
				DebugLocation(1287, 8);
				PushFollow(Follow._labelledStatement_in_statementTail6402);
				last=labelledStatement();
				PopFollow();

				DebugLocation(1287, 27);
				 value = last; 

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// ..\\ES3.g:1288:4: swst= switchStatement
				{
				DebugLocation(1288, 8);
				PushFollow(Follow._switchStatement_in_statementTail6411);
				swst=switchStatement();
				PopFollow();

				DebugLocation(1288, 25);
				 value = swst; 

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// ..\\ES3.g:1289:4: thst= throwStatement
				{
				DebugLocation(1289, 8);
				PushFollow(Follow._throwStatement_in_statementTail6420);
				thst=throwStatement();
				PopFollow();

				DebugLocation(1289, 24);
				 value = thst; 

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// ..\\ES3.g:1290:4: trst= tryStatement
				{
				DebugLocation(1290, 8);
				PushFollow(Follow._tryStatement_in_statementTail6429);
				trst=tryStatement();
				PopFollow();

				DebugLocation(1290, 22);
				 value = trst; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statementTail", 53);
			LeaveRule("statementTail", 53);
			LeaveRule_statementTail();
		}
		DebugLocation(1291, 1);
		} finally { DebugExitRule(GrammarFileName, "statementTail"); }
		return value;

	}
	// $ANTLR end "statementTail"


	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// ..\\ES3.g:1295:1: block returns [BlockSyntax value] : lb= LBRACE (st= statement )* RBRACE ;
	[GrammarRule("block")]
	private BlockSyntax block()
	{
		EnterRule_block();
		EnterRule("block", 54);
		TraceIn("block", 54);
		BlockSyntax value = default(BlockSyntax);

		IToken lb = default(IToken);
		SyntaxNode st = default(SyntaxNode);


		    var statements = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(1295, 1);
		try
		{
			// ..\\ES3.g:1302:2: (lb= LBRACE (st= statement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1303:9: lb= LBRACE (st= statement )* RBRACE
			{
			DebugLocation(1303, 11);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_block6468); 
			DebugLocation(1304, 9);
			// ..\\ES3.g:1304:9: (st= statement )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==ADD||LA61_0==BREAK||LA61_0==CONTINUE||LA61_0==DEC||LA61_0==DELETE||LA61_0==DO||LA61_0==DecimalLiteral||LA61_0==FALSE||LA61_0==FOR||LA61_0==FUNCTION||(LA61_0>=HexIntegerLiteral && LA61_0<=IF)||LA61_0==INC||LA61_0==INV||LA61_0==Identifier||(LA61_0>=LBRACE && LA61_0<=LBRACK)||LA61_0==LPAREN||(LA61_0>=NEW && LA61_0<=NOT)||LA61_0==NULL||LA61_0==OctalIntegerLiteral||LA61_0==RETURN||LA61_0==RegularExpressionLiteral||LA61_0==SEMIC||LA61_0==SUB||LA61_0==SWITCH||LA61_0==StringLiteral||(LA61_0>=THIS && LA61_0<=THROW)||(LA61_0>=TRUE && LA61_0<=TYPEOF)||(LA61_0>=VAR && LA61_0<=VOID)||(LA61_0>=WHILE && LA61_0<=WITH)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1305:13: st= statement
					{
					DebugLocation(1305, 15);
					PushFollow(Follow._statement_in_block6494);
					st=statement();
					PopFollow();

					DebugLocation(1306, 13);
					 statements.Add(st); 

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(1308, 9);
			Match(input,RBRACE,Follow._RBRACE_in_block6529); 

			}


			    value = new BlockSyntax(statements);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 54);
			LeaveRule("block", 54);
			LeaveRule_block();
		}
		DebugLocation(1309, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return value;

	}
	// $ANTLR end "block"


	partial void EnterRule_blockStatements();
	partial void LeaveRule_blockStatements();

	// $ANTLR start "blockStatements"
	// ..\\ES3.g:1313:1: blockStatements returns [BlockSyntax value] : (st= statement )* ;
	[GrammarRule("blockStatements")]
	private BlockSyntax blockStatements()
	{
		EnterRule_blockStatements();
		EnterRule("blockStatements", 55);
		TraceIn("blockStatements", 55);
		BlockSyntax value = default(BlockSyntax);

		SyntaxNode st = default(SyntaxNode);


		    var tempBody = _currentBody;
		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "blockStatements");
		DebugLocation(1313, 1);
		try
		{
			// ..\\ES3.g:1322:2: ( (st= statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1323:9: (st= statement )*
			{
			DebugLocation(1323, 9);
			// ..\\ES3.g:1323:9: (st= statement )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==ADD||LA62_0==BREAK||LA62_0==CONTINUE||LA62_0==DEC||LA62_0==DELETE||LA62_0==DO||LA62_0==DecimalLiteral||LA62_0==FALSE||LA62_0==FOR||LA62_0==FUNCTION||(LA62_0>=HexIntegerLiteral && LA62_0<=IF)||LA62_0==INC||LA62_0==INV||LA62_0==Identifier||(LA62_0>=LBRACE && LA62_0<=LBRACK)||LA62_0==LPAREN||(LA62_0>=NEW && LA62_0<=NOT)||LA62_0==NULL||LA62_0==OctalIntegerLiteral||LA62_0==RETURN||LA62_0==RegularExpressionLiteral||LA62_0==SEMIC||LA62_0==SUB||LA62_0==SWITCH||LA62_0==StringLiteral||(LA62_0>=THIS && LA62_0<=THROW)||(LA62_0>=TRUE && LA62_0<=TYPEOF)||(LA62_0>=VAR && LA62_0<=VOID)||(LA62_0>=WHILE && LA62_0<=WITH)))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1324:13: st= statement
					{
					DebugLocation(1324, 15);
					PushFollow(Follow._statement_in_blockStatements6578);
					st=statement();
					PopFollow();

					DebugLocation(1325, 13);
					 _currentBody.Statements.Add(st); 

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}


			    value = _currentBody.CreateBlock();
			    _currentBody = tempBody;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatements", 55);
			LeaveRule("blockStatements", 55);
			LeaveRule_blockStatements();
		}
		DebugLocation(1327, 1);
		} finally { DebugExitRule(GrammarFileName, "blockStatements"); }
		return value;

	}
	// $ANTLR end "blockStatements"


	partial void EnterRule_variableStatement();
	partial void LeaveRule_variableStatement();

	// $ANTLR start "variableStatement"
	// ..\\ES3.g:1334:1: variableStatement returns [SyntaxNode value] : VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic ;
	[GrammarRule("variableStatement")]
	private SyntaxNode variableStatement()
	{
		EnterRule_variableStatement();
		EnterRule("variableStatement", 56);
		TraceIn("variableStatement", 56);
		SyntaxNode value = default(SyntaxNode);

		VariableDeclaration first = default(VariableDeclaration);
		VariableDeclaration follow = default(VariableDeclaration);


		    var declarations = new List<VariableDeclaration>();
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "variableStatement");
		DebugLocation(1334, 1);
		try
		{
			// ..\\ES3.g:1342:2: ( VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1343:9: VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic
			{
			DebugLocation(1343, 9);
			Match(input,VAR,Follow._VAR_in_variableStatement6642); 
			DebugLocation(1343, 18);
			PushFollow(Follow._variableDeclaration_in_variableStatement6646);
			first=variableDeclaration();
			PopFollow();

			DebugLocation(1344, 9);
			 declarations.Add(first); 
			DebugLocation(1345, 9);
			// ..\\ES3.g:1345:9: ( COMMA follow= variableDeclaration )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==COMMA))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1346:13: COMMA follow= variableDeclaration
					{
					DebugLocation(1346, 13);
					Match(input,COMMA,Follow._COMMA_in_variableStatement6680); 
					DebugLocation(1346, 25);
					PushFollow(Follow._variableDeclaration_in_variableStatement6684);
					follow=variableDeclaration();
					PopFollow();

					DebugLocation(1347, 13);
					 declarations.Add(follow); 

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }

			DebugLocation(1349, 9);
			PushFollow(Follow._semic_in_variableStatement6719);
			semic();
			PopFollow();


			}


			    value = new VariableDeclarationSyntax(declarations, GetLocation(start, input.LT(-1)));

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableStatement", 56);
			LeaveRule("variableStatement", 56);
			LeaveRule_variableStatement();
		}
		DebugLocation(1350, 1);
		} finally { DebugExitRule(GrammarFileName, "variableStatement"); }
		return value;

	}
	// $ANTLR end "variableStatement"


	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\ES3.g:1352:1: variableDeclaration returns [VariableDeclaration value] : id= Identifier ( ASSIGN ass= assignmentExpression )? ;
	[GrammarRule("variableDeclaration")]
	private VariableDeclaration variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 57);
		TraceIn("variableDeclaration", 57);
		VariableDeclaration value = default(VariableDeclaration);

		IToken id = default(IToken);
		ExpressionSyntax ass = default(ExpressionSyntax);


			ExpressionSyntax expression = null;

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(1352, 1);
		try
		{
			// ..\\ES3.g:1356:2: (id= Identifier ( ASSIGN ass= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1357:9: id= Identifier ( ASSIGN ass= assignmentExpression )?
			{
			DebugLocation(1357, 11);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclaration6749); 
			DebugLocation(1358, 9);
			// ..\\ES3.g:1358:9: ( ASSIGN ass= assignmentExpression )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==ASSIGN))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1359:13: ASSIGN ass= assignmentExpression
				{
				DebugLocation(1359, 13);
				Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclaration6773); 
				DebugLocation(1359, 23);
				PushFollow(Follow._assignmentExpression_in_variableDeclaration6777);
				ass=assignmentExpression();
				PopFollow();

				DebugLocation(1360, 13);
				 expression = ass; 

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(1362, 9);
			 value = new VariableDeclaration(id.Text, expression, true, _currentBody.DeclaredVariables.AddOrGet(id.Text, true)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 57);
			LeaveRule("variableDeclaration", 57);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(1363, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return value;

	}
	// $ANTLR end "variableDeclaration"


	partial void EnterRule_variableDeclarationNoIn();
	partial void LeaveRule_variableDeclarationNoIn();

	// $ANTLR start "variableDeclarationNoIn"
	// ..\\ES3.g:1365:1: variableDeclarationNoIn returns [VariableDeclaration value] : id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? ;
	[GrammarRule("variableDeclarationNoIn")]
	private VariableDeclaration variableDeclarationNoIn()
	{
		EnterRule_variableDeclarationNoIn();
		EnterRule("variableDeclarationNoIn", 58);
		TraceIn("variableDeclarationNoIn", 58);
		VariableDeclaration value = default(VariableDeclaration);

		IToken id = default(IToken);
		ExpressionSyntax ass = default(ExpressionSyntax);


			ExpressionSyntax expression = null;

		try { DebugEnterRule(GrammarFileName, "variableDeclarationNoIn");
		DebugLocation(1365, 1);
		try
		{
			// ..\\ES3.g:1369:2: (id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1370:9: id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )?
			{
			DebugLocation(1370, 11);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn6843); 
			DebugLocation(1371, 9);
			// ..\\ES3.g:1371:9: ( ASSIGN ass= assignmentExpressionNoIn )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==ASSIGN))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1372:13: ASSIGN ass= assignmentExpressionNoIn
				{
				DebugLocation(1372, 13);
				Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclarationNoIn6867); 
				DebugLocation(1372, 23);
				PushFollow(Follow._assignmentExpressionNoIn_in_variableDeclarationNoIn6871);
				ass=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1373, 13);
				 expression = ass; 

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(1375, 9);
			 value = new VariableDeclaration(id.Text, expression, true, _currentBody.DeclaredVariables.AddOrGet(id.Text, true)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationNoIn", 58);
			LeaveRule("variableDeclarationNoIn", 58);
			LeaveRule_variableDeclarationNoIn();
		}
		DebugLocation(1376, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationNoIn"); }
		return value;

	}
	// $ANTLR end "variableDeclarationNoIn"


	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();

	// $ANTLR start "emptyStatement"
	// ..\\ES3.g:1382:1: emptyStatement returns [SyntaxNode value] : SEMIC ;
	[GrammarRule("emptyStatement")]
	private SyntaxNode emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 59);
		TraceIn("emptyStatement", 59);
		SyntaxNode value = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(1382, 1);
		try
		{
			// ..\\ES3.g:1383:2: ( SEMIC )
			DebugEnterAlt(1);
			// ..\\ES3.g:1383:4: SEMIC
			{
			DebugLocation(1383, 4);
			Match(input,SEMIC,Follow._SEMIC_in_emptyStatement6926); 
			DebugLocation(1383, 10);
			 value = new EmptySyntax(); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("emptyStatement", 59);
			LeaveRule("emptyStatement", 59);
			LeaveRule_emptyStatement();
		}
		DebugLocation(1384, 1);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return value;

	}
	// $ANTLR end "emptyStatement"


	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();

	// $ANTLR start "expressionStatement"
	// ..\\ES3.g:1396:1: expressionStatement returns [SyntaxNode value] : e= expression semic ;
	[GrammarRule("expressionStatement")]
	private SyntaxNode expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 60);
		TraceIn("expressionStatement", 60);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(1396, 1);
		try
		{
			// ..\\ES3.g:1400:2: (e= expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1401:9: e= expression semic
			{
			DebugLocation(1401, 10);
			PushFollow(Follow._expression_in_expressionStatement6965);
			e=expression();
			PopFollow();

			DebugLocation(1401, 22);
			PushFollow(Follow._semic_in_expressionStatement6967);
			semic();
			PopFollow();

			DebugLocation(1402, 9);
			 value = new ExpressionStatementSyntax(e, GetLocation(start, input.LT(-1))); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionStatement", 60);
			LeaveRule("expressionStatement", 60);
			LeaveRule_expressionStatement();
		}
		DebugLocation(1403, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return value;

	}
	// $ANTLR end "expressionStatement"


	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();

	// $ANTLR start "ifStatement"
	// ..\\ES3.g:1409:1: ifStatement returns [SyntaxNode value] : IF LPAREN e= expression RPAREN then= statement ({...}? ELSE els= statement )? ;
	[GrammarRule("ifStatement")]
	private SyntaxNode ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 61);
		TraceIn("ifStatement", 61);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);
		SyntaxNode then = default(SyntaxNode);
		SyntaxNode els = default(SyntaxNode);


		    SyntaxNode elseStatement = null;
		    var start = input.LT(1);
		    IToken end;

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(1409, 1);
		try
		{
			// ..\\ES3.g:1416:2: ( IF LPAREN e= expression RPAREN then= statement ({...}? ELSE els= statement )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1417:9: IF LPAREN e= expression RPAREN then= statement ({...}? ELSE els= statement )?
			{
			DebugLocation(1417, 9);
			Match(input,IF,Follow._IF_in_ifStatement7011); 
			DebugLocation(1417, 12);
			Match(input,LPAREN,Follow._LPAREN_in_ifStatement7013); 
			DebugLocation(1417, 20);
			PushFollow(Follow._expression_in_ifStatement7017);
			e=expression();
			PopFollow();

			DebugLocation(1417, 32);
			Match(input,RPAREN,Follow._RPAREN_in_ifStatement7019); 
			DebugLocation(1418, 9);
			 end = input.LT(-1); 
			DebugLocation(1419, 13);
			PushFollow(Follow._statement_in_ifStatement7041);
			then=statement();
			PopFollow();

			DebugLocation(1420, 9);
			// ..\\ES3.g:1420:9: ({...}? ELSE els= statement )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==ELSE))
			{
				int LA66_1 = input.LA(2);

				if ((( input.LA(1) == ELSE )))
				{
					alt66 = 1;
				}
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1421:13: {...}? ELSE els= statement
				{
				DebugLocation(1421, 13);
				if (!(( input.LA(1) == ELSE )))
				{
					throw new FailedPredicateException(input, "ifStatement", " input.LA(1) == ELSE ");
				}
				DebugLocation(1422, 13);
				Match(input,ELSE,Follow._ELSE_in_ifStatement7079); 
				DebugLocation(1422, 21);
				PushFollow(Follow._statement_in_ifStatement7083);
				els=statement();
				PopFollow();

				DebugLocation(1423, 13);
				 elseStatement = els; 

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(1425, 9);
			 value = new IfSyntax(e, then, elseStatement, GetLocation(start, end)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifStatement", 61);
			LeaveRule("ifStatement", 61);
			LeaveRule_ifStatement();
		}
		DebugLocation(1426, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return value;

	}
	// $ANTLR end "ifStatement"


	partial void EnterRule_iterationStatement();
	partial void LeaveRule_iterationStatement();

	// $ANTLR start "iterationStatement"
	// ..\\ES3.g:1432:1: iterationStatement returns [SyntaxNode value] : (dos= doStatement |wh= whileStatement |fo= forStatement );
	[GrammarRule("iterationStatement")]
	private SyntaxNode iterationStatement()
	{
		EnterRule_iterationStatement();
		EnterRule("iterationStatement", 62);
		TraceIn("iterationStatement", 62);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode dos = default(SyntaxNode);
		SyntaxNode wh = default(SyntaxNode);
		SyntaxNode fo = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "iterationStatement");
		DebugLocation(1432, 1);
		try
		{
			// ..\\ES3.g:1433:2: (dos= doStatement |wh= whileStatement |fo= forStatement )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case DO:
				{
				alt67 = 1;
				}
				break;
			case WHILE:
				{
				alt67 = 2;
				}
				break;
			case FOR:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1433:4: dos= doStatement
				{
				DebugLocation(1433, 7);
				PushFollow(Follow._doStatement_in_iterationStatement7140);
				dos=doStatement();
				PopFollow();

				DebugLocation(1433, 20);
				 value = dos; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1434:4: wh= whileStatement
				{
				DebugLocation(1434, 6);
				PushFollow(Follow._whileStatement_in_iterationStatement7149);
				wh=whileStatement();
				PopFollow();

				DebugLocation(1434, 23);
				 value = wh; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1435:4: fo= forStatement
				{
				DebugLocation(1435, 6);
				PushFollow(Follow._forStatement_in_iterationStatement7159);
				fo=forStatement();
				PopFollow();

				DebugLocation(1435, 21);
				 value = fo; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("iterationStatement", 62);
			LeaveRule("iterationStatement", 62);
			LeaveRule_iterationStatement();
		}
		DebugLocation(1436, 1);
		} finally { DebugExitRule(GrammarFileName, "iterationStatement"); }
		return value;

	}
	// $ANTLR end "iterationStatement"


	partial void EnterRule_doStatement();
	partial void LeaveRule_doStatement();

	// $ANTLR start "doStatement"
	// ..\\ES3.g:1438:1: doStatement returns [SyntaxNode value] : DO st= statement WHILE LPAREN e= expression RPAREN semic ;
	[GrammarRule("doStatement")]
	private SyntaxNode doStatement()
	{
		EnterRule_doStatement();
		EnterRule("doStatement", 63);
		TraceIn("doStatement", 63);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode st = default(SyntaxNode);
		ExpressionSyntax e = default(ExpressionSyntax);


		    IToken start;

		try { DebugEnterRule(GrammarFileName, "doStatement");
		DebugLocation(1438, 1);
		try
		{
			// ..\\ES3.g:1442:2: ( DO st= statement WHILE LPAREN e= expression RPAREN semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1443:9: DO st= statement WHILE LPAREN e= expression RPAREN semic
			{
			DebugLocation(1443, 9);
			Match(input,DO,Follow._DO_in_doStatement7191); 
			DebugLocation(1443, 14);
			PushFollow(Follow._statement_in_doStatement7195);
			st=statement();
			PopFollow();

			DebugLocation(1444, 9);
			 start = input.LT(1); 
			DebugLocation(1445, 9);
			Match(input,WHILE,Follow._WHILE_in_doStatement7215); 
			DebugLocation(1445, 15);
			Match(input,LPAREN,Follow._LPAREN_in_doStatement7217); 
			DebugLocation(1445, 23);
			PushFollow(Follow._expression_in_doStatement7221);
			e=expression();
			PopFollow();

			DebugLocation(1445, 35);
			Match(input,RPAREN,Follow._RPAREN_in_doStatement7223); 
			DebugLocation(1445, 42);
			PushFollow(Follow._semic_in_doStatement7225);
			semic();
			PopFollow();

			DebugLocation(1446, 9);
			 value = new DoWhileSyntax(e, st, GetLocation(start, input.LT(-1))); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("doStatement", 63);
			LeaveRule("doStatement", 63);
			LeaveRule_doStatement();
		}
		DebugLocation(1447, 1);
		} finally { DebugExitRule(GrammarFileName, "doStatement"); }
		return value;

	}
	// $ANTLR end "doStatement"


	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// ..\\ES3.g:1449:1: whileStatement returns [SyntaxNode value] : WHILE LPAREN e= expression RPAREN st= statement ;
	[GrammarRule("whileStatement")]
	private SyntaxNode whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 64);
		TraceIn("whileStatement", 64);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);
		SyntaxNode st = default(SyntaxNode);


		    var start = input.LT(1);
		    IToken end;

		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(1449, 1);
		try
		{
			// ..\\ES3.g:1454:2: ( WHILE LPAREN e= expression RPAREN st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1455:9: WHILE LPAREN e= expression RPAREN st= statement
			{
			DebugLocation(1455, 9);
			Match(input,WHILE,Follow._WHILE_in_whileStatement7264); 
			DebugLocation(1455, 15);
			Match(input,LPAREN,Follow._LPAREN_in_whileStatement7266); 
			DebugLocation(1455, 23);
			PushFollow(Follow._expression_in_whileStatement7270);
			e=expression();
			PopFollow();

			DebugLocation(1455, 35);
			Match(input,RPAREN,Follow._RPAREN_in_whileStatement7272); 
			DebugLocation(1456, 9);
			 end = input.LT(-1); 
			DebugLocation(1457, 11);
			PushFollow(Follow._statement_in_whileStatement7294);
			st=statement();
			PopFollow();

			DebugLocation(1458, 9);
			 value = new WhileSyntax(e, st, GetLocation(start, end)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whileStatement", 64);
			LeaveRule("whileStatement", 64);
			LeaveRule_whileStatement();
		}
		DebugLocation(1459, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return value;

	}
	// $ANTLR end "whileStatement"


	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// ..\\ES3.g:1503:1: forStatement returns [SyntaxNode value] : FOR LPAREN fo= forControl RPAREN st= statement ;
	[GrammarRule("forStatement")]
	private SyntaxNode forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 65);
		TraceIn("forStatement", 65);
		SyntaxNode value = default(SyntaxNode);

		ForBuilder fo = default(ForBuilder);
		SyntaxNode st = default(SyntaxNode);


		    ForBuilder builder;
		    var start = input.LT(1);
		    IToken end;

		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(1503, 1);
		try
		{
			// ..\\ES3.g:1512:2: ( FOR LPAREN fo= forControl RPAREN st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1513:9: FOR LPAREN fo= forControl RPAREN st= statement
			{
			DebugLocation(1513, 9);
			Match(input,FOR,Follow._FOR_in_forStatement7339); 
			DebugLocation(1514, 9);
			Match(input,LPAREN,Follow._LPAREN_in_forStatement7349); 
			DebugLocation(1515, 11);
			PushFollow(Follow._forControl_in_forStatement7361);
			fo=forControl();
			PopFollow();

			DebugLocation(1516, 9);
			 builder = fo; 
			DebugLocation(1517, 9);
			Match(input,RPAREN,Follow._RPAREN_in_forStatement7381); 
			DebugLocation(1518, 9);
			 end = input.LT(-1); 
			DebugLocation(1519, 11);
			PushFollow(Follow._statement_in_forStatement7403);
			st=statement();
			PopFollow();

			DebugLocation(1520, 9);
			 builder.Body = st; 

			}


			    value = builder.CreateFor(GetLocation(start, end));

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forStatement", 65);
			LeaveRule("forStatement", 65);
			LeaveRule_forStatement();
		}
		DebugLocation(1521, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return value;

	}
	// $ANTLR end "forStatement"


	partial void EnterRule_forControl();
	partial void LeaveRule_forControl();

	// $ANTLR start "forControl"
	// ..\\ES3.g:1523:1: forControl returns [ForBuilder value] : (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic );
	[GrammarRule("forControl")]
	private ForBuilder forControl()
	{
		EnterRule_forControl();
		EnterRule("forControl", 66);
		TraceIn("forControl", 66);
		ForBuilder value = default(ForBuilder);

		ForBuilder ex1 = default(ForBuilder);
		ForBuilder ex2 = default(ForBuilder);
		ForBuilder ex3 = default(ForBuilder);

		try { DebugEnterRule(GrammarFileName, "forControl");
		DebugLocation(1523, 1);
		try
		{
			// ..\\ES3.g:1524:2: (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic )
			int alt68=3;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt68 = 1;
				}
				break;
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt68 = 2;
				}
				break;
			case SEMIC:
				{
				alt68 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1525:9: ex1= forControlVar
				{
				DebugLocation(1525, 12);
				PushFollow(Follow._forControlVar_in_forControl7438);
				ex1=forControlVar();
				PopFollow();

				DebugLocation(1526, 9);
				 value = ex1; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1528:9: ex2= forControlExpression
				{
				DebugLocation(1528, 12);
				PushFollow(Follow._forControlExpression_in_forControl7463);
				ex2=forControlExpression();
				PopFollow();

				DebugLocation(1529, 9);
				 value = ex2; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1531:9: ex3= forControlSemic
				{
				DebugLocation(1531, 12);
				PushFollow(Follow._forControlSemic_in_forControl7488);
				ex3=forControlSemic();
				PopFollow();

				DebugLocation(1532, 9);
				 value = ex3; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControl", 66);
			LeaveRule("forControl", 66);
			LeaveRule_forControl();
		}
		DebugLocation(1533, 1);
		} finally { DebugExitRule(GrammarFileName, "forControl"); }
		return value;

	}
	// $ANTLR end "forControl"


	partial void EnterRule_forControlVar();
	partial void LeaveRule_forControlVar();

	// $ANTLR start "forControlVar"
	// ..\\ES3.g:1535:1: forControlVar returns [ForBuilder value] : VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) ;
	[GrammarRule("forControlVar")]
	private ForBuilder forControlVar()
	{
		EnterRule_forControlVar();
		EnterRule("forControlVar", 67);
		TraceIn("forControlVar", 67);
		ForBuilder value = default(ForBuilder);

		VariableDeclaration first = default(VariableDeclaration);
		ExpressionSyntax ex = default(ExpressionSyntax);
		VariableDeclaration follow = default(VariableDeclaration);
		ExpressionSyntax ex1 = default(ExpressionSyntax);
		ExpressionSyntax ex2 = default(ExpressionSyntax);


		    value = new ForBuilder();
		    var declarations = new List<VariableDeclaration>();
		    IToken start;
		    IToken end = null;

		try { DebugEnterRule(GrammarFileName, "forControlVar");
		DebugLocation(1535, 1);
		try
		{
			// ..\\ES3.g:1545:2: ( VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1546:9: VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			{
			DebugLocation(1546, 9);
			 start = input.LT(1); 
			DebugLocation(1547, 9);
			Match(input,VAR,Follow._VAR_in_forControlVar7541); 
			DebugLocation(1547, 18);
			PushFollow(Follow._variableDeclarationNoIn_in_forControlVar7545);
			first=variableDeclarationNoIn();
			PopFollow();

			DebugLocation(1548, 9);
			 declarations.Add(first); 
			DebugLocation(1549, 6);
			// ..\\ES3.g:1549:6: ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==IN))
			{
				alt72 = 1;
			}
			else if ((LA72_0==COMMA||LA72_0==SEMIC))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1550:7: ( IN ex= expression )
				{
				DebugLocation(1550, 7);
				// ..\\ES3.g:1550:7: ( IN ex= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1551:17: IN ex= expression
				{
				DebugLocation(1551, 17);
				 end = input.LT(-1); 
				DebugLocation(1552, 8);
				Match(input,IN,Follow._IN_in_forControlVar7597); 
				DebugLocation(1552, 13);
				PushFollow(Follow._expression_in_forControlVar7601);
				ex=expression();
				PopFollow();

				DebugLocation(1553, 17);
				 value.Expression = ex; 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1556:7: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				{
				DebugLocation(1556, 7);
				// ..\\ES3.g:1556:7: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1557:8: ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )?
				{
				DebugLocation(1557, 8);
				// ..\\ES3.g:1557:8: ( COMMA follow= variableDeclarationNoIn )*
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_0 = input.LA(1);

					if ((LA69_0==COMMA))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch ( alt69 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1558:21: COMMA follow= variableDeclarationNoIn
						{
						DebugLocation(1558, 21);
						Match(input,COMMA,Follow._COMMA_in_forControlVar7674); 
						DebugLocation(1558, 33);
						PushFollow(Follow._variableDeclarationNoIn_in_forControlVar7678);
						follow=variableDeclarationNoIn();
						PopFollow();

						DebugLocation(1559, 21);
						 declarations.Add(follow); 

						}
						break;

					default:
						goto loop69;
					}
				}

				loop69:
					;

				} finally { DebugExitSubRule(69); }

				DebugLocation(1561, 17);
				 end = input.LT(-1); 
				DebugLocation(1562, 8);
				Match(input,SEMIC,Follow._SEMIC_in_forControlVar7746); 
				DebugLocation(1563, 17);
				// ..\\ES3.g:1563:17: (ex1= expression )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==ADD||LA70_0==DEC||LA70_0==DELETE||LA70_0==DecimalLiteral||LA70_0==FALSE||LA70_0==FUNCTION||LA70_0==HexIntegerLiteral||LA70_0==INC||LA70_0==INV||LA70_0==Identifier||(LA70_0>=LBRACE && LA70_0<=LBRACK)||LA70_0==LPAREN||(LA70_0>=NEW && LA70_0<=NOT)||LA70_0==NULL||LA70_0==OctalIntegerLiteral||LA70_0==RegularExpressionLiteral||LA70_0==SUB||LA70_0==StringLiteral||LA70_0==THIS||LA70_0==TRUE||LA70_0==TYPEOF||LA70_0==VOID))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1564:21: ex1= expression
					{
					DebugLocation(1564, 24);
					PushFollow(Follow._expression_in_forControlVar7788);
					ex1=expression();
					PopFollow();

					DebugLocation(1565, 21);
					 value.Test = ex1;

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(1567, 17);
				Match(input,SEMIC,Follow._SEMIC_in_forControlVar7847); 
				DebugLocation(1568, 17);
				// ..\\ES3.g:1568:17: (ex2= expression )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==ADD||LA71_0==DEC||LA71_0==DELETE||LA71_0==DecimalLiteral||LA71_0==FALSE||LA71_0==FUNCTION||LA71_0==HexIntegerLiteral||LA71_0==INC||LA71_0==INV||LA71_0==Identifier||(LA71_0>=LBRACE && LA71_0<=LBRACK)||LA71_0==LPAREN||(LA71_0>=NEW && LA71_0<=NOT)||LA71_0==NULL||LA71_0==OctalIntegerLiteral||LA71_0==RegularExpressionLiteral||LA71_0==SUB||LA71_0==StringLiteral||LA71_0==THIS||LA71_0==TRUE||LA71_0==TYPEOF||LA71_0==VOID))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1569:21: ex2= expression
					{
					DebugLocation(1569, 24);
					PushFollow(Follow._expression_in_forControlVar7889);
					ex2=expression();
					PopFollow();

					DebugLocation(1570, 21);
					 value.Increment = ex2; 

					}
					break;

				}
				} finally { DebugExitSubRule(71); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}


			    value.Initialization = new VariableDeclarationSyntax(declarations, GetLocation(start, end));

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControlVar", 67);
			LeaveRule("forControlVar", 67);
			LeaveRule_forControlVar();
		}
		DebugLocation(1574, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlVar"); }
		return value;

	}
	// $ANTLR end "forControlVar"


	partial void EnterRule_forControlExpression();
	partial void LeaveRule_forControlExpression();

	// $ANTLR start "forControlExpression"
	// ..\\ES3.g:1576:1: forControlExpression returns [ForBuilder value] : ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) ;
	[GrammarRule("forControlExpression")]
	private ForBuilder forControlExpression()
	{
		EnterRule_forControlExpression();
		EnterRule("forControlExpression", 68);
		TraceIn("forControlExpression", 68);
		ForBuilder value = default(ForBuilder);

		ExpressionSyntax ex1 = default(ExpressionSyntax);
		ExpressionSyntax ex2 = default(ExpressionSyntax);
		ExpressionSyntax ex3 = default(ExpressionSyntax);


		    value = new ForBuilder();
			bool isLhs;

		try { DebugEnterRule(GrammarFileName, "forControlExpression");
		DebugLocation(1576, 1);
		try
		{
			// ..\\ES3.g:1582:2: (ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1583:9: ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			{
			DebugLocation(1583, 12);
			PushFollow(Follow._expressionNoIn_in_forControlExpression7975);
			ex1=expressionNoIn();
			PopFollow();

			DebugLocation(1584, 9);
			 value.Initialization = ex1; isLhs = IsLeftHandSideIn(ex1); 
			DebugLocation(1585, 6);
			// ..\\ES3.g:1585:6: ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IN))
			{
				alt75 = 1;
			}
			else if ((LA75_0==SEMIC))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1586:7: {...}? ( IN ex2= expression )
				{
				DebugLocation(1586, 7);
				if (!(( isLhs )))
				{
					throw new FailedPredicateException(input, "forControlExpression", " isLhs ");
				}
				DebugLocation(1587, 13);
				// ..\\ES3.g:1587:13: ( IN ex2= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1588:8: IN ex2= expression
				{
				DebugLocation(1588, 8);
				Match(input,IN,Follow._IN_in_forControlExpression8024); 
				DebugLocation(1588, 14);
				PushFollow(Follow._expression_in_forControlExpression8028);
				ex2=expression();
				PopFollow();

				DebugLocation(1589, 17);
				 value.Expression = ex2; 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1592:7: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				{
				DebugLocation(1592, 7);
				// ..\\ES3.g:1592:7: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1593:8: SEMIC (ex2= expression )? SEMIC (ex3= expression )?
				{
				DebugLocation(1593, 8);
				Match(input,SEMIC,Follow._SEMIC_in_forControlExpression8079); 
				DebugLocation(1594, 17);
				// ..\\ES3.g:1594:17: (ex2= expression )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==ADD||LA73_0==DEC||LA73_0==DELETE||LA73_0==DecimalLiteral||LA73_0==FALSE||LA73_0==FUNCTION||LA73_0==HexIntegerLiteral||LA73_0==INC||LA73_0==INV||LA73_0==Identifier||(LA73_0>=LBRACE && LA73_0<=LBRACK)||LA73_0==LPAREN||(LA73_0>=NEW && LA73_0<=NOT)||LA73_0==NULL||LA73_0==OctalIntegerLiteral||LA73_0==RegularExpressionLiteral||LA73_0==SUB||LA73_0==StringLiteral||LA73_0==THIS||LA73_0==TRUE||LA73_0==TYPEOF||LA73_0==VOID))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1595:21: ex2= expression
					{
					DebugLocation(1595, 24);
					PushFollow(Follow._expression_in_forControlExpression8121);
					ex2=expression();
					PopFollow();

					DebugLocation(1596, 21);
					 value.Test = ex2;

					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(1598, 17);
				Match(input,SEMIC,Follow._SEMIC_in_forControlExpression8180); 
				DebugLocation(1599, 17);
				// ..\\ES3.g:1599:17: (ex3= expression )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==ADD||LA74_0==DEC||LA74_0==DELETE||LA74_0==DecimalLiteral||LA74_0==FALSE||LA74_0==FUNCTION||LA74_0==HexIntegerLiteral||LA74_0==INC||LA74_0==INV||LA74_0==Identifier||(LA74_0>=LBRACE && LA74_0<=LBRACK)||LA74_0==LPAREN||(LA74_0>=NEW && LA74_0<=NOT)||LA74_0==NULL||LA74_0==OctalIntegerLiteral||LA74_0==RegularExpressionLiteral||LA74_0==SUB||LA74_0==StringLiteral||LA74_0==THIS||LA74_0==TRUE||LA74_0==TYPEOF||LA74_0==VOID))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1600:21: ex3= expression
					{
					DebugLocation(1600, 24);
					PushFollow(Follow._expression_in_forControlExpression8222);
					ex3=expression();
					PopFollow();

					DebugLocation(1601, 21);
					 value.Increment = ex3; 

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(75); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControlExpression", 68);
			LeaveRule("forControlExpression", 68);
			LeaveRule_forControlExpression();
		}
		DebugLocation(1605, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlExpression"); }
		return value;

	}
	// $ANTLR end "forControlExpression"


	partial void EnterRule_forControlSemic();
	partial void LeaveRule_forControlSemic();

	// $ANTLR start "forControlSemic"
	// ..\\ES3.g:1607:1: forControlSemic returns [ForBuilder value] : SEMIC (ex1= expression )? SEMIC (ex2= expression )? ;
	[GrammarRule("forControlSemic")]
	private ForBuilder forControlSemic()
	{
		EnterRule_forControlSemic();
		EnterRule("forControlSemic", 69);
		TraceIn("forControlSemic", 69);
		ForBuilder value = default(ForBuilder);

		ExpressionSyntax ex1 = default(ExpressionSyntax);
		ExpressionSyntax ex2 = default(ExpressionSyntax);


			value = new ForBuilder();

		try { DebugEnterRule(GrammarFileName, "forControlSemic");
		DebugLocation(1607, 1);
		try
		{
			// ..\\ES3.g:1611:2: ( SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1612:9: SEMIC (ex1= expression )? SEMIC (ex2= expression )?
			{
			DebugLocation(1612, 9);
			Match(input,SEMIC,Follow._SEMIC_in_forControlSemic8305); 
			DebugLocation(1613, 9);
			// ..\\ES3.g:1613:9: (ex1= expression )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==ADD||LA76_0==DEC||LA76_0==DELETE||LA76_0==DecimalLiteral||LA76_0==FALSE||LA76_0==FUNCTION||LA76_0==HexIntegerLiteral||LA76_0==INC||LA76_0==INV||LA76_0==Identifier||(LA76_0>=LBRACE && LA76_0<=LBRACK)||LA76_0==LPAREN||(LA76_0>=NEW && LA76_0<=NOT)||LA76_0==NULL||LA76_0==OctalIntegerLiteral||LA76_0==RegularExpressionLiteral||LA76_0==SUB||LA76_0==StringLiteral||LA76_0==THIS||LA76_0==TRUE||LA76_0==TYPEOF||LA76_0==VOID))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1614:13: ex1= expression
				{
				DebugLocation(1614, 16);
				PushFollow(Follow._expression_in_forControlSemic8331);
				ex1=expression();
				PopFollow();

				DebugLocation(1615, 13);
				 value.Test = ex1;

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(1617, 9);
			Match(input,SEMIC,Follow._SEMIC_in_forControlSemic8366); 
			DebugLocation(1618, 9);
			// ..\\ES3.g:1618:9: (ex2= expression )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==ADD||LA77_0==DEC||LA77_0==DELETE||LA77_0==DecimalLiteral||LA77_0==FALSE||LA77_0==FUNCTION||LA77_0==HexIntegerLiteral||LA77_0==INC||LA77_0==INV||LA77_0==Identifier||(LA77_0>=LBRACE && LA77_0<=LBRACK)||LA77_0==LPAREN||(LA77_0>=NEW && LA77_0<=NOT)||LA77_0==NULL||LA77_0==OctalIntegerLiteral||LA77_0==RegularExpressionLiteral||LA77_0==SUB||LA77_0==StringLiteral||LA77_0==THIS||LA77_0==TRUE||LA77_0==TYPEOF||LA77_0==VOID))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1619:13: ex2= expression
				{
				DebugLocation(1619, 16);
				PushFollow(Follow._expression_in_forControlSemic8392);
				ex2=expression();
				PopFollow();

				DebugLocation(1620, 13);
				 value.Increment = ex2; 

				}
				break;

			}
			} finally { DebugExitSubRule(77); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControlSemic", 69);
			LeaveRule("forControlSemic", 69);
			LeaveRule_forControlSemic();
		}
		DebugLocation(1622, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlSemic"); }
		return value;

	}
	// $ANTLR end "forControlSemic"


	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();

	// $ANTLR start "continueStatement"
	// ..\\ES3.g:1633:1: continueStatement returns [SyntaxNode value] : CONTINUE (lb= Identifier )? semic ;
	[GrammarRule("continueStatement")]
	private SyntaxNode continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 70);
		TraceIn("continueStatement", 70);
		SyntaxNode value = default(SyntaxNode);

		IToken lb = default(IToken);

		 
			string label = null;
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(1633, 1);
		try
		{
			// ..\\ES3.g:1638:2: ( CONTINUE (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1639:9: CONTINUE (lb= Identifier )? semic
			{
			DebugLocation(1639, 9);
			Match(input,CONTINUE,Follow._CONTINUE_in_continueStatement8452); 
			DebugLocation(1640, 9);
			 if (input.LA(1) == Identifier) PromoteEol(); 
			DebugLocation(1641, 9);
			// ..\\ES3.g:1641:9: (lb= Identifier )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==Identifier))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1642:13: lb= Identifier
				{
				DebugLocation(1642, 15);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_continueStatement8488); 
				DebugLocation(1643, 13);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(1645, 9);
			PushFollow(Follow._semic_in_continueStatement8523);
			semic();
			PopFollow();

			DebugLocation(1646, 9);
			 value = new ContinueSyntax(label, GetLocation(start, input.LT(-1))); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("continueStatement", 70);
			LeaveRule("continueStatement", 70);
			LeaveRule_continueStatement();
		}
		DebugLocation(1647, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return value;

	}
	// $ANTLR end "continueStatement"


	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();

	// $ANTLR start "breakStatement"
	// ..\\ES3.g:1658:1: breakStatement returns [SyntaxNode value] : BREAK (lb= Identifier )? semic ;
	[GrammarRule("breakStatement")]
	private SyntaxNode breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 71);
		TraceIn("breakStatement", 71);
		SyntaxNode value = default(SyntaxNode);

		IToken lb = default(IToken);

		 
			string label = null;
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(1658, 1);
		try
		{
			// ..\\ES3.g:1663:2: ( BREAK (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1664:9: BREAK (lb= Identifier )? semic
			{
			DebugLocation(1664, 9);
			Match(input,BREAK,Follow._BREAK_in_breakStatement8568); 
			DebugLocation(1665, 9);
			 if (input.LA(1) == Identifier) PromoteEol(); 
			DebugLocation(1666, 9);
			// ..\\ES3.g:1666:9: (lb= Identifier )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==Identifier))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1667:13: lb= Identifier
				{
				DebugLocation(1667, 15);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_breakStatement8604); 
				DebugLocation(1667, 27);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(1669, 9);
			PushFollow(Follow._semic_in_breakStatement8627);
			semic();
			PopFollow();

			DebugLocation(1670, 9);
			 value = new BreakSyntax(label, GetLocation(start, input.LT(-1))); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("breakStatement", 71);
			LeaveRule("breakStatement", 71);
			LeaveRule_breakStatement();
		}
		DebugLocation(1671, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return value;

	}
	// $ANTLR end "breakStatement"


	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// ..\\ES3.g:1690:1: returnStatement returns [ReturnSyntax value] : RETURN (expr= expression )? semic ;
	[GrammarRule("returnStatement")]
	private ReturnSyntax returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 72);
		TraceIn("returnStatement", 72);
		ReturnSyntax value = default(ReturnSyntax);

		ExpressionSyntax expr = default(ExpressionSyntax);


		    ExpressionSyntax returnExpression = null;
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(1690, 1);
		try
		{
			// ..\\ES3.g:1695:2: ( RETURN (expr= expression )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1696:9: RETURN (expr= expression )? semic
			{
			DebugLocation(1696, 9);
			Match(input,RETURN,Follow._RETURN_in_returnStatement8672); 
			DebugLocation(1697, 9);
			 PromoteEol(); 
			DebugLocation(1698, 9);
			// ..\\ES3.g:1698:9: (expr= expression )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==ADD||LA80_0==DEC||LA80_0==DELETE||LA80_0==DecimalLiteral||LA80_0==FALSE||LA80_0==FUNCTION||LA80_0==HexIntegerLiteral||LA80_0==INC||LA80_0==INV||LA80_0==Identifier||(LA80_0>=LBRACE && LA80_0<=LBRACK)||LA80_0==LPAREN||(LA80_0>=NEW && LA80_0<=NOT)||LA80_0==NULL||LA80_0==OctalIntegerLiteral||LA80_0==RegularExpressionLiteral||LA80_0==SUB||LA80_0==StringLiteral||LA80_0==THIS||LA80_0==TRUE||LA80_0==TYPEOF||LA80_0==VOID))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1699:13: expr= expression
				{
				DebugLocation(1699, 17);
				PushFollow(Follow._expression_in_returnStatement8708);
				expr=expression();
				PopFollow();

				DebugLocation(1700, 13);
				 returnExpression = expr; 

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(1702, 9);
			PushFollow(Follow._semic_in_returnStatement8743);
			semic();
			PopFollow();

			DebugLocation(1703, 9);
			 value = new ReturnSyntax(returnExpression, GetLocation(start, input.LT(-1))); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("returnStatement", 72);
			LeaveRule("returnStatement", 72);
			LeaveRule_returnStatement();
		}
		DebugLocation(1704, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return value;

	}
	// $ANTLR end "returnStatement"


	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();

	// $ANTLR start "withStatement"
	// ..\\ES3.g:1710:1: withStatement returns [SyntaxNode value] : WITH LPAREN exp= expression RPAREN smt= statement ;
	[GrammarRule("withStatement")]
	private SyntaxNode withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 73);
		TraceIn("withStatement", 73);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax exp = default(ExpressionSyntax);
		SyntaxNode smt = default(SyntaxNode);


		    var start = input.LT(1);
		    IToken end;

		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(1710, 1);
		try
		{
			// ..\\ES3.g:1715:2: ( WITH LPAREN exp= expression RPAREN smt= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1716:9: WITH LPAREN exp= expression RPAREN smt= statement
			{
			DebugLocation(1716, 9);
			Match(input,WITH,Follow._WITH_in_withStatement8786); 
			DebugLocation(1716, 14);
			Match(input,LPAREN,Follow._LPAREN_in_withStatement8788); 
			DebugLocation(1716, 24);
			PushFollow(Follow._expression_in_withStatement8792);
			exp=expression();
			PopFollow();

			DebugLocation(1716, 36);
			Match(input,RPAREN,Follow._RPAREN_in_withStatement8794); 
			DebugLocation(1717, 9);
			 end = input.LT(-1); 
			DebugLocation(1718, 12);
			PushFollow(Follow._statement_in_withStatement8816);
			smt=statement();
			PopFollow();

			DebugLocation(1719, 9);
			 value = new WithSyntax(exp, smt, GetLocation(start, end)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("withStatement", 73);
			LeaveRule("withStatement", 73);
			LeaveRule_withStatement();
		}
		DebugLocation(1720, 1);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return value;

	}
	// $ANTLR end "withStatement"


	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// ..\\ES3.g:1726:1: switchStatement returns [SyntaxNode value] : SWITCH LPAREN e= expression RPAREN LBRACE ({...}? =>def= defaultClause |cc= caseClause )* RBRACE ;
	[GrammarRule("switchStatement")]
	private SyntaxNode switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 74);
		TraceIn("switchStatement", 74);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);
		DefaultClause def = default(DefaultClause);
		CaseClause cc = default(CaseClause);


		    DefaultClause block = null;
		    var cases = new List<CaseClause>();
		    var start = input.LT(1);
		    IToken end;

		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(1726, 1);
		try
		{
			// ..\\ES3.g:1733:2: ( SWITCH LPAREN e= expression RPAREN LBRACE ({...}? =>def= defaultClause |cc= caseClause )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1734:9: SWITCH LPAREN e= expression RPAREN LBRACE ({...}? =>def= defaultClause |cc= caseClause )* RBRACE
			{
			DebugLocation(1734, 9);
			Match(input,SWITCH,Follow._SWITCH_in_switchStatement8859); 
			DebugLocation(1734, 16);
			Match(input,LPAREN,Follow._LPAREN_in_switchStatement8861); 
			DebugLocation(1734, 24);
			PushFollow(Follow._expression_in_switchStatement8865);
			e=expression();
			PopFollow();

			DebugLocation(1734, 36);
			Match(input,RPAREN,Follow._RPAREN_in_switchStatement8867); 
			DebugLocation(1735, 9);
			 end = input.LT(-1); 
			DebugLocation(1736, 9);
			Match(input,LBRACE,Follow._LBRACE_in_switchStatement8887); 
			DebugLocation(1737, 9);
			// ..\\ES3.g:1737:9: ({...}? =>def= defaultClause |cc= caseClause )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=3;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==DEFAULT) && (( block == null )))
				{
					alt81 = 1;
				}
				else if ((LA81_0==CASE))
				{
					alt81 = 2;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1738:13: {...}? =>def= defaultClause
					{
					DebugLocation(1738, 13);
					if (!(( block == null )))
					{
						throw new FailedPredicateException(input, "switchStatement", " block == null ");
					}
					DebugLocation(1739, 16);
					PushFollow(Follow._defaultClause_in_switchStatement8928);
					def=defaultClause();
					PopFollow();

					DebugLocation(1740, 13);
					 block = def; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:1742:13: cc= caseClause
					{
					DebugLocation(1742, 15);
					PushFollow(Follow._caseClause_in_switchStatement8968);
					cc=caseClause();
					PopFollow();

					DebugLocation(1743, 13);
					 cases.Add(cc); 

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(1745, 9);
			Match(input,RBRACE,Follow._RBRACE_in_switchStatement9003); 
			DebugLocation(1746, 9);
			 value = new SwitchSyntax(e, cases, block, GetLocation(start, end)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchStatement", 74);
			LeaveRule("switchStatement", 74);
			LeaveRule_switchStatement();
		}
		DebugLocation(1747, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return value;

	}
	// $ANTLR end "switchStatement"


	partial void EnterRule_caseClause();
	partial void LeaveRule_caseClause();

	// $ANTLR start "caseClause"
	// ..\\ES3.g:1749:1: caseClause returns [CaseClause value] : CASE e= expression COLON (st= statement )* ;
	[GrammarRule("caseClause")]
	private CaseClause caseClause()
	{
		EnterRule_caseClause();
		EnterRule("caseClause", 75);
		TraceIn("caseClause", 75);
		CaseClause value = default(CaseClause);

		ExpressionSyntax e = default(ExpressionSyntax);
		SyntaxNode st = default(SyntaxNode);


		    var statements = new List<SyntaxNode>();
		    var start = input.LT(1);
		    IToken end;

		try { DebugEnterRule(GrammarFileName, "caseClause");
		DebugLocation(1749, 1);
		try
		{
			// ..\\ES3.g:1755:2: ( CASE e= expression COLON (st= statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1756:9: CASE e= expression COLON (st= statement )*
			{
			DebugLocation(1756, 9);
			Match(input,CASE,Follow._CASE_in_caseClause9041); 
			DebugLocation(1756, 15);
			PushFollow(Follow._expression_in_caseClause9045);
			e=expression();
			PopFollow();

			DebugLocation(1756, 27);
			Match(input,COLON,Follow._COLON_in_caseClause9047); 
			DebugLocation(1757, 9);
			 end = input.LT(-1); 
			DebugLocation(1758, 9);
			// ..\\ES3.g:1758:9: (st= statement )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==ADD||LA82_0==BREAK||LA82_0==CONTINUE||LA82_0==DEC||LA82_0==DELETE||LA82_0==DO||LA82_0==DecimalLiteral||LA82_0==FALSE||LA82_0==FOR||LA82_0==FUNCTION||(LA82_0>=HexIntegerLiteral && LA82_0<=IF)||LA82_0==INC||LA82_0==INV||LA82_0==Identifier||(LA82_0>=LBRACE && LA82_0<=LBRACK)||LA82_0==LPAREN||(LA82_0>=NEW && LA82_0<=NOT)||LA82_0==NULL||LA82_0==OctalIntegerLiteral||LA82_0==RETURN||LA82_0==RegularExpressionLiteral||LA82_0==SEMIC||LA82_0==SUB||LA82_0==SWITCH||LA82_0==StringLiteral||(LA82_0>=THIS && LA82_0<=THROW)||(LA82_0>=TRUE && LA82_0<=TYPEOF)||(LA82_0>=VAR && LA82_0<=VOID)||(LA82_0>=WHILE && LA82_0<=WITH)))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1759:13: st= statement
					{
					DebugLocation(1759, 15);
					PushFollow(Follow._statement_in_caseClause9083);
					st=statement();
					PopFollow();

					DebugLocation(1760, 13);
					 statements.Add(st); 

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(1762, 9);

			            value = new CaseClause(
			                e,
			                new BlockSyntax(statements),
			                GetLocation(start, end)
			            );
			        

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseClause", 75);
			LeaveRule("caseClause", 75);
			LeaveRule_caseClause();
		}
		DebugLocation(1769, 1);
		} finally { DebugExitRule(GrammarFileName, "caseClause"); }
		return value;

	}
	// $ANTLR end "caseClause"


	partial void EnterRule_defaultClause();
	partial void LeaveRule_defaultClause();

	// $ANTLR start "defaultClause"
	// ..\\ES3.g:1771:1: defaultClause returns [DefaultClause value] : DEFAULT COLON (st= statement )* ;
	[GrammarRule("defaultClause")]
	private DefaultClause defaultClause()
	{
		EnterRule_defaultClause();
		EnterRule("defaultClause", 76);
		TraceIn("defaultClause", 76);
		DefaultClause value = default(DefaultClause);

		SyntaxNode st = default(SyntaxNode);


		    var statements = new List<SyntaxNode>();
		    var start = input.LT(1);
		    IToken end;

		try { DebugEnterRule(GrammarFileName, "defaultClause");
		DebugLocation(1771, 1);
		try
		{
			// ..\\ES3.g:1777:2: ( DEFAULT COLON (st= statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1778:9: DEFAULT COLON (st= statement )*
			{
			DebugLocation(1778, 9);
			Match(input,DEFAULT,Follow._DEFAULT_in_defaultClause9147); 
			DebugLocation(1778, 17);
			Match(input,COLON,Follow._COLON_in_defaultClause9149); 
			DebugLocation(1779, 9);
			 end = input.LT(-1); 
			DebugLocation(1780, 9);
			// ..\\ES3.g:1780:9: (st= statement )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==ADD||LA83_0==BREAK||LA83_0==CONTINUE||LA83_0==DEC||LA83_0==DELETE||LA83_0==DO||LA83_0==DecimalLiteral||LA83_0==FALSE||LA83_0==FOR||LA83_0==FUNCTION||(LA83_0>=HexIntegerLiteral && LA83_0<=IF)||LA83_0==INC||LA83_0==INV||LA83_0==Identifier||(LA83_0>=LBRACE && LA83_0<=LBRACK)||LA83_0==LPAREN||(LA83_0>=NEW && LA83_0<=NOT)||LA83_0==NULL||LA83_0==OctalIntegerLiteral||LA83_0==RETURN||LA83_0==RegularExpressionLiteral||LA83_0==SEMIC||LA83_0==SUB||LA83_0==SWITCH||LA83_0==StringLiteral||(LA83_0>=THIS && LA83_0<=THROW)||(LA83_0>=TRUE && LA83_0<=TYPEOF)||(LA83_0>=VAR && LA83_0<=VOID)||(LA83_0>=WHILE && LA83_0<=WITH)))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1781:13: st= statement
					{
					DebugLocation(1781, 15);
					PushFollow(Follow._statement_in_defaultClause9185);
					st=statement();
					PopFollow();

					DebugLocation(1782, 13);
					 statements.Add(st); 

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }

			DebugLocation(1784, 9);

			            value = new DefaultClause(
			                new BlockSyntax(statements),
			                GetLocation(start, end)
			            );
			        

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defaultClause", 76);
			LeaveRule("defaultClause", 76);
			LeaveRule_defaultClause();
		}
		DebugLocation(1790, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultClause"); }
		return value;

	}
	// $ANTLR end "defaultClause"


	partial void EnterRule_labelledStatement();
	partial void LeaveRule_labelledStatement();

	// $ANTLR start "labelledStatement"
	// ..\\ES3.g:1796:1: labelledStatement returns [SyntaxNode value] : lb= Identifier COLON st= statement ;
	[GrammarRule("labelledStatement")]
	private SyntaxNode labelledStatement()
	{
		EnterRule_labelledStatement();
		EnterRule("labelledStatement", 77);
		TraceIn("labelledStatement", 77);
		SyntaxNode value = default(SyntaxNode);

		IToken lb = default(IToken);
		SyntaxNode st = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "labelledStatement");
		DebugLocation(1796, 1);
		try
		{
			// ..\\ES3.g:1797:2: (lb= Identifier COLON st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1798:9: lb= Identifier COLON st= statement
			{
			DebugLocation(1798, 11);
			lb=(IToken)Match(input,Identifier,Follow._Identifier_in_labelledStatement9251); 
			DebugLocation(1798, 23);
			Match(input,COLON,Follow._COLON_in_labelledStatement9253); 
			DebugLocation(1798, 31);
			PushFollow(Follow._statement_in_labelledStatement9257);
			st=statement();
			PopFollow();

			DebugLocation(1799, 9);
			 value = new LabelSyntax(lb.Text, st); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("labelledStatement", 77);
			LeaveRule("labelledStatement", 77);
			LeaveRule_labelledStatement();
		}
		DebugLocation(1800, 1);
		} finally { DebugExitRule(GrammarFileName, "labelledStatement"); }
		return value;

	}
	// $ANTLR end "labelledStatement"


	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();

	// $ANTLR start "throwStatement"
	// ..\\ES3.g:1821:1: throwStatement returns [SyntaxNode value] : THROW exp= expression semic ;
	[GrammarRule("throwStatement")]
	private SyntaxNode throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 78);
		TraceIn("throwStatement", 78);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax exp = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(1821, 1);
		try
		{
			// ..\\ES3.g:1825:2: ( THROW exp= expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1826:9: THROW exp= expression semic
			{
			DebugLocation(1826, 9);
			Match(input,THROW,Follow._THROW_in_throwStatement9302); 
			DebugLocation(1826, 15);
			 PromoteEol(); 
			DebugLocation(1826, 36);
			PushFollow(Follow._expression_in_throwStatement9308);
			exp=expression();
			PopFollow();

			DebugLocation(1826, 48);
			PushFollow(Follow._semic_in_throwStatement9310);
			semic();
			PopFollow();

			DebugLocation(1827, 9);
			 value = new ThrowSyntax(exp, GetLocation(start, input.LT(-1))); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwStatement", 78);
			LeaveRule("throwStatement", 78);
			LeaveRule_throwStatement();
		}
		DebugLocation(1828, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return value;

	}
	// $ANTLR end "throwStatement"


	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();

	// $ANTLR start "tryStatement"
	// ..\\ES3.g:1834:1: tryStatement returns [TrySyntax value] : TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) ;
	[GrammarRule("tryStatement")]
	private TrySyntax tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 79);
		TraceIn("tryStatement", 79);
		TrySyntax value = default(TrySyntax);

		BlockSyntax b = default(BlockSyntax);
		CatchClause c = default(CatchClause);
		FinallyClause first = default(FinallyClause);
		FinallyClause last = default(FinallyClause);


		    CatchClause @catch = null;
		    FinallyClause @finally = null;

		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(1834, 1);
		try
		{
			// ..\\ES3.g:1839:2: ( TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1840:9: TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause )
			{
			DebugLocation(1840, 9);
			Match(input,TRY,Follow._TRY_in_tryStatement9352); 
			DebugLocation(1840, 14);
			PushFollow(Follow._block_in_tryStatement9356);
			b=block();
			PopFollow();

			DebugLocation(1841, 9);
			// ..\\ES3.g:1841:9: (c= catchClause (first= finallyClause )? |last= finallyClause )
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==CATCH))
			{
				alt85 = 1;
			}
			else if ((LA85_0==FINALLY))
			{
				alt85 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1842:13: c= catchClause (first= finallyClause )?
				{
				DebugLocation(1842, 14);
				PushFollow(Follow._catchClause_in_tryStatement9382);
				c=catchClause();
				PopFollow();

				DebugLocation(1843, 13);
				 @catch = c; 
				DebugLocation(1844, 13);
				// ..\\ES3.g:1844:13: (first= finallyClause )?
				int alt84=2;
				try { DebugEnterSubRule(84);
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==FINALLY))
				{
					alt84 = 1;
				}
				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1845:17: first= finallyClause
					{
					DebugLocation(1845, 22);
					PushFollow(Follow._finallyClause_in_tryStatement9430);
					first=finallyClause();
					PopFollow();

					DebugLocation(1846, 17);
					 @finally = first; 

					}
					break;

				}
				} finally { DebugExitSubRule(84); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1849:13: last= finallyClause
				{
				DebugLocation(1849, 17);
				PushFollow(Follow._finallyClause_in_tryStatement9489);
				last=finallyClause();
				PopFollow();

				DebugLocation(1850, 13);
				 @finally = last; 

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(1852, 9);
			 value = new TrySyntax(b, @catch, @finally); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tryStatement", 79);
			LeaveRule("tryStatement", 79);
			LeaveRule_tryStatement();
		}
		DebugLocation(1853, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return value;

	}
	// $ANTLR end "tryStatement"


	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();

	// $ANTLR start "catchClause"
	// ..\\ES3.g:1855:1: catchClause returns [CatchClause value] : CATCH LPAREN id= Identifier RPAREN b= block ;
	[GrammarRule("catchClause")]
	private CatchClause catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 80);
		TraceIn("catchClause", 80);
		CatchClause value = default(CatchClause);

		IToken id = default(IToken);
		BlockSyntax b = default(BlockSyntax);

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1855, 1);
		try
		{
			// ..\\ES3.g:1856:2: ( CATCH LPAREN id= Identifier RPAREN b= block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1857:9: CATCH LPAREN id= Identifier RPAREN b= block
			{
			DebugLocation(1857, 9);
			Match(input,CATCH,Follow._CATCH_in_catchClause9547); 
			DebugLocation(1857, 15);
			Match(input,LPAREN,Follow._LPAREN_in_catchClause9549); 
			DebugLocation(1857, 24);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_catchClause9553); 
			DebugLocation(1857, 36);
			Match(input,RPAREN,Follow._RPAREN_in_catchClause9555); 
			DebugLocation(1857, 44);
			PushFollow(Follow._block_in_catchClause9559);
			b=block();
			PopFollow();

			DebugLocation(1858, 9);
			 value = new CatchClause((id!=null?id.Text:null), b, _currentBody.DeclaredVariables.AddOrGet((id!=null?id.Text:null), true)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 80);
			LeaveRule("catchClause", 80);
			LeaveRule_catchClause();
		}
		DebugLocation(1859, 1);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return value;

	}
	// $ANTLR end "catchClause"


	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();

	// $ANTLR start "finallyClause"
	// ..\\ES3.g:1861:1: finallyClause returns [FinallyClause value] : FINALLY b= block ;
	[GrammarRule("finallyClause")]
	private FinallyClause finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 81);
		TraceIn("finallyClause", 81);
		FinallyClause value = default(FinallyClause);

		BlockSyntax b = default(BlockSyntax);

		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(1861, 1);
		try
		{
			// ..\\ES3.g:1862:2: ( FINALLY b= block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1863:9: FINALLY b= block
			{
			DebugLocation(1863, 9);
			Match(input,FINALLY,Follow._FINALLY_in_finallyClause9593); 
			DebugLocation(1863, 18);
			PushFollow(Follow._block_in_finallyClause9597);
			b=block();
			PopFollow();

			DebugLocation(1864, 9);
			 value = new FinallyClause(b); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("finallyClause", 81);
			LeaveRule("finallyClause", 81);
			LeaveRule_finallyClause();
		}
		DebugLocation(1865, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return value;

	}
	// $ANTLR end "finallyClause"


	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();

	// $ANTLR start "functionDeclaration"
	// ..\\ES3.g:1877:1: functionDeclaration returns [SyntaxNode value] : FUNCTION id= Identifier parms= formalParameterList fb= functionBody ;
	[GrammarRule("functionDeclaration")]
	private SyntaxNode functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 82);
		TraceIn("functionDeclaration", 82);
		SyntaxNode value = default(SyntaxNode);

		IToken id = default(IToken);
		List<string> parms = default(List<string>);
		BlockSyntax fb = default(BlockSyntax);


		    var start = input.LT(1);
		    string name;
		    List<string> parameters;
		    BlockSyntax body;

		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(1877, 1);
		try
		{
			// ..\\ES3.g:1897:2: ( FUNCTION id= Identifier parms= formalParameterList fb= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1898:9: FUNCTION id= Identifier parms= formalParameterList fb= functionBody
			{
			DebugLocation(1898, 9);
			Match(input,FUNCTION,Follow._FUNCTION_in_functionDeclaration9650); 
			DebugLocation(1898, 20);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_functionDeclaration9654); 
			DebugLocation(1899, 9);
			 name = id.Text; 
			DebugLocation(1900, 8);
			PushFollow(Follow._formalParameterList_in_functionDeclaration9671);
			parms=formalParameterList();
			PopFollow();

			DebugLocation(1901, 9);
			 parameters = parms; 
			DebugLocation(1902, 5);
			PushFollow(Follow._functionBody_in_functionDeclaration9687);
			fb=functionBody();
			PopFollow();

			DebugLocation(1903, 9);
			 body = fb; 

			}


			    _currentBody.FunctionDeclarations.Add(
			        new FunctionSyntax(
			            name,
			            parameters,
			            body,
			            _currentBody.DeclaredVariables.AddOrGet(name, true),
			            GetLocation(start, input.LT(-1))
			        )
			    );

			    value = new EmptySyntax();

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionDeclaration", 82);
			LeaveRule("functionDeclaration", 82);
			LeaveRule_functionDeclaration();
		}
		DebugLocation(1904, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return value;

	}
	// $ANTLR end "functionDeclaration"


	partial void EnterRule_functionExpression();
	partial void LeaveRule_functionExpression();

	// $ANTLR start "functionExpression"
	// ..\\ES3.g:1906:1: functionExpression returns [FunctionSyntax value] : FUNCTION (id= Identifier )? fpl= formalParameterList fb= functionBody ;
	[GrammarRule("functionExpression")]
	private FunctionSyntax functionExpression()
	{
		EnterRule_functionExpression();
		EnterRule("functionExpression", 83);
		TraceIn("functionExpression", 83);
		FunctionSyntax value = default(FunctionSyntax);

		IToken id = default(IToken);
		List<string> fpl = default(List<string>);
		BlockSyntax fb = default(BlockSyntax);


		    var start = input.LT(1);
		    string name = null;
		    List<string> parameters;
		    BlockSyntax body;

		try { DebugEnterRule(GrammarFileName, "functionExpression");
		DebugLocation(1906, 1);
		try
		{
			// ..\\ES3.g:1922:2: ( FUNCTION (id= Identifier )? fpl= formalParameterList fb= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1923:9: FUNCTION (id= Identifier )? fpl= formalParameterList fb= functionBody
			{
			DebugLocation(1923, 9);
			Match(input,FUNCTION,Follow._FUNCTION_in_functionExpression9730); 
			DebugLocation(1924, 9);
			// ..\\ES3.g:1924:9: (id= Identifier )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if ((LA86_0==Identifier))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1925:13: id= Identifier
				{
				DebugLocation(1925, 15);
				id=(IToken)Match(input,Identifier,Follow._Identifier_in_functionExpression9756); 
				DebugLocation(1926, 13);
				 name = id.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(1928, 12);
			PushFollow(Follow._formalParameterList_in_functionExpression9793);
			fpl=formalParameterList();
			PopFollow();

			DebugLocation(1929, 9);
			 parameters = fpl; 
			DebugLocation(1930, 11);
			PushFollow(Follow._functionBody_in_functionExpression9815);
			fb=functionBody();
			PopFollow();

			DebugLocation(1931, 9);
			 body = fb; 

			}


				value = new FunctionSyntax(
			        name,
			        parameters,
			        body,
			        name == null ? null : _currentBody.DeclaredVariables.AddOrGet(name, true),
			        GetLocation(start, input.LT(-1))
			    );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionExpression", 83);
			LeaveRule("functionExpression", 83);
			LeaveRule_functionExpression();
		}
		DebugLocation(1932, 1);
		} finally { DebugExitRule(GrammarFileName, "functionExpression"); }
		return value;

	}
	// $ANTLR end "functionExpression"


	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();

	// $ANTLR start "formalParameterList"
	// ..\\ES3.g:1934:1: formalParameterList returns [List<string> value] : LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN ;
	[GrammarRule("formalParameterList")]
	private List<string> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 84);
		TraceIn("formalParameterList", 84);
		List<string> value = default(List<string>);

		IToken first = default(IToken);
		IToken follow = default(IToken);


		    List<string> identifiers = new List<string>();
		    value = identifiers;

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(1934, 1);
		try
		{
			// ..\\ES3.g:1939:2: ( LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:1940:9: LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN
			{
			DebugLocation(1940, 9);
			Match(input,LPAREN,Follow._LPAREN_in_formalParameterList9853); 
			DebugLocation(1941, 9);
			// ..\\ES3.g:1941:9: (first= Identifier ( COMMA follow= Identifier )* )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==Identifier))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1942:13: first= Identifier ( COMMA follow= Identifier )*
				{
				DebugLocation(1942, 18);
				first=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList9879); 
				DebugLocation(1943, 13);
				 identifiers.Add((first!=null?first.Text:null)); 
				DebugLocation(1944, 13);
				// ..\\ES3.g:1944:13: ( COMMA follow= Identifier )*
				try { DebugEnterSubRule(87);
				while (true)
				{
					int alt87=2;
					try { DebugEnterDecision(87, false);
					int LA87_0 = input.LA(1);

					if ((LA87_0==COMMA))
					{
						alt87 = 1;
					}


					} finally { DebugExitDecision(87); }
					switch ( alt87 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1945:17: COMMA follow= Identifier
						{
						DebugLocation(1945, 17);
						Match(input,COMMA,Follow._COMMA_in_formalParameterList9925); 
						DebugLocation(1945, 29);
						follow=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList9929); 
						DebugLocation(1946, 17);
						 identifiers.Add((follow!=null?follow.Text:null)); 

						}
						break;

					default:
						goto loop87;
					}
				}

				loop87:
					;

				} finally { DebugExitSubRule(87); }


				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(1949, 9);
			Match(input,RPAREN,Follow._RPAREN_in_formalParameterList9983); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterList", 84);
			LeaveRule("formalParameterList", 84);
			LeaveRule_formalParameterList();
		}
		DebugLocation(1950, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return value;

	}
	// $ANTLR end "formalParameterList"


	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();

	// $ANTLR start "functionBody"
	// ..\\ES3.g:1952:1: functionBody returns [BlockSyntax value] : lb= LBRACE (se= sourceElement )* RBRACE ;
	[GrammarRule("functionBody")]
	private BlockSyntax functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 85);
		TraceIn("functionBody", 85);
		BlockSyntax value = default(BlockSyntax);

		IToken lb = default(IToken);
		SyntaxNode se = default(SyntaxNode);


		    var tempBody = _currentBody;
		    _currentBody = new BlockBuilder();
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(1952, 1);
		try
		{
			// ..\\ES3.g:1962:2: (lb= LBRACE (se= sourceElement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1963:9: lb= LBRACE (se= sourceElement )* RBRACE
			{
			DebugLocation(1963, 11);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_functionBody10016); 
			DebugLocation(1964, 9);
			// ..\\ES3.g:1964:9: (se= sourceElement )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==ADD||LA89_0==BREAK||LA89_0==CONTINUE||LA89_0==DEC||LA89_0==DELETE||LA89_0==DO||LA89_0==DecimalLiteral||LA89_0==FALSE||LA89_0==FOR||LA89_0==FUNCTION||(LA89_0>=HexIntegerLiteral && LA89_0<=IF)||LA89_0==INC||LA89_0==INV||LA89_0==Identifier||(LA89_0>=LBRACE && LA89_0<=LBRACK)||LA89_0==LPAREN||(LA89_0>=NEW && LA89_0<=NOT)||LA89_0==NULL||LA89_0==OctalIntegerLiteral||LA89_0==RETURN||LA89_0==RegularExpressionLiteral||LA89_0==SEMIC||LA89_0==SUB||LA89_0==SWITCH||LA89_0==StringLiteral||(LA89_0>=THIS && LA89_0<=THROW)||(LA89_0>=TRUE && LA89_0<=TYPEOF)||(LA89_0>=VAR && LA89_0<=VOID)||(LA89_0>=WHILE && LA89_0<=WITH)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1965:13: se= sourceElement
					{
					DebugLocation(1965, 15);
					PushFollow(Follow._sourceElement_in_functionBody10042);
					se=sourceElement();
					PopFollow();

					DebugLocation(1966, 13);
					 _currentBody.Statements.Add(se); 

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(1968, 9);
			Match(input,RBRACE,Follow._RBRACE_in_functionBody10077); 

			}


			    value = _currentBody.CreateBlock();
			    _currentBody = tempBody;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionBody", 85);
			LeaveRule("functionBody", 85);
			LeaveRule_functionBody();
		}
		DebugLocation(1969, 1);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return value;

	}
	// $ANTLR end "functionBody"


	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// ..\\ES3.g:1975:1: program returns [ProgramSyntax value] : (follow= sourceElement )* ;
	[GrammarRule("program")]
	private ProgramSyntax program()
	{
		EnterRule_program();
		EnterRule("program", 86);
		TraceIn("program", 86);
		ProgramSyntax value = default(ProgramSyntax);

		SyntaxNode follow = default(SyntaxNode);


		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(1975, 1);
		try
		{
			// ..\\ES3.g:1979:2: ( (follow= sourceElement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1980:9: (follow= sourceElement )*
			{
			DebugLocation(1980, 9);
			// ..\\ES3.g:1980:9: (follow= sourceElement )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==ADD||LA90_0==BREAK||LA90_0==CONTINUE||LA90_0==DEC||LA90_0==DELETE||LA90_0==DO||LA90_0==DecimalLiteral||LA90_0==FALSE||LA90_0==FOR||LA90_0==FUNCTION||(LA90_0>=HexIntegerLiteral && LA90_0<=IF)||LA90_0==INC||LA90_0==INV||LA90_0==Identifier||(LA90_0>=LBRACE && LA90_0<=LBRACK)||LA90_0==LPAREN||(LA90_0>=NEW && LA90_0<=NOT)||LA90_0==NULL||LA90_0==OctalIntegerLiteral||LA90_0==RETURN||LA90_0==RegularExpressionLiteral||LA90_0==SEMIC||LA90_0==SUB||LA90_0==SWITCH||LA90_0==StringLiteral||(LA90_0>=THIS && LA90_0<=THROW)||(LA90_0>=TRUE && LA90_0<=TYPEOF)||(LA90_0>=VAR && LA90_0<=VOID)||(LA90_0>=WHILE && LA90_0<=WITH)))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1981:13: follow= sourceElement
					{
					DebugLocation(1981, 19);
					PushFollow(Follow._sourceElement_in_program10125);
					follow=sourceElement();
					PopFollow();

					DebugLocation(1982, 13);
					 _currentBody.Statements.Add(follow); 

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(1984, 9);
			 value = _currentBody.CreateProgram(); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("program", 86);
			LeaveRule("program", 86);
			LeaveRule_program();
		}
		DebugLocation(1985, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return value;

	}
	// $ANTLR end "program"


	partial void EnterRule_sourceElement();
	partial void LeaveRule_sourceElement();

	// $ANTLR start "sourceElement"
	// ..\\ES3.g:1992:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );
	[GrammarRule("sourceElement")]
	private SyntaxNode sourceElement()
	{
		EnterRule_sourceElement();
		EnterRule("sourceElement", 87);
		TraceIn("sourceElement", 87);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode func = default(SyntaxNode);
		SyntaxNode stat = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "sourceElement");
		DebugLocation(1992, 1);
		try
		{
			// ..\\ES3.g:1998:2: ({...}?func= functionDeclaration |stat= statement )
			int alt91=2;
			try { DebugEnterDecision(91, false);
			try
			{
				alt91 = dfa91.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1998:4: {...}?func= functionDeclaration
				{
				DebugLocation(1998, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "sourceElement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1998, 37);
				PushFollow(Follow._functionDeclaration_in_sourceElement10195);
				func=functionDeclaration();
				PopFollow();

				DebugLocation(1998, 58);
				 value = func; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1999:4: stat= statement
				{
				DebugLocation(1999, 8);
				PushFollow(Follow._statement_in_sourceElement10204);
				stat=statement();
				PopFollow();

				DebugLocation(1999, 19);
				 value = stat; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("sourceElement", 87);
			LeaveRule("sourceElement", 87);
			LeaveRule_sourceElement();
		}
		DebugLocation(2000, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElement"); }
		return value;

	}
	// $ANTLR end "sourceElement"
	#endregion Rules


	#region DFA
	private DFA59 dfa59;
	private DFA60 dfa60;
	private DFA91 dfa91;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa59 = new DFA59( this, SpecialStateTransition59 );
		dfa60 = new DFA60( this );
		dfa91 = new DFA91( this, SpecialStateTransition91 );
	}

	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\x28\xFFFF";
		private const string DFA59_eofS =
			"\x28\xFFFF";
		private const string DFA59_minS =
			"\x1\x5\x2\x0\x25\xFFFF";
		private const string DFA59_maxS =
			"\x1\xA7\x2\x0\x25\xFFFF";
		private const string DFA59_acceptS =
			"\x3\xFFFF\x1\x3\x22\xFFFF\x1\x1\x1\x2";
		private const string DFA59_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x25\xFFFF}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x2\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x1\x1\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\xD\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\x2\x3\x2"+
				"\xFFFF\x2\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "1266:1: statement returns [SyntaxNode value] options {k=1; } : ({...}?b= block |{...}?func= functionDeclaration |st= statementTail );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition59(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA59_1 = input.LA(1);


				int index59_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == LBRACE ))) {s = 38;}

				else if ((true)) {s = 3;}


				input.Seek(index59_1);
				if (s >= 0) return s;
				break;
			case 1:
				int LA59_2 = input.LA(1);


				int index59_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 39;}

				else if ((true)) {s = 3;}


				input.Seek(index59_2);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 59, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA60 : DFA
	{
		private const string DFA60_eotS =
			"\xF\xFFFF";
		private const string DFA60_eofS =
			"\x4\xFFFF\x1\x3\xA\xFFFF";
		private const string DFA60_minS =
			"\x1\x5\x3\xFFFF\x1\x5\xA\xFFFF";
		private const string DFA60_maxS =
			"\x1\xA7\x3\xFFFF\x1\xAA\xA\xFFFF";
		private const string DFA60_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1"+
			"\x9\x1\xB\x1\xC\x1\xD\x1\xA";
		private const string DFA60_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA60_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x8\xE\xFFFF\x1\x7\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x6\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x6\x2\xFFFF\x1"+
				"\x3\x5\xFFFF\x1\x3\x1\x5\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x4"+
				"\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x3\xD\xFFFF\x1\x9\x3\xFFFF\x1\x3\x1\xFFFF\x1\x2\xA\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\xB\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xC\x2\xFFFF\x1\x3\x1\xD"+
				"\x1\x3\x2\xFFFF\x1\x1\x1\x3\x2\xFFFF\x1\x6\x1\xA",
				"",
				"",
				"",
				"\x4\x3\x2\xFFFF\x1\x3\xE\xFFFF\x1\xE\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x7\xFFFF\x2\x3\xF\xFFFF\x2\x3\x6\xFFFF\x3\x3\x9\xFFFF"+
				"\x3\x3\x2\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x5\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x2\x3\xC\xFFFF\x2\x3\x7\xFFFF\x4\x3\x1\xFFFF\x4"+
				"\x3\x3\xFFFF\x2\x3\x16\xFFFF\x2\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA60_eot = DFA.UnpackEncodedString(DFA60_eotS);
		private static readonly short[] DFA60_eof = DFA.UnpackEncodedString(DFA60_eofS);
		private static readonly char[] DFA60_min = DFA.UnpackEncodedStringToUnsignedChars(DFA60_minS);
		private static readonly char[] DFA60_max = DFA.UnpackEncodedStringToUnsignedChars(DFA60_maxS);
		private static readonly short[] DFA60_accept = DFA.UnpackEncodedString(DFA60_acceptS);
		private static readonly short[] DFA60_special = DFA.UnpackEncodedString(DFA60_specialS);
		private static readonly short[][] DFA60_transition;

		static DFA60()
		{
			int numStates = DFA60_transitionS.Length;
			DFA60_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA60_transition[i] = DFA.UnpackEncodedString(DFA60_transitionS[i]);
			}
		}

		public DFA60( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 60;
			this.eot = DFA60_eot;
			this.eof = DFA60_eof;
			this.min = DFA60_min;
			this.max = DFA60_max;
			this.accept = DFA60_accept;
			this.special = DFA60_special;
			this.transition = DFA60_transition;
		}

		public override string Description { get { return "1277:1: statementTail returns [SyntaxNode value] : (vst= variableStatement |est= emptyStatement |exst= expressionStatement |ifst= ifStatement |itst= iterationStatement |cost= continueStatement |brst= breakStatement |rst= returnStatement |wist= withStatement |last= labelledStatement |swst= switchStatement |thst= throwStatement |trst= tryStatement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA91 : DFA
	{
		private const string DFA91_eotS =
			"\x27\xFFFF";
		private const string DFA91_eofS =
			"\x27\xFFFF";
		private const string DFA91_minS =
			"\x1\x5\x1\x0\x25\xFFFF";
		private const string DFA91_maxS =
			"\x1\xA7\x1\x0\x25\xFFFF";
		private const string DFA91_acceptS =
			"\x2\xFFFF\x1\x2\x23\xFFFF\x1\x1";
		private const string DFA91_specialS =
			"\x1\xFFFF\x1\x0\x25\xFFFF}>";
		private static readonly string[] DFA91_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x5\xFFFF\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x1\x5\xFFFF\x2\x2\x3\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\xE\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\xD"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x2\x2\x2\xFFFF"+
				"\x2\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA91_eot = DFA.UnpackEncodedString(DFA91_eotS);
		private static readonly short[] DFA91_eof = DFA.UnpackEncodedString(DFA91_eofS);
		private static readonly char[] DFA91_min = DFA.UnpackEncodedStringToUnsignedChars(DFA91_minS);
		private static readonly char[] DFA91_max = DFA.UnpackEncodedStringToUnsignedChars(DFA91_maxS);
		private static readonly short[] DFA91_accept = DFA.UnpackEncodedString(DFA91_acceptS);
		private static readonly short[] DFA91_special = DFA.UnpackEncodedString(DFA91_specialS);
		private static readonly short[][] DFA91_transition;

		static DFA91()
		{
			int numStates = DFA91_transitionS.Length;
			DFA91_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA91_transition[i] = DFA.UnpackEncodedString(DFA91_transitionS[i]);
			}
		}

		public DFA91( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 91;
			this.eot = DFA91_eot;
			this.eof = DFA91_eof;
			this.min = DFA91_min;
			this.max = DFA91_max;
			this.accept = DFA91_accept;
			this.special = DFA91_special;
			this.transition = DFA91_transition;
		}

		public override string Description { get { return "1992:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition91(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA91_1 = input.LA(1);


				int index91_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 38;}

				else if ((true)) {s = 2;}


				input.Seek(index91_1);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 91, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _reservedWord_in_token1765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_token1770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _punctuator_in_token1775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_token1780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_token1785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyword_in_reservedWord1798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _futureReservedWord_in_reservedWord1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_reservedWord1808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_reservedWord1813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_keyword1827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_futureReservedWord1962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_punctuator2247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_literal2505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_literal2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_literal2523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_literal2532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RegularExpressionLiteral_in_literal2542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_booleanLiteral2559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_booleanLiteral2566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DecimalLiteral_in_numericLiteral2777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OctalIntegerLiteral_in_numericLiteral2786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HexIntegerLiteral_in_numericLiteral2795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression3209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_primaryExpression3218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression3227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression3236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression3245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression3254 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_primaryExpression3258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_primaryExpression3261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayLiteral3300 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3320 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _COMMA_in_arrayLiteral3366 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3370 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_arrayLiteral3424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_arrayItem3443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_objectLiteral3496 = new BitSet(new ulong[]{0x100000000000UL,0x2004000000008010UL,0x800000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3510 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_objectLiteral3526 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x800000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3540 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_objectLiteral3570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyFunctionAssignment_in_propertyAssignment3596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyValueAssignment_in_propertyAssignment3621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_propertyFunctionAssignment3669 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x800000UL});
		public static readonly BitSet _propertyName_in_propertyFunctionAssignment3691 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _formalParameterList_in_propertyFunctionAssignment3741 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_propertyFunctionAssignment3788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyName_in_propertyValueAssignment3840 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_propertyValueAssignment3860 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_propertyValueAssignment3872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_accessor3910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_propertyName3932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_propertyName3941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_propertyName3950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberExpression3976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionExpression_in_memberExpression3985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments4016 = new BitSet(new ulong[]{0x4040100A00000020UL,0x800416000460A210UL,0x8A2820012UL});
		public static readonly BitSet _argument_in_arguments4042 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x2UL});
		public static readonly BitSet _COMMA_in_arguments4088 = new BitSet(new ulong[]{0x4040100A00000020UL,0x800416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _argument_in_arguments4108 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_arguments4162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REF_in_argument4195 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_argument4212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_generics4245 = new BitSet(new ulong[]{0x4040100A00000020UL,0x200416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_generics4251 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_generics4257 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_generics4261 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_generics4270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_leftHandSideExpression4319 = new BitSet(new ulong[]{0x4040100000000000UL,0x4120004608010UL,0x22800010UL});
		public static readonly BitSet _memberExpression_in_leftHandSideExpression4353 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _generics_in_leftHandSideExpression4398 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _arguments_in_leftHandSideExpression4447 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _LBRACK_in_leftHandSideExpression4482 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_leftHandSideExpression4486 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_leftHandSideExpression4488 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _DOT_in_leftHandSideExpression4525 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_leftHandSideExpression4529 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression4575 = new BitSet(new ulong[]{0x200000002UL,0x200UL});
		public static readonly BitSet _postfixOperator_in_postfixExpression4583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_postfixOperator4605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixOperator4614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpression4637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryOperator_in_unaryExpression4646 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression4650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELETE_in_unaryOperator4668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_unaryOperator4675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPEOF_in_unaryOperator4682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryOperator4689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryOperator4696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ADD_in_unaryOperator4705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryOperator4714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INV_in_unaryOperator4721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryOperator4728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4756 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _MUL_in_multiplicativeExpression4767 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression4776 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression4784 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4794 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4824 = new BitSet(new ulong[]{0x22UL,0x0UL,0x20000UL});
		public static readonly BitSet _ADD_in_additiveExpression4835 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _SUB_in_additiveExpression4843 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4853 = new BitSet(new ulong[]{0x22UL,0x0UL,0x20000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4884 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1480UL});
		public static readonly BitSet _SHL_in_shiftExpression4895 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _SHR_in_shiftExpression4903 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _SHU_in_shiftExpression4911 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4921 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1480UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4952 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _LT_in_relationalExpression4963 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _GT_in_relationalExpression4971 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _LTE_in_relationalExpression4979 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _GTE_in_relationalExpression4987 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpression4995 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _IN_in_relationalExpression5003 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression5013 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn5039 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn5050 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _GT_in_relationalExpressionNoIn5058 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _LTE_in_relationalExpressionNoIn5066 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _GTE_in_relationalExpressionNoIn5074 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpressionNoIn5082 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn5093 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression5124 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x20UL});
		public static readonly BitSet _EQ_in_equalityExpression5135 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _NEQ_in_equalityExpression5143 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _SAME_in_equalityExpression5151 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _NSAME_in_equalityExpression5159 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression5169 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x20UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn5195 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x20UL});
		public static readonly BitSet _EQ_in_equalityExpressionNoIn5206 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _NEQ_in_equalityExpressionNoIn5214 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _SAME_in_equalityExpressionNoIn5222 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _NSAME_in_equalityExpressionNoIn5230 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn5240 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x20UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression5267 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpression5273 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression5277 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5298 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpressionNoIn5304 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5308 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression5331 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpression5337 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression5341 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5364 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpressionNoIn5370 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5374 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression5396 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpression5402 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression5406 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5428 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpressionNoIn5434 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5438 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression5464 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpression5470 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression5474 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5495 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpressionNoIn5501 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5505 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression5527 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpression5533 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression5537 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn5559 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpressionNoIn5565 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn5569 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalORExpression_in_conditionalExpression5596 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpression5602 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression5606 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5608 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression5612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn5633 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpressionNoIn5639 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn5643 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpressionNoIn5645 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn5649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression5690 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x40000042900UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression5737 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression5753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_assignmentOperator5788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_assignmentExpressionNoIn5876 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x40000042900UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpressionNoIn5924 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_assignmentExpressionNoIn5940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression6006 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expression6040 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_expression6056 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn6116 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expressionNoIn6150 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn6166 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _SEMIC_in_semic6219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_semic6224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RBRACE_in_semic6229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOL_in_semic6236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MultiLineComment_in_semic6244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement6280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_statement6291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementTail_in_statement6300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_statementTail6321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statementTail6330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statementTail6339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statementTail6348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iterationStatement_in_statementTail6357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statementTail6366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statementTail6375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statementTail6384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statementTail6393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_statementTail6402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statementTail6411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statementTail6420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statementTail6429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block6468 = new BitSet(new ulong[]{0x4840104A20004020UL,0x200416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_block6494 = new BitSet(new ulong[]{0x4840104A20004020UL,0x200416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _RBRACE_in_block6529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatements6578 = new BitSet(new ulong[]{0x4840104A20004022UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _VAR_in_variableStatement6642 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement6646 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _COMMA_in_variableStatement6680 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement6684 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _semic_in_variableStatement6719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclaration6749 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclaration6773 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclaration6777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn6843 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclarationNoIn6867 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_variableDeclarationNoIn6871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_emptyStatement6926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement6965 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _semic_in_expressionStatement6967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifStatement7011 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_ifStatement7013 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_ifStatement7017 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_ifStatement7019 = new BitSet(new ulong[]{0x4840104A20004020UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_ifStatement7041 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _ELSE_in_ifStatement7079 = new BitSet(new ulong[]{0x4840104A20004020UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_ifStatement7083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doStatement_in_iterationStatement7140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_iterationStatement7149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_iterationStatement7159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_doStatement7191 = new BitSet(new ulong[]{0x4840104A20004020UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_doStatement7195 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _WHILE_in_doStatement7215 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_doStatement7217 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_doStatement7221 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_doStatement7223 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _semic_in_doStatement7225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement7264 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_whileStatement7266 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_whileStatement7270 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_whileStatement7272 = new BitSet(new ulong[]{0x4840104A20004020UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_whileStatement7294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forStatement7339 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_forStatement7349 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0xCA2820050UL});
		public static readonly BitSet _forControl_in_forStatement7361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_forStatement7381 = new BitSet(new ulong[]{0x4840104A20004020UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_forStatement7403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlVar_in_forControl7438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlExpression_in_forControl7463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlSemic_in_forControl7488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_forControlVar7541 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar7545 = new BitSet(new ulong[]{0x8000000UL,0x100UL,0x40UL});
		public static readonly BitSet _IN_in_forControlVar7597 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_forControlVar7601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_forControlVar7674 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar7678 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x40UL});
		public static readonly BitSet _SEMIC_in_forControlVar7746 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820050UL});
		public static readonly BitSet _expression_in_forControlVar7788 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _SEMIC_in_forControlVar7847 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_forControlVar7889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionNoIn_in_forControlExpression7975 = new BitSet(new ulong[]{0x0UL,0x100UL,0x40UL});
		public static readonly BitSet _IN_in_forControlExpression8024 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_forControlExpression8028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlExpression8079 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820050UL});
		public static readonly BitSet _expression_in_forControlExpression8121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _SEMIC_in_forControlExpression8180 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_forControlExpression8222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlSemic8305 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820050UL});
		public static readonly BitSet _expression_in_forControlSemic8331 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _SEMIC_in_forControlSemic8366 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_forControlSemic8392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_continueStatement8452 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x40UL});
		public static readonly BitSet _Identifier_in_continueStatement8488 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _semic_in_continueStatement8523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_breakStatement8568 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x40UL});
		public static readonly BitSet _Identifier_in_breakStatement8604 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _semic_in_breakStatement8627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_returnStatement8672 = new BitSet(new ulong[]{0x4040900A08000020UL,0x200416080460A210UL,0x8A2820050UL});
		public static readonly BitSet _expression_in_returnStatement8708 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _semic_in_returnStatement8743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withStatement8786 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_withStatement8788 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_withStatement8792 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_withStatement8794 = new BitSet(new ulong[]{0x4840104A20004020UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_withStatement8816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_switchStatement8859 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_switchStatement8861 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_switchStatement8865 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_switchStatement8867 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _LBRACE_in_switchStatement8887 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _defaultClause_in_switchStatement8928 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _caseClause_in_switchStatement8968 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_switchStatement9003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseClause9041 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_caseClause9045 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_caseClause9047 = new BitSet(new ulong[]{0x4840104A20004022UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_caseClause9083 = new BitSet(new ulong[]{0x4840104A20004022UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _DEFAULT_in_defaultClause9147 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_defaultClause9149 = new BitSet(new ulong[]{0x4840104A20004022UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_defaultClause9185 = new BitSet(new ulong[]{0x4840104A20004022UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _Identifier_in_labelledStatement9251 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_labelledStatement9253 = new BitSet(new ulong[]{0x4840104A20004020UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _statement_in_labelledStatement9257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_throwStatement9302 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x8A2820010UL});
		public static readonly BitSet _expression_in_throwStatement9308 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x40UL});
		public static readonly BitSet _semic_in_throwStatement9310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_tryStatement9352 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_tryStatement9356 = new BitSet(new ulong[]{0x200000000400000UL});
		public static readonly BitSet _catchClause_in_tryStatement9382 = new BitSet(new ulong[]{0x200000000400002UL});
		public static readonly BitSet _finallyClause_in_tryStatement9430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_tryStatement9489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_in_catchClause9547 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_catchClause9549 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_catchClause9553 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_catchClause9555 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_catchClause9559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause9593 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_finallyClause9597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionDeclaration9650 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_functionDeclaration9654 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionDeclaration9671 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionDeclaration9687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionExpression9730 = new BitSet(new ulong[]{0x0UL,0x4008000UL});
		public static readonly BitSet _Identifier_in_functionExpression9756 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionExpression9793 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionExpression9815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_formalParameterList9853 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x2UL});
		public static readonly BitSet _Identifier_in_formalParameterList9879 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x2UL});
		public static readonly BitSet _COMMA_in_formalParameterList9925 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_formalParameterList9929 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x2UL});
		public static readonly BitSet _RPAREN_in_formalParameterList9983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_functionBody10016 = new BitSet(new ulong[]{0x4840104A20004020UL,0x200416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _sourceElement_in_functionBody10042 = new BitSet(new ulong[]{0x4840104A20004020UL,0x200416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _RBRACE_in_functionBody10077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sourceElement_in_program10125 = new BitSet(new ulong[]{0x4840104A20004022UL,0x416000460A230UL,0xCCE6920051UL});
		public static readonly BitSet _functionDeclaration_in_sourceElement10195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_sourceElement10204 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace  Jint.Parser 
