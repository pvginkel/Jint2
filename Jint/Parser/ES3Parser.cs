//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\ES3.g 2013-11-09 08:28:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System;
using System.Text;
using System.Globalization;
using Jint.Expressions;
using Jint.Debugger;


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Jint.Parser 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class ES3Parser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "ADD", "ADDASS", "AND", "ANDASS", "ARGS", "ARRAY", "ASSIGN", "BLOCK", "BOOLEAN", "BREAK", "BSLASH", "BYFIELD", "BYINDEX", "BYTE", "BackslashSequence", "CALL", "CASE", "CATCH", "CEXPR", "CHAR", "CLASS", "COLON", "COMMA", "CONST", "CONTINUE", "CR", "CharacterEscapeSequence", "DEBUGGER", "DEC", "DEFAULT", "DELETE", "DIV", "DIVASS", "DO", "DOT", "DOUBLE", "DQUOTE", "DecimalDigit", "DecimalIntegerLiteral", "DecimalLiteral", "ELSE", "ENUM", "EOL", "EQ", "EXPORT", "EXPR", "EXTENDS", "EscapeSequence", "ExponentPart", "FALSE", "FF", "FINAL", "FINALLY", "FLOAT", "FOR", "FORITER", "FORSTEP", "FUNCTION", "GOTO", "GT", "GTE", "HexDigit", "HexEscapeSequence", "HexIntegerLiteral", "IF", "IMPLEMENTS", "IMPORT", "IN", "INC", "INSTANCEOF", "INT", "INTERFACE", "INV", "ITEM", "Identifier", "IdentifierNameASCIIStart", "IdentifierPart", "IdentifierStartASCII", "LABELLED", "LAND", "LBRACE", "LBRACK", "LF", "LONG", "LOR", "LPAREN", "LS", "LT", "LTE", "LineTerminator", "MOD", "MODASS", "MUL", "MULASS", "MultiLineComment", "NAMEDVALUE", "NATIVE", "NBSP", "NEG", "NEQ", "NEW", "NOT", "NSAME", "NULL", "OBJECT", "OR", "ORASS", "OctalDigit", "OctalEscapeSequence", "OctalIntegerLiteral", "PACKAGE", "PAREXPR", "PDEC", "PINC", "POS", "PRIVATE", "PROTECTED", "PS", "PUBLIC", "QUE", "RBRACE", "RBRACK", "RETURN", "RPAREN", "RegularExpressionChar", "RegularExpressionFirstChar", "RegularExpressionLiteral", "SAME", "SEMIC", "SHL", "SHLASS", "SHORT", "SHR", "SHRASS", "SHU", "SHUASS", "SP", "SQUOTE", "STATIC", "SUB", "SUBASS", "SUPER", "SWITCH", "SYNCHRONIZED", "SingleLineComment", "StringLiteral", "TAB", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "TYPEOF", "USP", "UnicodeEscapeSequence", "VAR", "VOID", "VOLATILE", "VT", "WHILE", "WITH", "WhiteSpace", "XOR", "XORASS", "ZeroToThree"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int ADD=5;
	public const int ADDASS=6;
	public const int AND=7;
	public const int ANDASS=8;
	public const int ARGS=9;
	public const int ARRAY=10;
	public const int ASSIGN=11;
	public const int BLOCK=12;
	public const int BOOLEAN=13;
	public const int BREAK=14;
	public const int BSLASH=15;
	public const int BYFIELD=16;
	public const int BYINDEX=17;
	public const int BYTE=18;
	public const int BackslashSequence=19;
	public const int CALL=20;
	public const int CASE=21;
	public const int CATCH=22;
	public const int CEXPR=23;
	public const int CHAR=24;
	public const int CLASS=25;
	public const int COLON=26;
	public const int COMMA=27;
	public const int CONST=28;
	public const int CONTINUE=29;
	public const int CR=30;
	public const int CharacterEscapeSequence=31;
	public const int DEBUGGER=32;
	public const int DEC=33;
	public const int DEFAULT=34;
	public const int DELETE=35;
	public const int DIV=36;
	public const int DIVASS=37;
	public const int DO=38;
	public const int DOT=39;
	public const int DOUBLE=40;
	public const int DQUOTE=41;
	public const int DecimalDigit=42;
	public const int DecimalIntegerLiteral=43;
	public const int DecimalLiteral=44;
	public const int ELSE=45;
	public const int ENUM=46;
	public const int EOL=47;
	public const int EQ=48;
	public const int EXPORT=49;
	public const int EXPR=50;
	public const int EXTENDS=51;
	public const int EscapeSequence=52;
	public const int ExponentPart=53;
	public const int FALSE=54;
	public const int FF=55;
	public const int FINAL=56;
	public const int FINALLY=57;
	public const int FLOAT=58;
	public const int FOR=59;
	public const int FORITER=60;
	public const int FORSTEP=61;
	public const int FUNCTION=62;
	public const int GOTO=63;
	public const int GT=64;
	public const int GTE=65;
	public const int HexDigit=66;
	public const int HexEscapeSequence=67;
	public const int HexIntegerLiteral=68;
	public const int IF=69;
	public const int IMPLEMENTS=70;
	public const int IMPORT=71;
	public const int IN=72;
	public const int INC=73;
	public const int INSTANCEOF=74;
	public const int INT=75;
	public const int INTERFACE=76;
	public const int INV=77;
	public const int ITEM=78;
	public const int Identifier=79;
	public const int IdentifierNameASCIIStart=80;
	public const int IdentifierPart=81;
	public const int IdentifierStartASCII=82;
	public const int LABELLED=83;
	public const int LAND=84;
	public const int LBRACE=85;
	public const int LBRACK=86;
	public const int LF=87;
	public const int LONG=88;
	public const int LOR=89;
	public const int LPAREN=90;
	public const int LS=91;
	public const int LT=92;
	public const int LTE=93;
	public const int LineTerminator=94;
	public const int MOD=95;
	public const int MODASS=96;
	public const int MUL=97;
	public const int MULASS=98;
	public const int MultiLineComment=99;
	public const int NAMEDVALUE=100;
	public const int NATIVE=101;
	public const int NBSP=102;
	public const int NEG=103;
	public const int NEQ=104;
	public const int NEW=105;
	public const int NOT=106;
	public const int NSAME=107;
	public const int NULL=108;
	public const int OBJECT=109;
	public const int OR=110;
	public const int ORASS=111;
	public const int OctalDigit=112;
	public const int OctalEscapeSequence=113;
	public const int OctalIntegerLiteral=114;
	public const int PACKAGE=115;
	public const int PAREXPR=116;
	public const int PDEC=117;
	public const int PINC=118;
	public const int POS=119;
	public const int PRIVATE=120;
	public const int PROTECTED=121;
	public const int PS=122;
	public const int PUBLIC=123;
	public const int QUE=124;
	public const int RBRACE=125;
	public const int RBRACK=126;
	public const int RETURN=127;
	public const int RPAREN=128;
	public const int RegularExpressionChar=129;
	public const int RegularExpressionFirstChar=130;
	public const int RegularExpressionLiteral=131;
	public const int SAME=132;
	public const int SEMIC=133;
	public const int SHL=134;
	public const int SHLASS=135;
	public const int SHORT=136;
	public const int SHR=137;
	public const int SHRASS=138;
	public const int SHU=139;
	public const int SHUASS=140;
	public const int SP=141;
	public const int SQUOTE=142;
	public const int STATIC=143;
	public const int SUB=144;
	public const int SUBASS=145;
	public const int SUPER=146;
	public const int SWITCH=147;
	public const int SYNCHRONIZED=148;
	public const int SingleLineComment=149;
	public const int StringLiteral=150;
	public const int TAB=151;
	public const int THIS=152;
	public const int THROW=153;
	public const int THROWS=154;
	public const int TRANSIENT=155;
	public const int TRUE=156;
	public const int TRY=157;
	public const int TYPEOF=158;
	public const int USP=159;
	public const int UnicodeEscapeSequence=160;
	public const int VAR=161;
	public const int VOID=162;
	public const int VOLATILE=163;
	public const int VT=164;
	public const int WHILE=165;
	public const int WITH=166;
	public const int WhiteSpace=167;
	public const int XOR=168;
	public const int XORASS=169;
	public const int ZeroToThree=170;

	// delegates
	// delegators

	public ES3Parser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public ES3Parser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ES3Parser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\ES3.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class token_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public token_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_token();
	partial void LeaveRule_token();

	// $ANTLR start "token"
	// ..\\ES3.g:314:1: token : ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral );
	[GrammarRule("token")]
	private ES3Parser.token_return token()
	{
		EnterRule_token();
		EnterRule("token", 1);
		TraceIn("token", 1);
		ES3Parser.token_return retval = new ES3Parser.token_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken Identifier2 = default(IToken);
		IToken StringLiteral5 = default(IToken);
		ES3Parser.reservedWord_return reservedWord1 = default(ES3Parser.reservedWord_return);
		ES3Parser.punctuator_return punctuator3 = default(ES3Parser.punctuator_return);
		ES3Parser.numericLiteral_return numericLiteral4 = default(ES3Parser.numericLiteral_return);

		object Identifier2_tree = default(object);
		object StringLiteral5_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "token");
		DebugLocation(314, 1);
		try
		{
			// ..\\ES3.g:315:2: ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral )
			int alt1=5;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case ABSTRACT:
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DEBUGGER:
			case DEFAULT:
			case DELETE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FALSE:
			case FINAL:
			case FINALLY:
			case FLOAT:
			case FOR:
			case FUNCTION:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case IMPORT:
			case IN:
			case INSTANCEOF:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case NEW:
			case NULL:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case RETURN:
			case SHORT:
			case STATIC:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case THIS:
			case THROW:
			case THROWS:
			case TRANSIENT:
			case TRUE:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WITH:
				{
				alt1 = 1;
				}
				break;
			case Identifier:
				{
				alt1 = 2;
				}
				break;
			case ADD:
			case ADDASS:
			case AND:
			case ANDASS:
			case ASSIGN:
			case COLON:
			case COMMA:
			case DEC:
			case DIV:
			case DIVASS:
			case DOT:
			case EQ:
			case GT:
			case GTE:
			case INC:
			case INV:
			case LAND:
			case LBRACE:
			case LBRACK:
			case LOR:
			case LPAREN:
			case LT:
			case LTE:
			case MOD:
			case MODASS:
			case MUL:
			case MULASS:
			case NEQ:
			case NOT:
			case NSAME:
			case OR:
			case ORASS:
			case QUE:
			case RBRACE:
			case RBRACK:
			case RPAREN:
			case SAME:
			case SEMIC:
			case SHL:
			case SHLASS:
			case SHR:
			case SHRASS:
			case SHU:
			case SHUASS:
			case SUB:
			case SUBASS:
			case XOR:
			case XORASS:
				{
				alt1 = 3;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt1 = 4;
				}
				break;
			case StringLiteral:
				{
				alt1 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:315:4: reservedWord
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(315, 4);
				PushFollow(Follow._reservedWord_in_token1773);
				reservedWord1=reservedWord();
				PopFollow();

				adaptor.AddChild(root_0, reservedWord1.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:316:4: Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(316, 4);
				Identifier2=(IToken)Match(input,Identifier,Follow._Identifier_in_token1778); 
				Identifier2_tree = (object)adaptor.Create(Identifier2);
				adaptor.AddChild(root_0, Identifier2_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:317:4: punctuator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._punctuator_in_token1783);
				punctuator3=punctuator();
				PopFollow();

				adaptor.AddChild(root_0, punctuator3.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:318:4: numericLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 4);
				PushFollow(Follow._numericLiteral_in_token1788);
				numericLiteral4=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, numericLiteral4.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:319:4: StringLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(319, 4);
				StringLiteral5=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_token1793); 
				StringLiteral5_tree = (object)adaptor.Create(StringLiteral5);
				adaptor.AddChild(root_0, StringLiteral5_tree);


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("token", 1);
			LeaveRule("token", 1);
			LeaveRule_token();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "token"); }
		return retval;

	}
	// $ANTLR end "token"

	private sealed partial class reservedWord_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public reservedWord_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_reservedWord();
	partial void LeaveRule_reservedWord();

	// $ANTLR start "reservedWord"
	// ..\\ES3.g:324:1: reservedWord : ( keyword | futureReservedWord | NULL | booleanLiteral );
	[GrammarRule("reservedWord")]
	private ES3Parser.reservedWord_return reservedWord()
	{
		EnterRule_reservedWord();
		EnterRule("reservedWord", 2);
		TraceIn("reservedWord", 2);
		ES3Parser.reservedWord_return retval = new ES3Parser.reservedWord_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NULL8 = default(IToken);
		ES3Parser.keyword_return keyword6 = default(ES3Parser.keyword_return);
		ES3Parser.futureReservedWord_return futureReservedWord7 = default(ES3Parser.futureReservedWord_return);
		ES3Parser.booleanLiteral_return booleanLiteral9 = default(ES3Parser.booleanLiteral_return);

		object NULL8_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "reservedWord");
		DebugLocation(324, 1);
		try
		{
			// ..\\ES3.g:325:2: ( keyword | futureReservedWord | NULL | booleanLiteral )
			int alt2=4;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case BREAK:
			case CASE:
			case CATCH:
			case CONTINUE:
			case DEFAULT:
			case DELETE:
			case DO:
			case ELSE:
			case FINALLY:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INSTANCEOF:
			case NEW:
			case RETURN:
			case SWITCH:
			case THIS:
			case THROW:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case WHILE:
			case WITH:
				{
				alt2 = 1;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DEBUGGER:
			case DOUBLE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FINAL:
			case FLOAT:
			case GOTO:
			case IMPLEMENTS:
			case IMPORT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case SUPER:
			case SYNCHRONIZED:
			case THROWS:
			case TRANSIENT:
			case VOLATILE:
				{
				alt2 = 2;
				}
				break;
			case NULL:
				{
				alt2 = 3;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:325:4: keyword
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(325, 4);
				PushFollow(Follow._keyword_in_reservedWord1806);
				keyword6=keyword();
				PopFollow();

				adaptor.AddChild(root_0, keyword6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:326:4: futureReservedWord
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(326, 4);
				PushFollow(Follow._futureReservedWord_in_reservedWord1811);
				futureReservedWord7=futureReservedWord();
				PopFollow();

				adaptor.AddChild(root_0, futureReservedWord7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:327:4: NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(327, 4);
				NULL8=(IToken)Match(input,NULL,Follow._NULL_in_reservedWord1816); 
				NULL8_tree = (object)adaptor.Create(NULL8);
				adaptor.AddChild(root_0, NULL8_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:328:4: booleanLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(328, 4);
				PushFollow(Follow._booleanLiteral_in_reservedWord1821);
				booleanLiteral9=booleanLiteral();
				PopFollow();

				adaptor.AddChild(root_0, booleanLiteral9.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reservedWord", 2);
			LeaveRule("reservedWord", 2);
			LeaveRule_reservedWord();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "reservedWord"); }
		return retval;

	}
	// $ANTLR end "reservedWord"

	private sealed partial class keyword_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public keyword_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_keyword();
	partial void LeaveRule_keyword();

	// $ANTLR start "keyword"
	// ..\\ES3.g:335:1: keyword : ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH );
	[GrammarRule("keyword")]
	private ES3Parser.keyword_return keyword()
	{
		EnterRule_keyword();
		EnterRule("keyword", 3);
		TraceIn("keyword", 3);
		ES3Parser.keyword_return retval = new ES3Parser.keyword_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set10 = default(IToken);

		object set10_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "keyword");
		DebugLocation(335, 1);
		try
		{
			// ..\\ES3.g:336:2: ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(336, 2);
			set10=(IToken)input.LT(1);
			if (input.LA(1)==BREAK||(input.LA(1)>=CASE && input.LA(1)<=CATCH)||input.LA(1)==CONTINUE||(input.LA(1)>=DEFAULT && input.LA(1)<=DELETE)||input.LA(1)==DO||input.LA(1)==ELSE||input.LA(1)==FINALLY||input.LA(1)==FOR||input.LA(1)==FUNCTION||input.LA(1)==IF||input.LA(1)==IN||input.LA(1)==INSTANCEOF||input.LA(1)==NEW||input.LA(1)==RETURN||input.LA(1)==SWITCH||(input.LA(1)>=THIS && input.LA(1)<=THROW)||(input.LA(1)>=TRY && input.LA(1)<=TYPEOF)||(input.LA(1)>=VAR && input.LA(1)<=VOID)||(input.LA(1)>=WHILE && input.LA(1)<=WITH))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set10));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyword", 3);
			LeaveRule("keyword", 3);
			LeaveRule_keyword();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "keyword"); }
		return retval;

	}
	// $ANTLR end "keyword"

	private sealed partial class futureReservedWord_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public futureReservedWord_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_futureReservedWord();
	partial void LeaveRule_futureReservedWord();

	// $ANTLR start "futureReservedWord"
	// ..\\ES3.g:367:1: futureReservedWord : ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE );
	[GrammarRule("futureReservedWord")]
	private ES3Parser.futureReservedWord_return futureReservedWord()
	{
		EnterRule_futureReservedWord();
		EnterRule("futureReservedWord", 4);
		TraceIn("futureReservedWord", 4);
		ES3Parser.futureReservedWord_return retval = new ES3Parser.futureReservedWord_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set11 = default(IToken);

		object set11_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "futureReservedWord");
		DebugLocation(367, 1);
		try
		{
			// ..\\ES3.g:368:2: ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(368, 2);
			set11=(IToken)input.LT(1);
			if (input.LA(1)==ABSTRACT||input.LA(1)==BOOLEAN||input.LA(1)==BYTE||(input.LA(1)>=CHAR && input.LA(1)<=CLASS)||input.LA(1)==CONST||input.LA(1)==DEBUGGER||input.LA(1)==DOUBLE||input.LA(1)==ENUM||input.LA(1)==EXPORT||input.LA(1)==EXTENDS||input.LA(1)==FINAL||input.LA(1)==FLOAT||input.LA(1)==GOTO||(input.LA(1)>=IMPLEMENTS && input.LA(1)<=IMPORT)||(input.LA(1)>=INT && input.LA(1)<=INTERFACE)||input.LA(1)==LONG||input.LA(1)==NATIVE||input.LA(1)==PACKAGE||(input.LA(1)>=PRIVATE && input.LA(1)<=PROTECTED)||input.LA(1)==PUBLIC||input.LA(1)==SHORT||input.LA(1)==STATIC||input.LA(1)==SUPER||input.LA(1)==SYNCHRONIZED||(input.LA(1)>=THROWS && input.LA(1)<=TRANSIENT)||input.LA(1)==VOLATILE)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set11));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("futureReservedWord", 4);
			LeaveRule("futureReservedWord", 4);
			LeaveRule_futureReservedWord();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "futureReservedWord"); }
		return retval;

	}
	// $ANTLR end "futureReservedWord"

	private sealed partial class punctuator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public punctuator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_punctuator();
	partial void LeaveRule_punctuator();

	// $ANTLR start "punctuator"
	// ..\\ES3.g:445:1: punctuator : ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS );
	[GrammarRule("punctuator")]
	private ES3Parser.punctuator_return punctuator()
	{
		EnterRule_punctuator();
		EnterRule("punctuator", 5);
		TraceIn("punctuator", 5);
		ES3Parser.punctuator_return retval = new ES3Parser.punctuator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set12 = default(IToken);

		object set12_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "punctuator");
		DebugLocation(445, 1);
		try
		{
			// ..\\ES3.g:446:2: ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(446, 2);
			set12=(IToken)input.LT(1);
			if ((input.LA(1)>=ADD && input.LA(1)<=ANDASS)||input.LA(1)==ASSIGN||(input.LA(1)>=COLON && input.LA(1)<=COMMA)||input.LA(1)==DEC||(input.LA(1)>=DIV && input.LA(1)<=DIVASS)||input.LA(1)==DOT||input.LA(1)==EQ||(input.LA(1)>=GT && input.LA(1)<=GTE)||input.LA(1)==INC||input.LA(1)==INV||(input.LA(1)>=LAND && input.LA(1)<=LBRACK)||(input.LA(1)>=LOR && input.LA(1)<=LPAREN)||(input.LA(1)>=LT && input.LA(1)<=LTE)||(input.LA(1)>=MOD && input.LA(1)<=MULASS)||input.LA(1)==NEQ||(input.LA(1)>=NOT && input.LA(1)<=NSAME)||(input.LA(1)>=OR && input.LA(1)<=ORASS)||(input.LA(1)>=QUE && input.LA(1)<=RBRACK)||input.LA(1)==RPAREN||(input.LA(1)>=SAME && input.LA(1)<=SHLASS)||(input.LA(1)>=SHR && input.LA(1)<=SHUASS)||(input.LA(1)>=SUB && input.LA(1)<=SUBASS)||(input.LA(1)>=XOR && input.LA(1)<=XORASS))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set12));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("punctuator", 5);
			LeaveRule("punctuator", 5);
			LeaveRule_punctuator();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "punctuator"); }
		return retval;

	}
	// $ANTLR end "punctuator"

	private sealed partial class literal_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public literal_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// ..\\ES3.g:500:1: literal returns [ExpressionSyntax value] : (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral );
	[GrammarRule("literal")]
	private ES3Parser.literal_return literal()
	{
		EnterRule_literal();
		EnterRule("literal", 6);
		TraceIn("literal", 6);
		ES3Parser.literal_return retval = new ES3Parser.literal_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken exp1 = default(IToken);
		IToken exp4 = default(IToken);
		IToken exp5 = default(IToken);
		ES3Parser.booleanLiteral_return exp2 = default(ES3Parser.booleanLiteral_return);
		ES3Parser.numericLiteral_return exp3 = default(ES3Parser.numericLiteral_return);

		object exp1_tree = default(object);
		object exp4_tree = default(object);
		object exp5_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(500, 1);
		try
		{
			// ..\\ES3.g:501:2: (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral )
			int alt3=5;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case NULL:
				{
				alt3 = 1;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt3 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt3 = 3;
				}
				break;
			case StringLiteral:
				{
				alt3 = 4;
				}
				break;
			case RegularExpressionLiteral:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:501:4: exp1= NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(501, 8);
				exp1=(IToken)Match(input,NULL,Follow._NULL_in_literal2508); 
				exp1_tree = (object)adaptor.Create(exp1);
				adaptor.AddChild(root_0, exp1_tree);

				DebugLocation(501, 14);
				 retval.value = new IdentifierSyntax(exp1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:502:4: exp2= booleanLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(502, 8);
				PushFollow(Follow._booleanLiteral_in_literal2517);
				exp2=booleanLiteral();
				PopFollow();

				adaptor.AddChild(root_0, exp2.Tree);
				DebugLocation(502, 24);
				 retval.value = new ValueSyntax(exp2.value, TypeCode.Boolean); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:503:4: exp3= numericLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(503, 8);
				PushFollow(Follow._numericLiteral_in_literal2526);
				exp3=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, exp3.Tree);
				DebugLocation(503, 24);
				 retval.value = new ValueSyntax(exp3.value, TypeCode.Double); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:504:4: exp4= StringLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(504, 8);
				exp4=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_literal2535); 
				exp4_tree = (object)adaptor.Create(exp4);
				adaptor.AddChild(root_0, exp4_tree);

				DebugLocation(504, 24);
				 retval.value = new ValueSyntax(extractString(exp4.Text), TypeCode.String); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:505:4: exp5= RegularExpressionLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(505, 8);
				exp5=(IToken)Match(input,RegularExpressionLiteral,Follow._RegularExpressionLiteral_in_literal2545); 
				exp5_tree = (object)adaptor.Create(exp5);
				adaptor.AddChild(root_0, exp5_tree);

				DebugLocation(505, 34);
				 retval.value = new RegexpSyntax(extractRegExpPattern(exp5.Text), extractRegExpOption(exp5.Text)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 6);
			LeaveRule("literal", 6);
			LeaveRule_literal();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	private sealed partial class booleanLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public bool value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public booleanLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_booleanLiteral();
	partial void LeaveRule_booleanLiteral();

	// $ANTLR start "booleanLiteral"
	// ..\\ES3.g:508:1: booleanLiteral returns [bool value] : ( TRUE | FALSE );
	[GrammarRule("booleanLiteral")]
	private ES3Parser.booleanLiteral_return booleanLiteral()
	{
		EnterRule_booleanLiteral();
		EnterRule("booleanLiteral", 7);
		TraceIn("booleanLiteral", 7);
		ES3Parser.booleanLiteral_return retval = new ES3Parser.booleanLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TRUE13 = default(IToken);
		IToken FALSE14 = default(IToken);

		object TRUE13_tree = default(object);
		object FALSE14_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "booleanLiteral");
		DebugLocation(508, 1);
		try
		{
			// ..\\ES3.g:509:2: ( TRUE | FALSE )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==TRUE))
			{
				alt4 = 1;
			}
			else if ((LA4_0==FALSE))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:509:4: TRUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(509, 4);
				TRUE13=(IToken)Match(input,TRUE,Follow._TRUE_in_booleanLiteral2562); 
				TRUE13_tree = (object)adaptor.Create(TRUE13);
				adaptor.AddChild(root_0, TRUE13_tree);

				DebugLocation(509, 9);
				 retval.value = true; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:510:4: FALSE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(510, 4);
				FALSE14=(IToken)Match(input,FALSE,Follow._FALSE_in_booleanLiteral2569); 
				FALSE14_tree = (object)adaptor.Create(FALSE14);
				adaptor.AddChild(root_0, FALSE14_tree);

				DebugLocation(510, 10);
				 retval.value = false; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanLiteral", 7);
			LeaveRule("booleanLiteral", 7);
			LeaveRule_booleanLiteral();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "booleanLiteral"); }
		return retval;

	}
	// $ANTLR end "booleanLiteral"

	private sealed partial class numericLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public double value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public numericLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_numericLiteral();
	partial void LeaveRule_numericLiteral();

	// $ANTLR start "numericLiteral"
	// ..\\ES3.g:555:1: numericLiteral returns [double value] : (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral );
	[GrammarRule("numericLiteral")]
	private ES3Parser.numericLiteral_return numericLiteral()
	{
		EnterRule_numericLiteral();
		EnterRule("numericLiteral", 8);
		TraceIn("numericLiteral", 8);
		ES3Parser.numericLiteral_return retval = new ES3Parser.numericLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken ex3 = default(IToken);

		object ex1_tree = default(object);
		object ex2_tree = default(object);
		object ex3_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "numericLiteral");
		DebugLocation(555, 1);
		try
		{
			// ..\\ES3.g:556:2: (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case DecimalLiteral:
				{
				alt5 = 1;
				}
				break;
			case OctalIntegerLiteral:
				{
				alt5 = 2;
				}
				break;
			case HexIntegerLiteral:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:556:4: ex1= DecimalLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(556, 7);
				ex1=(IToken)Match(input,DecimalLiteral,Follow._DecimalLiteral_in_numericLiteral2780); 
				ex1_tree = (object)adaptor.Create(ex1);
				adaptor.AddChild(root_0, ex1_tree);

				DebugLocation(556, 23);
				 retval.value = double.Parse(ex1.Text, NumberStyles.Float, numberFormatInfo); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:557:4: ex2= OctalIntegerLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(557, 7);
				ex2=(IToken)Match(input,OctalIntegerLiteral,Follow._OctalIntegerLiteral_in_numericLiteral2789); 
				ex2_tree = (object)adaptor.Create(ex2);
				adaptor.AddChild(root_0, ex2_tree);

				DebugLocation(557, 28);
				 retval.value = System.Convert.ToInt64(ex2.Text, 8); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:558:4: ex3= HexIntegerLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(558, 7);
				ex3=(IToken)Match(input,HexIntegerLiteral,Follow._HexIntegerLiteral_in_numericLiteral2798); 
				ex3_tree = (object)adaptor.Create(ex3);
				adaptor.AddChild(root_0, ex3_tree);

				DebugLocation(558, 26);
				 retval.value = System.Convert.ToInt64(ex3.Text, 16); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericLiteral", 8);
			LeaveRule("numericLiteral", 8);
			LeaveRule_numericLiteral();
		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "numericLiteral"); }
		return retval;

	}
	// $ANTLR end "numericLiteral"

	private sealed partial class primaryExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primaryExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// ..\\ES3.g:644:1: primaryExpression returns [ExpressionSyntax value] : (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN );
	[GrammarRule("primaryExpression")]
	private ES3Parser.primaryExpression_return primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 9);
		TraceIn("primaryExpression", 9);
		ES3Parser.primaryExpression_return retval = new ES3Parser.primaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken lpar = default(IToken);
		IToken RPAREN15 = default(IToken);
		ES3Parser.literal_return ex3 = default(ES3Parser.literal_return);
		ES3Parser.arrayLiteral_return ex4 = default(ES3Parser.arrayLiteral_return);
		ES3Parser.objectLiteral_return ex5 = default(ES3Parser.objectLiteral_return);
		ES3Parser.expression_return ex6 = default(ES3Parser.expression_return);

		object ex1_tree = default(object);
		object ex2_tree = default(object);
		object lpar_tree = default(object);
		object RPAREN15_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(644, 1);
		try
		{
			// ..\\ES3.g:645:2: (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN )
			int alt6=6;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				alt6 = 1;
				}
				break;
			case Identifier:
				{
				alt6 = 2;
				}
				break;
			case DecimalLiteral:
			case FALSE:
			case HexIntegerLiteral:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case TRUE:
				{
				alt6 = 3;
				}
				break;
			case LBRACK:
				{
				alt6 = 4;
				}
				break;
			case LBRACE:
				{
				alt6 = 5;
				}
				break;
			case LPAREN:
				{
				alt6 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:645:4: ex1= THIS
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(645, 7);
				ex1=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression3200); 
				ex1_tree = (object)adaptor.Create(ex1);
				adaptor.AddChild(root_0, ex1_tree);

				DebugLocation(645, 13);
				 retval.value = new IdentifierSyntax(ex1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:646:4: ex2= Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(646, 7);
				ex2=(IToken)Match(input,Identifier,Follow._Identifier_in_primaryExpression3209); 
				ex2_tree = (object)adaptor.Create(ex2);
				adaptor.AddChild(root_0, ex2_tree);

				DebugLocation(646, 19);
				 retval.value = new IdentifierSyntax(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:647:4: ex3= literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(647, 7);
				PushFollow(Follow._literal_in_primaryExpression3218);
				ex3=literal();
				PopFollow();

				adaptor.AddChild(root_0, ex3.Tree);
				DebugLocation(647, 16);
				 retval.value = ex3.value; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:648:4: ex4= arrayLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(648, 7);
				PushFollow(Follow._arrayLiteral_in_primaryExpression3227);
				ex4=arrayLiteral();
				PopFollow();

				adaptor.AddChild(root_0, ex4.Tree);
				DebugLocation(648, 21);
				 retval.value = ex4.value; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:649:4: ex5= objectLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(649, 7);
				PushFollow(Follow._objectLiteral_in_primaryExpression3236);
				ex5=objectLiteral();
				PopFollow();

				adaptor.AddChild(root_0, ex5.Tree);
				DebugLocation(649, 22);
				 retval.value = ex5.value; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:650:4: lpar= LPAREN ex6= expression RPAREN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(650, 8);
				lpar=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression3245); 
				lpar_tree = (object)adaptor.Create(lpar);
				adaptor.AddChild(root_0, lpar_tree);

				DebugLocation(650, 19);
				PushFollow(Follow._expression_in_primaryExpression3249);
				ex6=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex6.Tree);
				DebugLocation(650, 32);
				RPAREN15=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression3252); 
				RPAREN15_tree = (object)adaptor.Create(RPAREN15);
				adaptor.AddChild(root_0, RPAREN15_tree);

				DebugLocation(650, 40);
				 retval.value = ex6.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 9);
			LeaveRule("primaryExpression", 9);
			LeaveRule_primaryExpression();
		}
		DebugLocation(651, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	private sealed partial class arrayLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ArrayDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arrayLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();

	// $ANTLR start "arrayLiteral"
	// ..\\ES3.g:653:1: arrayLiteral returns [ArrayDeclarationSyntax value] : lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK ;
	[GrammarRule("arrayLiteral")]
	private ES3Parser.arrayLiteral_return arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 10);
		TraceIn("arrayLiteral", 10);
		ES3Parser.arrayLiteral_return retval = new ES3Parser.arrayLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken COMMA16 = default(IToken);
		IToken RBRACK17 = default(IToken);
		ES3Parser.arrayItem_return first = default(ES3Parser.arrayItem_return);
		ES3Parser.arrayItem_return follow = default(ES3Parser.arrayItem_return);

		object lb_tree = default(object);
		object COMMA16_tree = default(object);
		object RBRACK17_tree = default(object);


			retval.value = new ArrayDeclarationSyntax();

		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(653, 1);
		try
		{
			// ..\\ES3.g:657:2: (lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK )
			DebugEnterAlt(1);
			// ..\\ES3.g:657:4: lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(657, 6);
			lb=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayLiteral3278); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(657, 14);
			// ..\\ES3.g:657:14: (first= arrayItem ( COMMA follow= arrayItem )* )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==ADD||LA8_0==COMMA||LA8_0==DEC||LA8_0==DELETE||LA8_0==DecimalLiteral||LA8_0==FALSE||LA8_0==FUNCTION||LA8_0==HexIntegerLiteral||LA8_0==INC||LA8_0==INV||LA8_0==Identifier||(LA8_0>=LBRACE && LA8_0<=LBRACK)||LA8_0==LPAREN||(LA8_0>=NEW && LA8_0<=NOT)||LA8_0==NULL||LA8_0==OctalIntegerLiteral||LA8_0==RegularExpressionLiteral||LA8_0==SUB||LA8_0==StringLiteral||LA8_0==THIS||LA8_0==TRUE||LA8_0==TYPEOF||LA8_0==VOID))
			{
				alt8 = 1;
			}
			else if ((LA8_0==RBRACK))
			{
				int LA8_2 = input.LA(2);

				if (((( input.LA(1) == COMMA )||( input.LA(1) == RBRACK ))))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:657:16: first= arrayItem ( COMMA follow= arrayItem )*
				{
				DebugLocation(657, 21);
				PushFollow(Follow._arrayItem_in_arrayLiteral3284);
				first=arrayItem();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(657, 32);
				 if(first.value != null) retval.value.Parameters.Add(first.value); 
				DebugLocation(657, 96);
				// ..\\ES3.g:657:96: ( COMMA follow= arrayItem )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==COMMA))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:657:98: COMMA follow= arrayItem
						{
						DebugLocation(657, 98);
						COMMA16=(IToken)Match(input,COMMA,Follow._COMMA_in_arrayLiteral3290); 
						COMMA16_tree = (object)adaptor.Create(COMMA16);
						adaptor.AddChild(root_0, COMMA16_tree);

						DebugLocation(657, 110);
						PushFollow(Follow._arrayItem_in_arrayLiteral3294);
						follow=arrayItem();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(657, 122);
						 if(follow.value != null) retval.value.Parameters.Add(follow.value); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(657, 193);
			RBRACK17=(IToken)Match(input,RBRACK,Follow._RBRACK_in_arrayLiteral3304); 
			RBRACK17_tree = (object)adaptor.Create(RBRACK17);
			adaptor.AddChild(root_0, RBRACK17_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayLiteral", 10);
			LeaveRule("arrayLiteral", 10);
			LeaveRule_arrayLiteral();
		}
		DebugLocation(659, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return retval;

	}
	// $ANTLR end "arrayLiteral"

	private sealed partial class arrayItem_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arrayItem_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_arrayItem();
	partial void LeaveRule_arrayItem();

	// $ANTLR start "arrayItem"
	// ..\\ES3.g:661:1: arrayItem returns [SyntaxNode value] : (expr= assignmentExpression |{...}?|{...}?) ;
	[GrammarRule("arrayItem")]
	private ES3Parser.arrayItem_return arrayItem()
	{
		EnterRule_arrayItem();
		EnterRule("arrayItem", 11);
		TraceIn("arrayItem", 11);
		ES3Parser.arrayItem_return retval = new ES3Parser.arrayItem_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.assignmentExpression_return expr = default(ES3Parser.assignmentExpression_return);


		try { DebugEnterRule(GrammarFileName, "arrayItem");
		DebugLocation(661, 1);
		try
		{
			// ..\\ES3.g:662:2: ( (expr= assignmentExpression |{...}?|{...}?) )
			DebugEnterAlt(1);
			// ..\\ES3.g:662:4: (expr= assignmentExpression |{...}?|{...}?)
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(662, 4);
			// ..\\ES3.g:662:4: (expr= assignmentExpression |{...}?|{...}?)
			int alt9=3;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt9 = 1;
				}
				break;
			case COMMA:
				{
				int LA9_2 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RBRACK:
				{
				int LA9_3 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:662:6: expr= assignmentExpression
				{
				DebugLocation(662, 10);
				PushFollow(Follow._assignmentExpression_in_arrayItem3325);
				expr=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, expr.Tree);
				DebugLocation(662, 33);
				 retval.value = expr.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:662:60: {...}?
				{
				DebugLocation(662, 60);
				if (!(( input.LA(1) == COMMA )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == COMMA ");
				}
				DebugLocation(662, 86);
				 retval.value = new IdentifierSyntax("undefined"); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:662:136: {...}?
				{
				DebugLocation(662, 136);
				if (!(( input.LA(1) == RBRACK )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == RBRACK ");
				}
				DebugLocation(662, 163);
				 retval.value = null; 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayItem", 11);
			LeaveRule("arrayItem", 11);
			LeaveRule_arrayItem();
		}
		DebugLocation(664, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayItem"); }
		return retval;

	}
	// $ANTLR end "arrayItem"

	private sealed partial class objectLiteral_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public JsonExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public objectLiteral_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();

	// $ANTLR start "objectLiteral"
	// ..\\ES3.g:666:1: objectLiteral returns [JsonExpressionSyntax value] : lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE ;
	[GrammarRule("objectLiteral")]
	private ES3Parser.objectLiteral_return objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 12);
		TraceIn("objectLiteral", 12);
		ES3Parser.objectLiteral_return retval = new ES3Parser.objectLiteral_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken COMMA18 = default(IToken);
		IToken RBRACE19 = default(IToken);
		ES3Parser.propertyAssignment_return first = default(ES3Parser.propertyAssignment_return);
		ES3Parser.propertyAssignment_return follow = default(ES3Parser.propertyAssignment_return);

		object lb_tree = default(object);
		object COMMA18_tree = default(object);
		object RBRACE19_tree = default(object);


			retval.value = new JsonExpressionSyntax();

		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(666, 1);
		try
		{
			// ..\\ES3.g:670:2: (lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:670:4: lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(670, 6);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_objectLiteral3366); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(670, 14);
			// ..\\ES3.g:670:14: (first= propertyAssignment ( COMMA follow= propertyAssignment )* )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==DecimalLiteral||LA11_0==HexIntegerLiteral||LA11_0==Identifier||LA11_0==OctalIntegerLiteral||LA11_0==StringLiteral))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:670:16: first= propertyAssignment ( COMMA follow= propertyAssignment )*
				{
				DebugLocation(670, 21);
				PushFollow(Follow._propertyAssignment_in_objectLiteral3372);
				first=propertyAssignment();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(670, 41);
				 retval.value.Push(first.value); 
				DebugLocation(670, 72);
				// ..\\ES3.g:670:72: ( COMMA follow= propertyAssignment )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==COMMA))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:670:74: COMMA follow= propertyAssignment
						{
						DebugLocation(670, 74);
						COMMA18=(IToken)Match(input,COMMA,Follow._COMMA_in_objectLiteral3379); 
						COMMA18_tree = (object)adaptor.Create(COMMA18);
						adaptor.AddChild(root_0, COMMA18_tree);

						DebugLocation(670, 86);
						PushFollow(Follow._propertyAssignment_in_objectLiteral3383);
						follow=propertyAssignment();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(670, 106);
						 retval.value.Push(follow.value); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(670, 143);
			RBRACE19=(IToken)Match(input,RBRACE,Follow._RBRACE_in_objectLiteral3393); 
			RBRACE19_tree = (object)adaptor.Create(RBRACE19);
			adaptor.AddChild(root_0, RBRACE19_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectLiteral", 12);
			LeaveRule("objectLiteral", 12);
			LeaveRule_objectLiteral();
		}
		DebugLocation(671, 1);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return retval;

	}
	// $ANTLR end "objectLiteral"

	private sealed partial class propertyAssignment_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public PropertyDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyAssignment_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_propertyAssignment();
	partial void LeaveRule_propertyAssignment();

	// $ANTLR start "propertyAssignment"
	// ..\\ES3.g:673:1: propertyAssignment returns [PropertyDeclarationSyntax value] : (acc= accessor prop2= propertyName (parameters= formalParameterList )? statements= functionBody |prop1= propertyName COLON ass= assignmentExpression );
	[GrammarRule("propertyAssignment")]
	private ES3Parser.propertyAssignment_return propertyAssignment()
	{
		EnterRule_propertyAssignment();
		EnterRule("propertyAssignment", 13);
		TraceIn("propertyAssignment", 13);
		ES3Parser.propertyAssignment_return retval = new ES3Parser.propertyAssignment_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COLON20 = default(IToken);
		ES3Parser.accessor_return acc = default(ES3Parser.accessor_return);
		ES3Parser.propertyName_return prop2 = default(ES3Parser.propertyName_return);
		ES3Parser.formalParameterList_return parameters = default(ES3Parser.formalParameterList_return);
		ES3Parser.functionBody_return statements = default(ES3Parser.functionBody_return);
		ES3Parser.propertyName_return prop1 = default(ES3Parser.propertyName_return);
		ES3Parser.assignmentExpression_return ass = default(ES3Parser.assignmentExpression_return);

		object COLON20_tree = default(object);


			retval.value = new PropertyDeclarationSyntax();
			FunctionSyntax func=new FunctionSyntax();

		try { DebugEnterRule(GrammarFileName, "propertyAssignment");
		DebugLocation(673, 1);
		try
		{
			// ..\\ES3.g:678:2: (acc= accessor prop2= propertyName (parameters= formalParameterList )? statements= functionBody |prop1= propertyName COLON ass= assignmentExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==Identifier))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==DecimalLiteral||LA13_1==HexIntegerLiteral||LA13_1==Identifier||LA13_1==OctalIntegerLiteral||LA13_1==StringLiteral))
				{
					alt13 = 1;
				}
				else if ((LA13_1==COLON))
				{
					alt13 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA13_0==DecimalLiteral||LA13_0==HexIntegerLiteral||LA13_0==OctalIntegerLiteral||LA13_0==StringLiteral))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:678:4: acc= accessor prop2= propertyName (parameters= formalParameterList )? statements= functionBody
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(678, 7);
				PushFollow(Follow._accessor_in_propertyAssignment3416);
				acc=accessor();
				PopFollow();

				adaptor.AddChild(root_0, acc.Tree);
				DebugLocation(678, 17);
				 retval.value.Mode=acc.value; 
				DebugLocation(678, 44);
				 retval.value.Expression=func; 
				DebugLocation(678, 77);
				PushFollow(Follow._propertyName_in_propertyAssignment3424);
				prop2=propertyName();
				PopFollow();

				adaptor.AddChild(root_0, prop2.Tree);
				DebugLocation(678, 91);
				 retval.value.Name=func.Name=prop2.value; 
				DebugLocation(678, 130);
				// ..\\ES3.g:678:130: (parameters= formalParameterList )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==LPAREN))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:678:131: parameters= formalParameterList
					{
					DebugLocation(678, 141);
					PushFollow(Follow._formalParameterList_in_propertyAssignment3431);
					parameters=formalParameterList();
					PopFollow();

					adaptor.AddChild(root_0, parameters.Tree);
					DebugLocation(678, 162);
					 func.Parameters.AddRange(parameters.value); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(678, 222);
				PushFollow(Follow._functionBody_in_propertyAssignment3439);
				statements=functionBody();
				PopFollow();

				adaptor.AddChild(root_0, statements.Tree);
				DebugLocation(678, 236);
				 func.Body=statements.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:679:4: prop1= propertyName COLON ass= assignmentExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(679, 9);
				PushFollow(Follow._propertyName_in_propertyAssignment3449);
				prop1=propertyName();
				PopFollow();

				adaptor.AddChild(root_0, prop1.Tree);
				DebugLocation(679, 23);
				 retval.value.Name=prop1.value; 
				DebugLocation(679, 52);
				COLON20=(IToken)Match(input,COLON,Follow._COLON_in_propertyAssignment3453); 
				COLON20_tree = (object)adaptor.Create(COLON20);
				adaptor.AddChild(root_0, COLON20_tree);

				DebugLocation(679, 61);
				PushFollow(Follow._assignmentExpression_in_propertyAssignment3457);
				ass=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, ass.Tree);
				DebugLocation(679, 83);
				 retval.value.Expression=ass.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyAssignment", 13);
			LeaveRule("propertyAssignment", 13);
			LeaveRule_propertyAssignment();
		}
		DebugLocation(680, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyAssignment"); }
		return retval;

	}
	// $ANTLR end "propertyAssignment"

	private sealed partial class accessor_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public PropertyExpressionType value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public accessor_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();

	// $ANTLR start "accessor"
	// ..\\ES3.g:682:1: accessor returns [PropertyExpressionType value] : ex1= Identifier {...}? =>;
	[GrammarRule("accessor")]
	private ES3Parser.accessor_return accessor()
	{
		EnterRule_accessor();
		EnterRule("accessor", 14);
		TraceIn("accessor", 14);
		ES3Parser.accessor_return retval = new ES3Parser.accessor_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);

		object ex1_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(682, 1);
		try
		{
			// ..\\ES3.g:683:2: (ex1= Identifier {...}? =>)
			DebugEnterAlt(1);
			// ..\\ES3.g:683:4: ex1= Identifier {...}? =>
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(683, 7);
			ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_accessor3477); 
			ex1_tree = (object)adaptor.Create(ex1);
			adaptor.AddChild(root_0, ex1_tree);

			DebugLocation(683, 19);
			if (!(( ex1.Text=="get" || ex1.Text=="set" )))
			{
				throw new FailedPredicateException(input, "accessor", " ex1.Text==\"get\" || ex1.Text==\"set\" ");
			}
			DebugLocation(683, 61);
			 if(ex1.Text=="get") retval.value = PropertyExpressionType.Get; if(ex1.Text=="set") retval.value =PropertyExpressionType.Set; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor", 14);
			LeaveRule("accessor", 14);
			LeaveRule_accessor();
		}
		DebugLocation(684, 1);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return retval;

	}
	// $ANTLR end "accessor"

	private sealed partial class propertyName_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public string value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyName_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();

	// $ANTLR start "propertyName"
	// ..\\ES3.g:686:1: propertyName returns [string value] : (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral );
	[GrammarRule("propertyName")]
	private ES3Parser.propertyName_return propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 15);
		TraceIn("propertyName", 15);
		ES3Parser.propertyName_return retval = new ES3Parser.propertyName_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		ES3Parser.numericLiteral_return ex3 = default(ES3Parser.numericLiteral_return);

		object ex1_tree = default(object);
		object ex2_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(686, 1);
		try
		{
			// ..\\ES3.g:687:2: (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case Identifier:
				{
				alt14 = 1;
				}
				break;
			case StringLiteral:
				{
				alt14 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:687:4: ex1= Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(687, 7);
				ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_propertyName3499); 
				ex1_tree = (object)adaptor.Create(ex1);
				adaptor.AddChild(root_0, ex1_tree);

				DebugLocation(687, 19);
				 retval.value = ex1.Text; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:688:4: ex2= StringLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(688, 7);
				ex2=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_propertyName3508); 
				ex2_tree = (object)adaptor.Create(ex2);
				adaptor.AddChild(root_0, ex2_tree);

				DebugLocation(688, 22);
				 retval.value = extractString(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:689:4: ex3= numericLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(689, 7);
				PushFollow(Follow._numericLiteral_in_propertyName3517);
				ex3=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, ex3.Tree);
				DebugLocation(689, 23);
				 retval.value = ex3.value.ToString(); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyName", 15);
			LeaveRule("propertyName", 15);
			LeaveRule_propertyName();
		}
		DebugLocation(690, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"

	private sealed partial class memberExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public memberExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_memberExpression();
	partial void LeaveRule_memberExpression();

	// $ANTLR start "memberExpression"
	// ..\\ES3.g:701:1: memberExpression returns [ExpressionSyntax value] : (prim= primaryExpression |func= functionExpression |exp= newExpression );
	[GrammarRule("memberExpression")]
	private ES3Parser.memberExpression_return memberExpression()
	{
		EnterRule_memberExpression();
		EnterRule("memberExpression", 16);
		TraceIn("memberExpression", 16);
		ES3Parser.memberExpression_return retval = new ES3Parser.memberExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.primaryExpression_return prim = default(ES3Parser.primaryExpression_return);
		ES3Parser.functionExpression_return func = default(ES3Parser.functionExpression_return);
		ES3Parser.newExpression_return exp = default(ES3Parser.newExpression_return);


		try { DebugEnterRule(GrammarFileName, "memberExpression");
		DebugLocation(701, 1);
		try
		{
			// ..\\ES3.g:702:2: (prim= primaryExpression |func= functionExpression |exp= newExpression )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case DecimalLiteral:
			case FALSE:
			case HexIntegerLiteral:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case THIS:
			case TRUE:
				{
				alt15 = 1;
				}
				break;
			case FUNCTION:
				{
				alt15 = 2;
				}
				break;
			case NEW:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:702:4: prim= primaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(702, 8);
				PushFollow(Follow._primaryExpression_in_memberExpression3543);
				prim=primaryExpression();
				PopFollow();

				adaptor.AddChild(root_0, prim.Tree);
				DebugLocation(702, 27);
				 retval.value = prim.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:703:4: func= functionExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(703, 8);
				PushFollow(Follow._functionExpression_in_memberExpression3552);
				func=functionExpression();
				PopFollow();

				adaptor.AddChild(root_0, func.Tree);
				DebugLocation(703, 28);
				 retval.value = func.value; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:704:4: exp= newExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(704, 7);
				PushFollow(Follow._newExpression_in_memberExpression3561);
				exp=newExpression();
				PopFollow();

				adaptor.AddChild(root_0, exp.Tree);
				DebugLocation(704, 22);
				 retval.value = exp.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberExpression", 16);
			LeaveRule("memberExpression", 16);
			LeaveRule_memberExpression();
		}
		DebugLocation(705, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpression"); }
		return retval;

	}
	// $ANTLR end "memberExpression"

	private sealed partial class newExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public NewSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public newExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();

	// $ANTLR start "newExpression"
	// ..\\ES3.g:707:1: newExpression returns [NewSyntax value] : NEW first= memberExpression ;
	[GrammarRule("newExpression")]
	private ES3Parser.newExpression_return newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 17);
		TraceIn("newExpression", 17);
		ES3Parser.newExpression_return retval = new ES3Parser.newExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NEW21 = default(IToken);
		ES3Parser.memberExpression_return first = default(ES3Parser.memberExpression_return);

		object NEW21_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(707, 1);
		try
		{
			// ..\\ES3.g:708:2: ( NEW first= memberExpression )
			DebugEnterAlt(1);
			// ..\\ES3.g:708:4: NEW first= memberExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(708, 7);
			NEW21=(IToken)Match(input,NEW,Follow._NEW_in_newExpression3578); 
			NEW21_tree = (object)adaptor.Create(NEW21);
			root_0 = (object)adaptor.BecomeRoot(NEW21_tree, root_0);

			DebugLocation(708, 14);
			PushFollow(Follow._memberExpression_in_newExpression3583);
			first=memberExpression();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(708, 32);
			 retval.value = new NewSyntax(first.value); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 17);
			LeaveRule("newExpression", 17);
			LeaveRule_newExpression();
		}
		DebugLocation(709, 1);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	private sealed partial class arguments_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public List<ExpressionSyntax> value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arguments_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\ES3.g:711:1: arguments returns [List<ExpressionSyntax> value] : LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN ;
	[GrammarRule("arguments")]
	private ES3Parser.arguments_return arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 18);
		TraceIn("arguments", 18);
		ES3Parser.arguments_return retval = new ES3Parser.arguments_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LPAREN22 = default(IToken);
		IToken COMMA23 = default(IToken);
		IToken RPAREN24 = default(IToken);
		ES3Parser.assignmentExpression_return first = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return follow = default(ES3Parser.assignmentExpression_return);

		object LPAREN22_tree = default(object);
		object COMMA23_tree = default(object);
		object RPAREN24_tree = default(object);


			retval.value = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(711, 1);
		try
		{
			// ..\\ES3.g:715:2: ( LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:715:4: LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(715, 4);
			LPAREN22=(IToken)Match(input,LPAREN,Follow._LPAREN_in_arguments3606); 
			LPAREN22_tree = (object)adaptor.Create(LPAREN22);
			adaptor.AddChild(root_0, LPAREN22_tree);

			DebugLocation(715, 11);
			// ..\\ES3.g:715:11: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==ADD||LA17_0==DEC||LA17_0==DELETE||LA17_0==DecimalLiteral||LA17_0==FALSE||LA17_0==FUNCTION||LA17_0==HexIntegerLiteral||LA17_0==INC||LA17_0==INV||LA17_0==Identifier||(LA17_0>=LBRACE && LA17_0<=LBRACK)||LA17_0==LPAREN||(LA17_0>=NEW && LA17_0<=NOT)||LA17_0==NULL||LA17_0==OctalIntegerLiteral||LA17_0==RegularExpressionLiteral||LA17_0==SUB||LA17_0==StringLiteral||LA17_0==THIS||LA17_0==TRUE||LA17_0==TYPEOF||LA17_0==VOID))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:715:13: first= assignmentExpression ( COMMA follow= assignmentExpression )*
				{
				DebugLocation(715, 18);
				PushFollow(Follow._assignmentExpression_in_arguments3612);
				first=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(715, 40);
				 retval.value.Add(first.value); 
				DebugLocation(715, 69);
				// ..\\ES3.g:715:69: ( COMMA follow= assignmentExpression )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==COMMA))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:715:71: COMMA follow= assignmentExpression
						{
						DebugLocation(715, 71);
						COMMA23=(IToken)Match(input,COMMA,Follow._COMMA_in_arguments3618); 
						COMMA23_tree = (object)adaptor.Create(COMMA23);
						adaptor.AddChild(root_0, COMMA23_tree);

						DebugLocation(715, 83);
						PushFollow(Follow._assignmentExpression_in_arguments3622);
						follow=assignmentExpression();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(715, 105);
						 retval.value.Add(follow.value); 

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(715, 140);
			RPAREN24=(IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments3631); 
			RPAREN24_tree = (object)adaptor.Create(RPAREN24);
			adaptor.AddChild(root_0, RPAREN24_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 18);
			LeaveRule("arguments", 18);
			LeaveRule_arguments();
		}
		DebugLocation(717, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	private sealed partial class generics_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public List<ExpressionSyntax> value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public generics_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_generics();
	partial void LeaveRule_generics();

	// $ANTLR start "generics"
	// ..\\ES3.g:719:1: generics returns [List<ExpressionSyntax> value] : LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE ;
	[GrammarRule("generics")]
	private ES3Parser.generics_return generics()
	{
		EnterRule_generics();
		EnterRule("generics", 19);
		TraceIn("generics", 19);
		ES3Parser.generics_return retval = new ES3Parser.generics_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LBRACE25 = default(IToken);
		IToken COMMA26 = default(IToken);
		IToken RBRACE27 = default(IToken);
		ES3Parser.assignmentExpression_return first = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return follow = default(ES3Parser.assignmentExpression_return);

		object LBRACE25_tree = default(object);
		object COMMA26_tree = default(object);
		object RBRACE27_tree = default(object);


			retval.value = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "generics");
		DebugLocation(719, 1);
		try
		{
			// ..\\ES3.g:723:2: ( LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:723:4: LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(723, 4);
			LBRACE25=(IToken)Match(input,LBRACE,Follow._LBRACE_in_generics3653); 
			LBRACE25_tree = (object)adaptor.Create(LBRACE25);
			adaptor.AddChild(root_0, LBRACE25_tree);

			DebugLocation(723, 11);
			// ..\\ES3.g:723:11: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==ADD||LA19_0==DEC||LA19_0==DELETE||LA19_0==DecimalLiteral||LA19_0==FALSE||LA19_0==FUNCTION||LA19_0==HexIntegerLiteral||LA19_0==INC||LA19_0==INV||LA19_0==Identifier||(LA19_0>=LBRACE && LA19_0<=LBRACK)||LA19_0==LPAREN||(LA19_0>=NEW && LA19_0<=NOT)||LA19_0==NULL||LA19_0==OctalIntegerLiteral||LA19_0==RegularExpressionLiteral||LA19_0==SUB||LA19_0==StringLiteral||LA19_0==THIS||LA19_0==TRUE||LA19_0==TYPEOF||LA19_0==VOID))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:723:13: first= assignmentExpression ( COMMA follow= assignmentExpression )*
				{
				DebugLocation(723, 18);
				PushFollow(Follow._assignmentExpression_in_generics3659);
				first=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, first.Tree);
				DebugLocation(723, 40);
				 retval.value.Add(first.value); 
				DebugLocation(723, 69);
				// ..\\ES3.g:723:69: ( COMMA follow= assignmentExpression )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==COMMA))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:723:71: COMMA follow= assignmentExpression
						{
						DebugLocation(723, 71);
						COMMA26=(IToken)Match(input,COMMA,Follow._COMMA_in_generics3665); 
						COMMA26_tree = (object)adaptor.Create(COMMA26);
						adaptor.AddChild(root_0, COMMA26_tree);

						DebugLocation(723, 83);
						PushFollow(Follow._assignmentExpression_in_generics3669);
						follow=assignmentExpression();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(723, 105);
						 retval.value.Add(follow.value); 

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(723, 140);
			RBRACE27=(IToken)Match(input,RBRACE,Follow._RBRACE_in_generics3678); 
			RBRACE27_tree = (object)adaptor.Create(RBRACE27);
			adaptor.AddChild(root_0, RBRACE27_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generics", 19);
			LeaveRule("generics", 19);
			LeaveRule_generics();
		}
		DebugLocation(725, 1);
		} finally { DebugExitRule(GrammarFileName, "generics"); }
		return retval;

	}
	// $ANTLR end "generics"

	private sealed partial class leftHandSideExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public leftHandSideExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_leftHandSideExpression();
	partial void LeaveRule_leftHandSideExpression();

	// $ANTLR start "leftHandSideExpression"
	// ..\\ES3.g:728:1: leftHandSideExpression returns [ExpressionSyntax value] : (mem= memberExpression ) ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* ;
	[GrammarRule("leftHandSideExpression")]
	private ES3Parser.leftHandSideExpression_return leftHandSideExpression()
	{
		EnterRule_leftHandSideExpression();
		EnterRule("leftHandSideExpression", 20);
		TraceIn("leftHandSideExpression", 20);
		ES3Parser.leftHandSideExpression_return retval = new ES3Parser.leftHandSideExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken LBRACK28 = default(IToken);
		IToken RBRACK29 = default(IToken);
		IToken DOT30 = default(IToken);
		ES3Parser.memberExpression_return mem = default(ES3Parser.memberExpression_return);
		ES3Parser.generics_return gen = default(ES3Parser.generics_return);
		ES3Parser.arguments_return arg = default(ES3Parser.arguments_return);
		ES3Parser.expression_return exp = default(ES3Parser.expression_return);

		object id_tree = default(object);
		object LBRACK28_tree = default(object);
		object RBRACK29_tree = default(object);
		object DOT30_tree = default(object);


			List<ExpressionSyntax> gens = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "leftHandSideExpression");
		DebugLocation(728, 1);
		try
		{
			// ..\\ES3.g:735:2: ( (mem= memberExpression ) ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:736:2: (mem= memberExpression ) ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(736, 2);
			// ..\\ES3.g:736:2: (mem= memberExpression )
			DebugEnterAlt(1);
			// ..\\ES3.g:737:3: mem= memberExpression
			{
			DebugLocation(737, 6);
			PushFollow(Follow._memberExpression_in_leftHandSideExpression3714);
			mem=memberExpression();
			PopFollow();

			adaptor.AddChild(root_0, mem.Tree);
			DebugLocation(737, 24);
			 retval.value = mem.value; 

			}

			DebugLocation(739, 2);
			// ..\\ES3.g:739:2: ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=4;
				try { DebugEnterDecision(21, false);
				switch (input.LA(1))
				{
				case LBRACE:
				case LPAREN:
					{
					alt21 = 1;
					}
					break;
				case LBRACK:
					{
					alt21 = 2;
					}
					break;
				case DOT:
					{
					alt21 = 3;
					}
					break;

				}

				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:740:3: (gen= generics )? arg= arguments
					{
					DebugLocation(740, 3);
					// ..\\ES3.g:740:3: (gen= generics )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==LBRACE))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:740:4: gen= generics
						{
						DebugLocation(740, 7);
						PushFollow(Follow._generics_in_leftHandSideExpression3730);
						gen=generics();
						PopFollow();

						adaptor.AddChild(root_0, gen.Tree);
						DebugLocation(740, 17);
						 gens = gen.value; 

						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(740, 45);
					PushFollow(Follow._arguments_in_leftHandSideExpression3739);
					arg=arguments();
					PopFollow();

					adaptor.AddChild(root_0, arg.Tree);
					DebugLocation(740, 56);

					            if(retval.value is NewSyntax) {
					                ((NewSyntax)retval.value).Generics = gens;
					                ((NewSyntax)retval.value).Arguments = arg.value;
					            } else {
					                retval.value = new MethodCallSyntax(retval.value, arg.value)
					                {
					                    Generics = gens
					                };
					            }
					        

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:752:5: LBRACK exp= expression RBRACK
					{
					DebugLocation(752, 5);
					LBRACK28=(IToken)Match(input,LBRACK,Follow._LBRACK_in_leftHandSideExpression3750); 
					LBRACK28_tree = (object)adaptor.Create(LBRACK28);
					adaptor.AddChild(root_0, LBRACK28_tree);

					DebugLocation(752, 15);
					PushFollow(Follow._expression_in_leftHandSideExpression3754);
					exp=expression();
					PopFollow();

					adaptor.AddChild(root_0, exp.Tree);
					DebugLocation(752, 27);
					RBRACK29=(IToken)Match(input,RBRACK,Follow._RBRACK_in_leftHandSideExpression3756); 
					RBRACK29_tree = (object)adaptor.Create(RBRACK29);
					adaptor.AddChild(root_0, RBRACK29_tree);

					DebugLocation(752, 34);

					            retval.value = new IndexerSyntax(
					                retval.value,
					                exp.value
					            );
					        

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ..\\ES3.g:759:5: DOT id= Identifier
					{
					DebugLocation(759, 5);
					DOT30=(IToken)Match(input,DOT,Follow._DOT_in_leftHandSideExpression3769); 
					DOT30_tree = (object)adaptor.Create(DOT30);
					adaptor.AddChild(root_0, DOT30_tree);

					DebugLocation(759, 11);
					id=(IToken)Match(input,Identifier,Follow._Identifier_in_leftHandSideExpression3773); 
					id_tree = (object)adaptor.Create(id);
					adaptor.AddChild(root_0, id_tree);

					DebugLocation(759, 23);

					            if(retval.value is NewSyntax) {
					                ((NewSyntax)retval.value).Expression = new PropertySyntax(
					                    ((NewSyntax)retval.value).Expression,
					                    id.Text
					                );
					            } else {
					                retval.value = new PropertySyntax(retval.value, id.Text);
					            }
					        

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


				retval.value.Source = ExtractSourceCode((CommonToken)retval.Start, (CommonToken)retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("leftHandSideExpression", 20);
			LeaveRule("leftHandSideExpression", 20);
			LeaveRule_leftHandSideExpression();
		}
		DebugLocation(771, 1);
		} finally { DebugExitRule(GrammarFileName, "leftHandSideExpression"); }
		return retval;

	}
	// $ANTLR end "leftHandSideExpression"

	private sealed partial class postfixExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public postfixExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();

	// $ANTLR start "postfixExpression"
	// ..\\ES3.g:783:1: postfixExpression returns [ExpressionSyntax value] : left= leftHandSideExpression (post= postfixOperator )? ;
	[GrammarRule("postfixExpression")]
	private ES3Parser.postfixExpression_return postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 21);
		TraceIn("postfixExpression", 21);
		ES3Parser.postfixExpression_return retval = new ES3Parser.postfixExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.leftHandSideExpression_return left = default(ES3Parser.leftHandSideExpression_return);
		ES3Parser.postfixOperator_return post = default(ES3Parser.postfixOperator_return);


		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(783, 1);
		try
		{
			// ..\\ES3.g:784:2: (left= leftHandSideExpression (post= postfixOperator )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:784:4: left= leftHandSideExpression (post= postfixOperator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(784, 8);
			PushFollow(Follow._leftHandSideExpression_in_postfixExpression3807);
			left=leftHandSideExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(784, 32);
			 retval.value = left.value; if (input.LA(1) == INC || input.LA(1) == DEC) PromoteEOL(null);  
			DebugLocation(784, 122);
			// ..\\ES3.g:784:122: (post= postfixOperator )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==DEC||LA22_0==INC))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:784:124: post= postfixOperator
				{
				DebugLocation(784, 128);
				PushFollow(Follow._postfixOperator_in_postfixExpression3815);
				post=postfixOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(post.Tree, root_0);
				DebugLocation(784, 146);
				 retval.value = new UnaryExpressionSyntax(post.value, retval.value); 

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixExpression", 21);
			LeaveRule("postfixExpression", 21);
			LeaveRule_postfixExpression();
		}
		DebugLocation(785, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return retval;

	}
	// $ANTLR end "postfixExpression"

	private sealed partial class postfixOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public UnaryExpressionType value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public postfixOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_postfixOperator();
	partial void LeaveRule_postfixOperator();

	// $ANTLR start "postfixOperator"
	// ..\\ES3.g:787:1: postfixOperator returns [UnaryExpressionType value] : (op= INC |op= DEC );
	[GrammarRule("postfixOperator")]
	private ES3Parser.postfixOperator_return postfixOperator()
	{
		EnterRule_postfixOperator();
		EnterRule("postfixOperator", 22);
		TraceIn("postfixOperator", 22);
		ES3Parser.postfixOperator_return retval = new ES3Parser.postfixOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);

		object op_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "postfixOperator");
		DebugLocation(787, 1);
		try
		{
			// ..\\ES3.g:788:2: (op= INC |op= DEC )
			int alt23=2;
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==INC))
			{
				alt23 = 1;
			}
			else if ((LA23_0==DEC))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:788:4: op= INC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(788, 6);
				op=(IToken)Match(input,INC,Follow._INC_in_postfixOperator3838); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(788, 11);
				 op.Type = PINC; retval.value = UnaryExpressionType.PostfixPlusPlus; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:789:4: op= DEC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(789, 6);
				op=(IToken)Match(input,DEC,Follow._DEC_in_postfixOperator3847); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(789, 11);
				 op.Type = PDEC; retval.value = UnaryExpressionType.PostfixMinusMinus; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixOperator", 22);
			LeaveRule("postfixOperator", 22);
			LeaveRule_postfixOperator();
		}
		DebugLocation(790, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixOperator"); }
		return retval;

	}
	// $ANTLR end "postfixOperator"

	private sealed partial class unaryExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// ..\\ES3.g:796:1: unaryExpression returns [ExpressionSyntax value] : (post= postfixExpression |op= unaryOperator exp= unaryExpression );
	[GrammarRule("unaryExpression")]
	private ES3Parser.unaryExpression_return unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 23);
		TraceIn("unaryExpression", 23);
		ES3Parser.unaryExpression_return retval = new ES3Parser.unaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.postfixExpression_return post = default(ES3Parser.postfixExpression_return);
		ES3Parser.unaryOperator_return op = default(ES3Parser.unaryOperator_return);
		ES3Parser.unaryExpression_return exp = default(ES3Parser.unaryExpression_return);


		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(796, 1);
		try
		{
			// ..\\ES3.g:797:2: (post= postfixExpression |op= unaryOperator exp= unaryExpression )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==DecimalLiteral||LA24_0==FALSE||LA24_0==FUNCTION||LA24_0==HexIntegerLiteral||LA24_0==Identifier||(LA24_0>=LBRACE && LA24_0<=LBRACK)||LA24_0==LPAREN||LA24_0==NEW||LA24_0==NULL||LA24_0==OctalIntegerLiteral||LA24_0==RegularExpressionLiteral||LA24_0==StringLiteral||LA24_0==THIS||LA24_0==TRUE))
			{
				alt24 = 1;
			}
			else if ((LA24_0==ADD||LA24_0==DEC||LA24_0==DELETE||LA24_0==INC||LA24_0==INV||LA24_0==NOT||LA24_0==SUB||LA24_0==TYPEOF||LA24_0==VOID))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:797:4: post= postfixExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(797, 8);
				PushFollow(Follow._postfixExpression_in_unaryExpression3870);
				post=postfixExpression();
				PopFollow();

				adaptor.AddChild(root_0, post.Tree);
				DebugLocation(797, 27);
				 retval.value = post.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:798:4: op= unaryOperator exp= unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(798, 6);
				PushFollow(Follow._unaryOperator_in_unaryExpression3879);
				op=unaryOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(op.Tree, root_0);
				DebugLocation(798, 25);
				PushFollow(Follow._unaryExpression_in_unaryExpression3884);
				exp=unaryExpression();
				PopFollow();

				adaptor.AddChild(root_0, exp.Tree);
				DebugLocation(798, 42);
				 retval.value = new UnaryExpressionSyntax(op.value, exp.value); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 23);
			LeaveRule("unaryExpression", 23);
			LeaveRule_unaryExpression();
		}
		DebugLocation(799, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	private sealed partial class unaryOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public UnaryExpressionType value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_unaryOperator();
	partial void LeaveRule_unaryOperator();

	// $ANTLR start "unaryOperator"
	// ..\\ES3.g:801:1: unaryOperator returns [UnaryExpressionType value] : ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT );
	[GrammarRule("unaryOperator")]
	private ES3Parser.unaryOperator_return unaryOperator()
	{
		EnterRule_unaryOperator();
		EnterRule("unaryOperator", 24);
		TraceIn("unaryOperator", 24);
		ES3Parser.unaryOperator_return retval = new ES3Parser.unaryOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken DELETE31 = default(IToken);
		IToken VOID32 = default(IToken);
		IToken TYPEOF33 = default(IToken);
		IToken INC34 = default(IToken);
		IToken DEC35 = default(IToken);
		IToken INV36 = default(IToken);
		IToken NOT37 = default(IToken);

		object op_tree = default(object);
		object DELETE31_tree = default(object);
		object VOID32_tree = default(object);
		object TYPEOF33_tree = default(object);
		object INC34_tree = default(object);
		object DEC35_tree = default(object);
		object INV36_tree = default(object);
		object NOT37_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "unaryOperator");
		DebugLocation(801, 1);
		try
		{
			// ..\\ES3.g:802:2: ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT )
			int alt25=9;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case DELETE:
				{
				alt25 = 1;
				}
				break;
			case VOID:
				{
				alt25 = 2;
				}
				break;
			case TYPEOF:
				{
				alt25 = 3;
				}
				break;
			case INC:
				{
				alt25 = 4;
				}
				break;
			case DEC:
				{
				alt25 = 5;
				}
				break;
			case ADD:
				{
				alt25 = 6;
				}
				break;
			case SUB:
				{
				alt25 = 7;
				}
				break;
			case INV:
				{
				alt25 = 8;
				}
				break;
			case NOT:
				{
				alt25 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:802:4: DELETE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(802, 4);
				DELETE31=(IToken)Match(input,DELETE,Follow._DELETE_in_unaryOperator3902); 
				DELETE31_tree = (object)adaptor.Create(DELETE31);
				adaptor.AddChild(root_0, DELETE31_tree);

				DebugLocation(802, 11);
				 retval.value = UnaryExpressionType.Delete; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:803:4: VOID
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(803, 4);
				VOID32=(IToken)Match(input,VOID,Follow._VOID_in_unaryOperator3909); 
				VOID32_tree = (object)adaptor.Create(VOID32);
				adaptor.AddChild(root_0, VOID32_tree);

				DebugLocation(803, 9);
				 retval.value = UnaryExpressionType.Void; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:804:4: TYPEOF
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(804, 4);
				TYPEOF33=(IToken)Match(input,TYPEOF,Follow._TYPEOF_in_unaryOperator3916); 
				TYPEOF33_tree = (object)adaptor.Create(TYPEOF33);
				adaptor.AddChild(root_0, TYPEOF33_tree);

				DebugLocation(804, 11);
				 retval.value = UnaryExpressionType.TypeOf; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:805:4: INC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(805, 4);
				INC34=(IToken)Match(input,INC,Follow._INC_in_unaryOperator3923); 
				INC34_tree = (object)adaptor.Create(INC34);
				adaptor.AddChild(root_0, INC34_tree);

				DebugLocation(805, 8);
				 retval.value = UnaryExpressionType.PrefixPlusPlus; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:806:4: DEC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(806, 4);
				DEC35=(IToken)Match(input,DEC,Follow._DEC_in_unaryOperator3930); 
				DEC35_tree = (object)adaptor.Create(DEC35);
				adaptor.AddChild(root_0, DEC35_tree);

				DebugLocation(806, 8);
				 retval.value = UnaryExpressionType.PrefixMinusMinus; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:807:4: op= ADD
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(807, 6);
				op=(IToken)Match(input,ADD,Follow._ADD_in_unaryOperator3939); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(807, 11);
				 op.Type = POS; retval.value = UnaryExpressionType.Positive; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:808:4: op= SUB
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(808, 6);
				op=(IToken)Match(input,SUB,Follow._SUB_in_unaryOperator3948); 
				op_tree = (object)adaptor.Create(op);
				adaptor.AddChild(root_0, op_tree);

				DebugLocation(808, 11);
				 op.Type = NEG; retval.value = UnaryExpressionType.Negate; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:809:4: INV
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(809, 4);
				INV36=(IToken)Match(input,INV,Follow._INV_in_unaryOperator3955); 
				INV36_tree = (object)adaptor.Create(INV36);
				adaptor.AddChild(root_0, INV36_tree);

				DebugLocation(809, 8);
				 retval.value = UnaryExpressionType.Inv; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:810:4: NOT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(810, 4);
				NOT37=(IToken)Match(input,NOT,Follow._NOT_in_unaryOperator3962); 
				NOT37_tree = (object)adaptor.Create(NOT37);
				adaptor.AddChild(root_0, NOT37_tree);

				DebugLocation(810, 8);
				 retval.value = UnaryExpressionType.Not; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryOperator", 24);
			LeaveRule("unaryOperator", 24);
			LeaveRule_unaryOperator();
		}
		DebugLocation(811, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
		return retval;

	}
	// $ANTLR end "unaryOperator"

	private sealed partial class multiplicativeExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public multiplicativeExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// ..\\ES3.g:817:1: multiplicativeExpression returns [ExpressionSyntax value] : left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private ES3Parser.multiplicativeExpression_return multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 25);
		TraceIn("multiplicativeExpression", 25);
		ES3Parser.multiplicativeExpression_return retval = new ES3Parser.multiplicativeExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken MUL38 = default(IToken);
		IToken DIV39 = default(IToken);
		IToken MOD40 = default(IToken);
		ES3Parser.unaryExpression_return left = default(ES3Parser.unaryExpression_return);
		ES3Parser.unaryExpression_return right = default(ES3Parser.unaryExpression_return);

		object MUL38_tree = default(object);
		object DIV39_tree = default(object);
		object MOD40_tree = default(object);


			BinaryExpressionType type = BinaryExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(817, 1);
		try
		{
			// ..\\ES3.g:821:2: (left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:821:4: left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(821, 8);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression3990);
			left=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(821, 25);
			 retval.value = left.value; 
			DebugLocation(821, 50);
			// ..\\ES3.g:821:50: ( ( MUL | DIV | MOD ) right= unaryExpression )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==DIV||LA27_0==MOD||LA27_0==MUL))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:822:3: ( MUL | DIV | MOD ) right= unaryExpression
					{
					DebugLocation(824, 48);
					// ..\\ES3.g:822:3: ( MUL | DIV | MOD )
					int alt26=3;
					try { DebugEnterSubRule(26);
					try { DebugEnterDecision(26, false);
					switch (input.LA(1))
					{
					case MUL:
						{
						alt26 = 1;
						}
						break;
					case DIV:
						{
						alt26 = 2;
						}
						break;
					case MOD:
						{
						alt26 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:822:5: MUL
						{
						DebugLocation(822, 5);
						MUL38=(IToken)Match(input,MUL,Follow._MUL_in_multiplicativeExpression4001); 
						MUL38_tree = (object)adaptor.Create(MUL38);
						adaptor.AddChild(root_0, MUL38_tree);

						DebugLocation(822, 9);
						 type= BinaryExpressionType.Times; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:823:5: DIV
						{
						DebugLocation(823, 5);
						DIV39=(IToken)Match(input,DIV,Follow._DIV_in_multiplicativeExpression4010); 
						DIV39_tree = (object)adaptor.Create(DIV39);
						adaptor.AddChild(root_0, DIV39_tree);

						DebugLocation(823, 9);
						 type= BinaryExpressionType.Div; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:824:5: MOD
						{
						DebugLocation(824, 5);
						MOD40=(IToken)Match(input,MOD,Follow._MOD_in_multiplicativeExpression4018); 
						MOD40_tree = (object)adaptor.Create(MOD40);
						adaptor.AddChild(root_0, MOD40_tree);

						DebugLocation(824, 9);
						 type= BinaryExpressionType.Modulo; 

						}
						break;

					}
					} finally { DebugExitSubRule(26); }

					DebugLocation(825, 8);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression4029);
					right=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(825, 25);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 25);
			LeaveRule("multiplicativeExpression", 25);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(826, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	private sealed partial class additiveExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public additiveExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// ..\\ES3.g:832:1: additiveExpression returns [ExpressionSyntax value] : left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private ES3Parser.additiveExpression_return additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 26);
		TraceIn("additiveExpression", 26);
		ES3Parser.additiveExpression_return retval = new ES3Parser.additiveExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ADD41 = default(IToken);
		IToken SUB42 = default(IToken);
		ES3Parser.multiplicativeExpression_return left = default(ES3Parser.multiplicativeExpression_return);
		ES3Parser.multiplicativeExpression_return right = default(ES3Parser.multiplicativeExpression_return);

		object ADD41_tree = default(object);
		object SUB42_tree = default(object);


			BinaryExpressionType type = BinaryExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(832, 1);
		try
		{
			// ..\\ES3.g:836:2: (left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:836:4: left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(836, 8);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression4059);
			left=multiplicativeExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(836, 34);
			 retval.value = left.value; 
			DebugLocation(836, 59);
			// ..\\ES3.g:836:59: ( ( ADD | SUB ) right= multiplicativeExpression )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==ADD||LA29_0==SUB))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:837:3: ( ADD | SUB ) right= multiplicativeExpression
					{
					DebugLocation(838, 47);
					// ..\\ES3.g:837:3: ( ADD | SUB )
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==ADD))
					{
						alt28 = 1;
					}
					else if ((LA28_0==SUB))
					{
						alt28 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:837:5: ADD
						{
						DebugLocation(837, 5);
						ADD41=(IToken)Match(input,ADD,Follow._ADD_in_additiveExpression4070); 
						ADD41_tree = (object)adaptor.Create(ADD41);
						adaptor.AddChild(root_0, ADD41_tree);

						DebugLocation(837, 9);
						 type= BinaryExpressionType.Plus; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:838:5: SUB
						{
						DebugLocation(838, 5);
						SUB42=(IToken)Match(input,SUB,Follow._SUB_in_additiveExpression4078); 
						SUB42_tree = (object)adaptor.Create(SUB42);
						adaptor.AddChild(root_0, SUB42_tree);

						DebugLocation(838, 9);
						 type= BinaryExpressionType.Minus; 

						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(839, 8);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression4089);
					right=multiplicativeExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(839, 34);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 26);
			LeaveRule("additiveExpression", 26);
			LeaveRule_additiveExpression();
		}
		DebugLocation(840, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	private sealed partial class shiftExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public shiftExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// ..\\ES3.g:846:1: shiftExpression returns [ExpressionSyntax value] : left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private ES3Parser.shiftExpression_return shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 27);
		TraceIn("shiftExpression", 27);
		ES3Parser.shiftExpression_return retval = new ES3Parser.shiftExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SHL43 = default(IToken);
		IToken SHR44 = default(IToken);
		IToken SHU45 = default(IToken);
		ES3Parser.additiveExpression_return left = default(ES3Parser.additiveExpression_return);
		ES3Parser.additiveExpression_return right = default(ES3Parser.additiveExpression_return);

		object SHL43_tree = default(object);
		object SHR44_tree = default(object);
		object SHU45_tree = default(object);


			BinaryExpressionType type = BinaryExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(846, 1);
		try
		{
			// ..\\ES3.g:850:2: (left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:850:4: left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(850, 8);
			PushFollow(Follow._additiveExpression_in_shiftExpression4120);
			left=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(850, 28);
			 retval.value = left.value; 
			DebugLocation(850, 53);
			// ..\\ES3.g:850:53: ( ( SHL | SHR | SHU ) right= additiveExpression )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==SHL||LA31_0==SHR||LA31_0==SHU))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:851:3: ( SHL | SHR | SHU ) right= additiveExpression
					{
					DebugLocation(853, 60);
					// ..\\ES3.g:851:3: ( SHL | SHR | SHU )
					int alt30=3;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, false);
					switch (input.LA(1))
					{
					case SHL:
						{
						alt30 = 1;
						}
						break;
					case SHR:
						{
						alt30 = 2;
						}
						break;
					case SHU:
						{
						alt30 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:851:5: SHL
						{
						DebugLocation(851, 5);
						SHL43=(IToken)Match(input,SHL,Follow._SHL_in_shiftExpression4131); 
						SHL43_tree = (object)adaptor.Create(SHL43);
						adaptor.AddChild(root_0, SHL43_tree);

						DebugLocation(851, 9);
						 type= BinaryExpressionType.LeftShift; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:852:5: SHR
						{
						DebugLocation(852, 5);
						SHR44=(IToken)Match(input,SHR,Follow._SHR_in_shiftExpression4139); 
						SHR44_tree = (object)adaptor.Create(SHR44);
						adaptor.AddChild(root_0, SHR44_tree);

						DebugLocation(852, 9);
						 type= BinaryExpressionType.RightShift; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:853:5: SHU
						{
						DebugLocation(853, 5);
						SHU45=(IToken)Match(input,SHU,Follow._SHU_in_shiftExpression4147); 
						SHU45_tree = (object)adaptor.Create(SHU45);
						adaptor.AddChild(root_0, SHU45_tree);

						DebugLocation(853, 9);
						 type= BinaryExpressionType.UnsignedRightShift; 

						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(854, 8);
					PushFollow(Follow._additiveExpression_in_shiftExpression4158);
					right=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(854, 28);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 27);
			LeaveRule("shiftExpression", 27);
			LeaveRule_shiftExpression();
		}
		DebugLocation(855, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	private sealed partial class relationalExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// ..\\ES3.g:861:1: relationalExpression returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private ES3Parser.relationalExpression_return relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 28);
		TraceIn("relationalExpression", 28);
		ES3Parser.relationalExpression_return retval = new ES3Parser.relationalExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LT46 = default(IToken);
		IToken GT47 = default(IToken);
		IToken LTE48 = default(IToken);
		IToken GTE49 = default(IToken);
		IToken INSTANCEOF50 = default(IToken);
		IToken IN51 = default(IToken);
		ES3Parser.shiftExpression_return left = default(ES3Parser.shiftExpression_return);
		ES3Parser.shiftExpression_return right = default(ES3Parser.shiftExpression_return);

		object LT46_tree = default(object);
		object GT47_tree = default(object);
		object LTE48_tree = default(object);
		object GTE49_tree = default(object);
		object INSTANCEOF50_tree = default(object);
		object IN51_tree = default(object);


			BinaryExpressionType type = BinaryExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(861, 1);
		try
		{
			// ..\\ES3.g:865:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:865:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(865, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpression4189);
			left=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(865, 25);
			 retval.value = left.value; 
			DebugLocation(865, 50);
			// ..\\ES3.g:865:50: ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if (((LA33_0>=GT && LA33_0<=GTE)||LA33_0==IN||LA33_0==INSTANCEOF||(LA33_0>=LT && LA33_0<=LTE)))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:866:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression
					{
					DebugLocation(871, 44);
					// ..\\ES3.g:866:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN )
					int alt32=6;
					try { DebugEnterSubRule(32);
					try { DebugEnterDecision(32, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt32 = 1;
						}
						break;
					case GT:
						{
						alt32 = 2;
						}
						break;
					case LTE:
						{
						alt32 = 3;
						}
						break;
					case GTE:
						{
						alt32 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt32 = 5;
						}
						break;
					case IN:
						{
						alt32 = 6;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:866:5: LT
						{
						DebugLocation(866, 5);
						LT46=(IToken)Match(input,LT,Follow._LT_in_relationalExpression4200); 
						LT46_tree = (object)adaptor.Create(LT46);
						adaptor.AddChild(root_0, LT46_tree);

						DebugLocation(866, 8);
						 type= BinaryExpressionType.Lesser; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:867:5: GT
						{
						DebugLocation(867, 5);
						GT47=(IToken)Match(input,GT,Follow._GT_in_relationalExpression4208); 
						GT47_tree = (object)adaptor.Create(GT47);
						adaptor.AddChild(root_0, GT47_tree);

						DebugLocation(867, 8);
						 type= BinaryExpressionType.Greater; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:868:5: LTE
						{
						DebugLocation(868, 5);
						LTE48=(IToken)Match(input,LTE,Follow._LTE_in_relationalExpression4216); 
						LTE48_tree = (object)adaptor.Create(LTE48);
						adaptor.AddChild(root_0, LTE48_tree);

						DebugLocation(868, 9);
						 type= BinaryExpressionType.LesserOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:869:5: GTE
						{
						DebugLocation(869, 5);
						GTE49=(IToken)Match(input,GTE,Follow._GTE_in_relationalExpression4224); 
						GTE49_tree = (object)adaptor.Create(GTE49);
						adaptor.AddChild(root_0, GTE49_tree);

						DebugLocation(869, 9);
						 type= BinaryExpressionType.GreaterOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:870:5: INSTANCEOF
						{
						DebugLocation(870, 5);
						INSTANCEOF50=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpression4232); 
						INSTANCEOF50_tree = (object)adaptor.Create(INSTANCEOF50);
						adaptor.AddChild(root_0, INSTANCEOF50_tree);

						DebugLocation(870, 16);
						 type= BinaryExpressionType.InstanceOf;  

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// ..\\ES3.g:871:5: IN
						{
						DebugLocation(871, 5);
						IN51=(IToken)Match(input,IN,Follow._IN_in_relationalExpression4240); 
						IN51_tree = (object)adaptor.Create(IN51);
						adaptor.AddChild(root_0, IN51_tree);

						DebugLocation(871, 8);
						 type= BinaryExpressionType.In;  

						}
						break;

					}
					} finally { DebugExitSubRule(32); }

					DebugLocation(872, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpression4251);
					right=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(872, 25);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 28);
			LeaveRule("relationalExpression", 28);
			LeaveRule_relationalExpression();
		}
		DebugLocation(873, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	private sealed partial class relationalExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_relationalExpressionNoIn();
	partial void LeaveRule_relationalExpressionNoIn();

	// $ANTLR start "relationalExpressionNoIn"
	// ..\\ES3.g:875:1: relationalExpressionNoIn returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* ;
	[GrammarRule("relationalExpressionNoIn")]
	private ES3Parser.relationalExpressionNoIn_return relationalExpressionNoIn()
	{
		EnterRule_relationalExpressionNoIn();
		EnterRule("relationalExpressionNoIn", 29);
		TraceIn("relationalExpressionNoIn", 29);
		ES3Parser.relationalExpressionNoIn_return retval = new ES3Parser.relationalExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LT52 = default(IToken);
		IToken GT53 = default(IToken);
		IToken LTE54 = default(IToken);
		IToken GTE55 = default(IToken);
		IToken INSTANCEOF56 = default(IToken);
		ES3Parser.shiftExpression_return left = default(ES3Parser.shiftExpression_return);
		ES3Parser.shiftExpression_return right = default(ES3Parser.shiftExpression_return);

		object LT52_tree = default(object);
		object GT53_tree = default(object);
		object LTE54_tree = default(object);
		object GTE55_tree = default(object);
		object INSTANCEOF56_tree = default(object);


			BinaryExpressionType type = BinaryExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpressionNoIn");
		DebugLocation(875, 1);
		try
		{
			// ..\\ES3.g:879:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:879:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(879, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4277);
			left=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(879, 25);
			 retval.value = left.value; 
			DebugLocation(879, 50);
			// ..\\ES3.g:879:50: ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if (((LA35_0>=GT && LA35_0<=GTE)||LA35_0==INSTANCEOF||(LA35_0>=LT && LA35_0<=LTE)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:880:3: ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression
					{
					DebugLocation(884, 61);
					// ..\\ES3.g:880:3: ( LT | GT | LTE | GTE | INSTANCEOF )
					int alt34=5;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt34 = 1;
						}
						break;
					case GT:
						{
						alt34 = 2;
						}
						break;
					case LTE:
						{
						alt34 = 3;
						}
						break;
					case GTE:
						{
						alt34 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt34 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:880:5: LT
						{
						DebugLocation(880, 5);
						LT52=(IToken)Match(input,LT,Follow._LT_in_relationalExpressionNoIn4288); 
						LT52_tree = (object)adaptor.Create(LT52);
						adaptor.AddChild(root_0, LT52_tree);

						DebugLocation(880, 8);
						 type= BinaryExpressionType.Lesser; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:881:5: GT
						{
						DebugLocation(881, 5);
						GT53=(IToken)Match(input,GT,Follow._GT_in_relationalExpressionNoIn4296); 
						GT53_tree = (object)adaptor.Create(GT53);
						adaptor.AddChild(root_0, GT53_tree);

						DebugLocation(881, 8);
						 type= BinaryExpressionType.Greater; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:882:5: LTE
						{
						DebugLocation(882, 5);
						LTE54=(IToken)Match(input,LTE,Follow._LTE_in_relationalExpressionNoIn4304); 
						LTE54_tree = (object)adaptor.Create(LTE54);
						adaptor.AddChild(root_0, LTE54_tree);

						DebugLocation(882, 9);
						 type= BinaryExpressionType.LesserOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:883:5: GTE
						{
						DebugLocation(883, 5);
						GTE55=(IToken)Match(input,GTE,Follow._GTE_in_relationalExpressionNoIn4312); 
						GTE55_tree = (object)adaptor.Create(GTE55);
						adaptor.AddChild(root_0, GTE55_tree);

						DebugLocation(883, 9);
						 type= BinaryExpressionType.GreaterOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:884:5: INSTANCEOF
						{
						DebugLocation(884, 5);
						INSTANCEOF56=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpressionNoIn4320); 
						INSTANCEOF56_tree = (object)adaptor.Create(INSTANCEOF56);
						adaptor.AddChild(root_0, INSTANCEOF56_tree);

						DebugLocation(884, 16);
						 type= BinaryExpressionType.InstanceOf;  

						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(885, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4332);
					right=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(885, 25);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpressionNoIn", 29);
			LeaveRule("relationalExpressionNoIn", 29);
			LeaveRule_relationalExpressionNoIn();
		}
		DebugLocation(886, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "relationalExpressionNoIn"

	private sealed partial class equalityExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public equalityExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// ..\\ES3.g:892:1: equalityExpression returns [ExpressionSyntax value] : left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private ES3Parser.equalityExpression_return equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 30);
		TraceIn("equalityExpression", 30);
		ES3Parser.equalityExpression_return retval = new ES3Parser.equalityExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EQ57 = default(IToken);
		IToken NEQ58 = default(IToken);
		IToken SAME59 = default(IToken);
		IToken NSAME60 = default(IToken);
		ES3Parser.relationalExpression_return left = default(ES3Parser.relationalExpression_return);
		ES3Parser.relationalExpression_return right = default(ES3Parser.relationalExpression_return);

		object EQ57_tree = default(object);
		object NEQ58_tree = default(object);
		object SAME59_tree = default(object);
		object NSAME60_tree = default(object);


			BinaryExpressionType type = BinaryExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(892, 1);
		try
		{
			// ..\\ES3.g:896:2: (left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:896:4: left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(896, 8);
			PushFollow(Follow._relationalExpression_in_equalityExpression4363);
			left=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(896, 30);
			 retval.value = left.value; 
			DebugLocation(896, 55);
			// ..\\ES3.g:896:55: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==EQ||LA37_0==NEQ||LA37_0==NSAME||LA37_0==SAME))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:897:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpression
					{
					DebugLocation(900, 51);
					// ..\\ES3.g:897:3: ( EQ | NEQ | SAME | NSAME )
					int alt36=4;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt36 = 1;
						}
						break;
					case NEQ:
						{
						alt36 = 2;
						}
						break;
					case SAME:
						{
						alt36 = 3;
						}
						break;
					case NSAME:
						{
						alt36 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:897:5: EQ
						{
						DebugLocation(897, 5);
						EQ57=(IToken)Match(input,EQ,Follow._EQ_in_equalityExpression4374); 
						EQ57_tree = (object)adaptor.Create(EQ57);
						adaptor.AddChild(root_0, EQ57_tree);

						DebugLocation(897, 8);
						 type= BinaryExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:898:5: NEQ
						{
						DebugLocation(898, 5);
						NEQ58=(IToken)Match(input,NEQ,Follow._NEQ_in_equalityExpression4382); 
						NEQ58_tree = (object)adaptor.Create(NEQ58);
						adaptor.AddChild(root_0, NEQ58_tree);

						DebugLocation(898, 9);
						 type= BinaryExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:899:5: SAME
						{
						DebugLocation(899, 5);
						SAME59=(IToken)Match(input,SAME,Follow._SAME_in_equalityExpression4390); 
						SAME59_tree = (object)adaptor.Create(SAME59);
						adaptor.AddChild(root_0, SAME59_tree);

						DebugLocation(899, 10);
						 type= BinaryExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:900:5: NSAME
						{
						DebugLocation(900, 5);
						NSAME60=(IToken)Match(input,NSAME,Follow._NSAME_in_equalityExpression4398); 
						NSAME60_tree = (object)adaptor.Create(NSAME60);
						adaptor.AddChild(root_0, NSAME60_tree);

						DebugLocation(900, 11);
						 type= BinaryExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(36); }

					DebugLocation(901, 8);
					PushFollow(Follow._relationalExpression_in_equalityExpression4409);
					right=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(901, 30);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 30);
			LeaveRule("equalityExpression", 30);
			LeaveRule_equalityExpression();
		}
		DebugLocation(902, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	private sealed partial class equalityExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public equalityExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_equalityExpressionNoIn();
	partial void LeaveRule_equalityExpressionNoIn();

	// $ANTLR start "equalityExpressionNoIn"
	// ..\\ES3.g:904:1: equalityExpressionNoIn returns [ExpressionSyntax value] : left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* ;
	[GrammarRule("equalityExpressionNoIn")]
	private ES3Parser.equalityExpressionNoIn_return equalityExpressionNoIn()
	{
		EnterRule_equalityExpressionNoIn();
		EnterRule("equalityExpressionNoIn", 31);
		TraceIn("equalityExpressionNoIn", 31);
		ES3Parser.equalityExpressionNoIn_return retval = new ES3Parser.equalityExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EQ61 = default(IToken);
		IToken NEQ62 = default(IToken);
		IToken SAME63 = default(IToken);
		IToken NSAME64 = default(IToken);
		ES3Parser.relationalExpressionNoIn_return left = default(ES3Parser.relationalExpressionNoIn_return);
		ES3Parser.relationalExpressionNoIn_return right = default(ES3Parser.relationalExpressionNoIn_return);

		object EQ61_tree = default(object);
		object NEQ62_tree = default(object);
		object SAME63_tree = default(object);
		object NSAME64_tree = default(object);


			BinaryExpressionType type = BinaryExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpressionNoIn");
		DebugLocation(904, 1);
		try
		{
			// ..\\ES3.g:908:2: (left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:908:4: left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(908, 8);
			PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn4435);
			left=relationalExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(908, 34);
			 retval.value = left.value; 
			DebugLocation(908, 59);
			// ..\\ES3.g:908:59: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==EQ||LA39_0==NEQ||LA39_0==NSAME||LA39_0==SAME))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:909:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn
					{
					DebugLocation(912, 51);
					// ..\\ES3.g:909:3: ( EQ | NEQ | SAME | NSAME )
					int alt38=4;
					try { DebugEnterSubRule(38);
					try { DebugEnterDecision(38, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt38 = 1;
						}
						break;
					case NEQ:
						{
						alt38 = 2;
						}
						break;
					case SAME:
						{
						alt38 = 3;
						}
						break;
					case NSAME:
						{
						alt38 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:909:5: EQ
						{
						DebugLocation(909, 5);
						EQ61=(IToken)Match(input,EQ,Follow._EQ_in_equalityExpressionNoIn4446); 
						EQ61_tree = (object)adaptor.Create(EQ61);
						adaptor.AddChild(root_0, EQ61_tree);

						DebugLocation(909, 8);
						 type= BinaryExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:910:5: NEQ
						{
						DebugLocation(910, 5);
						NEQ62=(IToken)Match(input,NEQ,Follow._NEQ_in_equalityExpressionNoIn4454); 
						NEQ62_tree = (object)adaptor.Create(NEQ62);
						adaptor.AddChild(root_0, NEQ62_tree);

						DebugLocation(910, 9);
						 type= BinaryExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:911:5: SAME
						{
						DebugLocation(911, 5);
						SAME63=(IToken)Match(input,SAME,Follow._SAME_in_equalityExpressionNoIn4462); 
						SAME63_tree = (object)adaptor.Create(SAME63);
						adaptor.AddChild(root_0, SAME63_tree);

						DebugLocation(911, 10);
						 type= BinaryExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:912:5: NSAME
						{
						DebugLocation(912, 5);
						NSAME64=(IToken)Match(input,NSAME,Follow._NSAME_in_equalityExpressionNoIn4470); 
						NSAME64_tree = (object)adaptor.Create(NSAME64);
						adaptor.AddChild(root_0, NSAME64_tree);

						DebugLocation(912, 11);
						 type= BinaryExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(38); }

					DebugLocation(913, 8);
					PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn4481);
					right=relationalExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(913, 34);
					 retval.value = new BinaryExpressionSyntax(type, retval.value, right.value); 

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpressionNoIn", 31);
			LeaveRule("equalityExpressionNoIn", 31);
			LeaveRule_equalityExpressionNoIn();
		}
		DebugLocation(914, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "equalityExpressionNoIn"

	private sealed partial class bitwiseANDExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseANDExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseANDExpression();
	partial void LeaveRule_bitwiseANDExpression();

	// $ANTLR start "bitwiseANDExpression"
	// ..\\ES3.g:920:1: bitwiseANDExpression returns [ExpressionSyntax value] : left= equalityExpression ( AND right= equalityExpression )* ;
	[GrammarRule("bitwiseANDExpression")]
	private ES3Parser.bitwiseANDExpression_return bitwiseANDExpression()
	{
		EnterRule_bitwiseANDExpression();
		EnterRule("bitwiseANDExpression", 32);
		TraceIn("bitwiseANDExpression", 32);
		ES3Parser.bitwiseANDExpression_return retval = new ES3Parser.bitwiseANDExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AND65 = default(IToken);
		ES3Parser.equalityExpression_return left = default(ES3Parser.equalityExpression_return);
		ES3Parser.equalityExpression_return right = default(ES3Parser.equalityExpression_return);

		object AND65_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpression");
		DebugLocation(920, 1);
		try
		{
			// ..\\ES3.g:921:2: (left= equalityExpression ( AND right= equalityExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:921:4: left= equalityExpression ( AND right= equalityExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(921, 8);
			PushFollow(Follow._equalityExpression_in_bitwiseANDExpression4508);
			left=equalityExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(921, 28);
			 retval.value = left.value; 
			DebugLocation(921, 53);
			// ..\\ES3.g:921:53: ( AND right= equalityExpression )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==AND))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:921:55: AND right= equalityExpression
					{
					DebugLocation(921, 58);
					AND65=(IToken)Match(input,AND,Follow._AND_in_bitwiseANDExpression4514); 
					AND65_tree = (object)adaptor.Create(AND65);
					root_0 = (object)adaptor.BecomeRoot(AND65_tree, root_0);

					DebugLocation(921, 65);
					PushFollow(Follow._equalityExpression_in_bitwiseANDExpression4519);
					right=equalityExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(921, 85);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.BitwiseAnd, retval.value, right.value); 

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpression", 32);
			LeaveRule("bitwiseANDExpression", 32);
			LeaveRule_bitwiseANDExpression();
		}
		DebugLocation(922, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpression"

	private sealed partial class bitwiseANDExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseANDExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseANDExpressionNoIn();
	partial void LeaveRule_bitwiseANDExpressionNoIn();

	// $ANTLR start "bitwiseANDExpressionNoIn"
	// ..\\ES3.g:924:1: bitwiseANDExpressionNoIn returns [ExpressionSyntax value] : left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* ;
	[GrammarRule("bitwiseANDExpressionNoIn")]
	private ES3Parser.bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn()
	{
		EnterRule_bitwiseANDExpressionNoIn();
		EnterRule("bitwiseANDExpressionNoIn", 33);
		TraceIn("bitwiseANDExpressionNoIn", 33);
		ES3Parser.bitwiseANDExpressionNoIn_return retval = new ES3Parser.bitwiseANDExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AND66 = default(IToken);
		ES3Parser.equalityExpressionNoIn_return left = default(ES3Parser.equalityExpressionNoIn_return);
		ES3Parser.equalityExpressionNoIn_return right = default(ES3Parser.equalityExpressionNoIn_return);

		object AND66_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpressionNoIn");
		DebugLocation(924, 1);
		try
		{
			// ..\\ES3.g:925:2: (left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:925:4: left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(925, 8);
			PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4540);
			left=equalityExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(925, 32);
			 retval.value = left.value; 
			DebugLocation(925, 57);
			// ..\\ES3.g:925:57: ( AND right= equalityExpressionNoIn )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==AND))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:925:59: AND right= equalityExpressionNoIn
					{
					DebugLocation(925, 62);
					AND66=(IToken)Match(input,AND,Follow._AND_in_bitwiseANDExpressionNoIn4546); 
					AND66_tree = (object)adaptor.Create(AND66);
					root_0 = (object)adaptor.BecomeRoot(AND66_tree, root_0);

					DebugLocation(925, 69);
					PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4551);
					right=equalityExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(925, 93);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.BitwiseAnd, retval.value, right.value); 

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpressionNoIn", 33);
			LeaveRule("bitwiseANDExpressionNoIn", 33);
			LeaveRule_bitwiseANDExpressionNoIn();
		}
		DebugLocation(926, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpressionNoIn"

	private sealed partial class bitwiseXORExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseXORExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseXORExpression();
	partial void LeaveRule_bitwiseXORExpression();

	// $ANTLR start "bitwiseXORExpression"
	// ..\\ES3.g:928:1: bitwiseXORExpression returns [ExpressionSyntax value] : left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* ;
	[GrammarRule("bitwiseXORExpression")]
	private ES3Parser.bitwiseXORExpression_return bitwiseXORExpression()
	{
		EnterRule_bitwiseXORExpression();
		EnterRule("bitwiseXORExpression", 34);
		TraceIn("bitwiseXORExpression", 34);
		ES3Parser.bitwiseXORExpression_return retval = new ES3Parser.bitwiseXORExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken XOR67 = default(IToken);
		ES3Parser.bitwiseANDExpression_return left = default(ES3Parser.bitwiseANDExpression_return);
		ES3Parser.bitwiseANDExpression_return right = default(ES3Parser.bitwiseANDExpression_return);

		object XOR67_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpression");
		DebugLocation(928, 1);
		try
		{
			// ..\\ES3.g:929:2: (left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:929:4: left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(929, 8);
			PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression4574);
			left=bitwiseANDExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(929, 30);
			 retval.value = left.value; 
			DebugLocation(929, 55);
			// ..\\ES3.g:929:55: ( XOR right= bitwiseANDExpression )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==XOR))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:929:57: XOR right= bitwiseANDExpression
					{
					DebugLocation(929, 60);
					XOR67=(IToken)Match(input,XOR,Follow._XOR_in_bitwiseXORExpression4580); 
					XOR67_tree = (object)adaptor.Create(XOR67);
					root_0 = (object)adaptor.BecomeRoot(XOR67_tree, root_0);

					DebugLocation(929, 67);
					PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression4585);
					right=bitwiseANDExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(929, 89);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.BitwiseXOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpression", 34);
			LeaveRule("bitwiseXORExpression", 34);
			LeaveRule_bitwiseXORExpression();
		}
		DebugLocation(930, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpression"

	private sealed partial class bitwiseXORExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseXORExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseXORExpressionNoIn();
	partial void LeaveRule_bitwiseXORExpressionNoIn();

	// $ANTLR start "bitwiseXORExpressionNoIn"
	// ..\\ES3.g:932:1: bitwiseXORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* ;
	[GrammarRule("bitwiseXORExpressionNoIn")]
	private ES3Parser.bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn()
	{
		EnterRule_bitwiseXORExpressionNoIn();
		EnterRule("bitwiseXORExpressionNoIn", 35);
		TraceIn("bitwiseXORExpressionNoIn", 35);
		ES3Parser.bitwiseXORExpressionNoIn_return retval = new ES3Parser.bitwiseXORExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken XOR68 = default(IToken);
		ES3Parser.bitwiseANDExpressionNoIn_return left = default(ES3Parser.bitwiseANDExpressionNoIn_return);
		ES3Parser.bitwiseANDExpressionNoIn_return right = default(ES3Parser.bitwiseANDExpressionNoIn_return);

		object XOR68_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpressionNoIn");
		DebugLocation(932, 1);
		try
		{
			// ..\\ES3.g:933:2: (left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:933:4: left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(933, 8);
			PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4608);
			left=bitwiseANDExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(933, 34);
			 retval.value = left.value; 
			DebugLocation(933, 59);
			// ..\\ES3.g:933:59: ( XOR right= bitwiseANDExpressionNoIn )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==XOR))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:933:61: XOR right= bitwiseANDExpressionNoIn
					{
					DebugLocation(933, 64);
					XOR68=(IToken)Match(input,XOR,Follow._XOR_in_bitwiseXORExpressionNoIn4614); 
					XOR68_tree = (object)adaptor.Create(XOR68);
					root_0 = (object)adaptor.BecomeRoot(XOR68_tree, root_0);

					DebugLocation(933, 71);
					PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4619);
					right=bitwiseANDExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(933, 97);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.BitwiseXOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpressionNoIn", 35);
			LeaveRule("bitwiseXORExpressionNoIn", 35);
			LeaveRule_bitwiseXORExpressionNoIn();
		}
		DebugLocation(934, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpressionNoIn"

	private sealed partial class bitwiseORExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseORExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseORExpression();
	partial void LeaveRule_bitwiseORExpression();

	// $ANTLR start "bitwiseORExpression"
	// ..\\ES3.g:936:1: bitwiseORExpression returns [ExpressionSyntax value] : left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* ;
	[GrammarRule("bitwiseORExpression")]
	private ES3Parser.bitwiseORExpression_return bitwiseORExpression()
	{
		EnterRule_bitwiseORExpression();
		EnterRule("bitwiseORExpression", 36);
		TraceIn("bitwiseORExpression", 36);
		ES3Parser.bitwiseORExpression_return retval = new ES3Parser.bitwiseORExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OR69 = default(IToken);
		ES3Parser.bitwiseXORExpression_return left = default(ES3Parser.bitwiseXORExpression_return);
		ES3Parser.bitwiseXORExpression_return right = default(ES3Parser.bitwiseXORExpression_return);

		object OR69_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpression");
		DebugLocation(936, 1);
		try
		{
			// ..\\ES3.g:937:2: (left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:937:4: left= bitwiseXORExpression ( OR right= bitwiseXORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(937, 8);
			PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression4641);
			left=bitwiseXORExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(937, 30);
			 retval.value = left.value; 
			DebugLocation(937, 55);
			// ..\\ES3.g:937:55: ( OR right= bitwiseXORExpression )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==OR))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:937:57: OR right= bitwiseXORExpression
					{
					DebugLocation(937, 59);
					OR69=(IToken)Match(input,OR,Follow._OR_in_bitwiseORExpression4647); 
					OR69_tree = (object)adaptor.Create(OR69);
					root_0 = (object)adaptor.BecomeRoot(OR69_tree, root_0);

					DebugLocation(937, 66);
					PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression4652);
					right=bitwiseXORExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(937, 88);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.BitwiseOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpression", 36);
			LeaveRule("bitwiseORExpression", 36);
			LeaveRule_bitwiseORExpression();
		}
		DebugLocation(938, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpression"

	private sealed partial class bitwiseORExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bitwiseORExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_bitwiseORExpressionNoIn();
	partial void LeaveRule_bitwiseORExpressionNoIn();

	// $ANTLR start "bitwiseORExpressionNoIn"
	// ..\\ES3.g:940:1: bitwiseORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* ;
	[GrammarRule("bitwiseORExpressionNoIn")]
	private ES3Parser.bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn()
	{
		EnterRule_bitwiseORExpressionNoIn();
		EnterRule("bitwiseORExpressionNoIn", 37);
		TraceIn("bitwiseORExpressionNoIn", 37);
		ES3Parser.bitwiseORExpressionNoIn_return retval = new ES3Parser.bitwiseORExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OR70 = default(IToken);
		ES3Parser.bitwiseXORExpressionNoIn_return left = default(ES3Parser.bitwiseXORExpressionNoIn_return);
		ES3Parser.bitwiseXORExpressionNoIn_return right = default(ES3Parser.bitwiseXORExpressionNoIn_return);

		object OR70_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpressionNoIn");
		DebugLocation(940, 1);
		try
		{
			// ..\\ES3.g:941:2: (left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:941:4: left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(941, 8);
			PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4674);
			left=bitwiseXORExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(941, 34);
			 retval.value = left.value; 
			DebugLocation(941, 59);
			// ..\\ES3.g:941:59: ( OR right= bitwiseXORExpressionNoIn )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==OR))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:941:61: OR right= bitwiseXORExpressionNoIn
					{
					DebugLocation(941, 63);
					OR70=(IToken)Match(input,OR,Follow._OR_in_bitwiseORExpressionNoIn4680); 
					OR70_tree = (object)adaptor.Create(OR70);
					root_0 = (object)adaptor.BecomeRoot(OR70_tree, root_0);

					DebugLocation(941, 70);
					PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4685);
					right=bitwiseXORExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(941, 96);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.BitwiseOr, retval.value, right.value); 

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpressionNoIn", 37);
			LeaveRule("bitwiseORExpressionNoIn", 37);
			LeaveRule_bitwiseORExpressionNoIn();
		}
		DebugLocation(942, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpressionNoIn"

	private sealed partial class logicalANDExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalANDExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalANDExpression();
	partial void LeaveRule_logicalANDExpression();

	// $ANTLR start "logicalANDExpression"
	// ..\\ES3.g:948:1: logicalANDExpression returns [ExpressionSyntax value] : left= bitwiseORExpression ( LAND right= bitwiseORExpression )* ;
	[GrammarRule("logicalANDExpression")]
	private ES3Parser.logicalANDExpression_return logicalANDExpression()
	{
		EnterRule_logicalANDExpression();
		EnterRule("logicalANDExpression", 38);
		TraceIn("logicalANDExpression", 38);
		ES3Parser.logicalANDExpression_return retval = new ES3Parser.logicalANDExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LAND71 = default(IToken);
		ES3Parser.bitwiseORExpression_return left = default(ES3Parser.bitwiseORExpression_return);
		ES3Parser.bitwiseORExpression_return right = default(ES3Parser.bitwiseORExpression_return);

		object LAND71_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpression");
		DebugLocation(948, 1);
		try
		{
			// ..\\ES3.g:949:2: (left= bitwiseORExpression ( LAND right= bitwiseORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:949:3: left= bitwiseORExpression ( LAND right= bitwiseORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(949, 7);
			PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression4711);
			left=bitwiseORExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(949, 29);
			 retval.value = left.value; 
			DebugLocation(949, 54);
			// ..\\ES3.g:949:54: ( LAND right= bitwiseORExpression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==LAND))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:949:56: LAND right= bitwiseORExpression
					{
					DebugLocation(949, 60);
					LAND71=(IToken)Match(input,LAND,Follow._LAND_in_logicalANDExpression4717); 
					LAND71_tree = (object)adaptor.Create(LAND71);
					root_0 = (object)adaptor.BecomeRoot(LAND71_tree, root_0);

					DebugLocation(949, 67);
					PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression4722);
					right=bitwiseORExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(949, 88);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.And, retval.value, right.value); 

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpression", 38);
			LeaveRule("logicalANDExpression", 38);
			LeaveRule_logicalANDExpression();
		}
		DebugLocation(950, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpression"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpression"

	private sealed partial class logicalANDExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalANDExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalANDExpressionNoIn();
	partial void LeaveRule_logicalANDExpressionNoIn();

	// $ANTLR start "logicalANDExpressionNoIn"
	// ..\\ES3.g:952:1: logicalANDExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* ;
	[GrammarRule("logicalANDExpressionNoIn")]
	private ES3Parser.logicalANDExpressionNoIn_return logicalANDExpressionNoIn()
	{
		EnterRule_logicalANDExpressionNoIn();
		EnterRule("logicalANDExpressionNoIn", 39);
		TraceIn("logicalANDExpressionNoIn", 39);
		ES3Parser.logicalANDExpressionNoIn_return retval = new ES3Parser.logicalANDExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LAND72 = default(IToken);
		ES3Parser.bitwiseORExpressionNoIn_return left = default(ES3Parser.bitwiseORExpressionNoIn_return);
		ES3Parser.bitwiseORExpressionNoIn_return right = default(ES3Parser.bitwiseORExpressionNoIn_return);

		object LAND72_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpressionNoIn");
		DebugLocation(952, 1);
		try
		{
			// ..\\ES3.g:953:2: (left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:953:3: left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(953, 7);
			PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4743);
			left=bitwiseORExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(953, 33);
			 retval.value = left.value; 
			DebugLocation(953, 58);
			// ..\\ES3.g:953:58: ( LAND right= bitwiseORExpressionNoIn )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==LAND))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:953:60: LAND right= bitwiseORExpressionNoIn
					{
					DebugLocation(953, 64);
					LAND72=(IToken)Match(input,LAND,Follow._LAND_in_logicalANDExpressionNoIn4749); 
					LAND72_tree = (object)adaptor.Create(LAND72);
					root_0 = (object)adaptor.BecomeRoot(LAND72_tree, root_0);

					DebugLocation(953, 71);
					PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4754);
					right=bitwiseORExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(953, 96);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.And, retval.value, right.value); 

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpressionNoIn", 39);
			LeaveRule("logicalANDExpressionNoIn", 39);
			LeaveRule_logicalANDExpressionNoIn();
		}
		DebugLocation(954, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpressionNoIn"

	private sealed partial class logicalORExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalORExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalORExpression();
	partial void LeaveRule_logicalORExpression();

	// $ANTLR start "logicalORExpression"
	// ..\\ES3.g:956:1: logicalORExpression returns [ExpressionSyntax value] : left= logicalANDExpression ( LOR right= logicalANDExpression )* ;
	[GrammarRule("logicalORExpression")]
	private ES3Parser.logicalORExpression_return logicalORExpression()
	{
		EnterRule_logicalORExpression();
		EnterRule("logicalORExpression", 40);
		TraceIn("logicalORExpression", 40);
		ES3Parser.logicalORExpression_return retval = new ES3Parser.logicalORExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LOR73 = default(IToken);
		ES3Parser.logicalANDExpression_return left = default(ES3Parser.logicalANDExpression_return);
		ES3Parser.logicalANDExpression_return right = default(ES3Parser.logicalANDExpression_return);

		object LOR73_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalORExpression");
		DebugLocation(956, 1);
		try
		{
			// ..\\ES3.g:957:2: (left= logicalANDExpression ( LOR right= logicalANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:957:4: left= logicalANDExpression ( LOR right= logicalANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(957, 8);
			PushFollow(Follow._logicalANDExpression_in_logicalORExpression4776);
			left=logicalANDExpression();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(957, 30);
			 retval.value = left.value; 
			DebugLocation(957, 55);
			// ..\\ES3.g:957:55: ( LOR right= logicalANDExpression )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==LOR))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:957:57: LOR right= logicalANDExpression
					{
					DebugLocation(957, 60);
					LOR73=(IToken)Match(input,LOR,Follow._LOR_in_logicalORExpression4782); 
					LOR73_tree = (object)adaptor.Create(LOR73);
					root_0 = (object)adaptor.BecomeRoot(LOR73_tree, root_0);

					DebugLocation(957, 67);
					PushFollow(Follow._logicalANDExpression_in_logicalORExpression4787);
					right=logicalANDExpression();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(957, 89);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.Or, retval.value, right.value); 

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpression", 40);
			LeaveRule("logicalORExpression", 40);
			LeaveRule_logicalORExpression();
		}
		DebugLocation(958, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpression"); }
		return retval;

	}
	// $ANTLR end "logicalORExpression"

	private sealed partial class logicalORExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalORExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_logicalORExpressionNoIn();
	partial void LeaveRule_logicalORExpressionNoIn();

	// $ANTLR start "logicalORExpressionNoIn"
	// ..\\ES3.g:960:1: logicalORExpressionNoIn returns [ExpressionSyntax value] : left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* ;
	[GrammarRule("logicalORExpressionNoIn")]
	private ES3Parser.logicalORExpressionNoIn_return logicalORExpressionNoIn()
	{
		EnterRule_logicalORExpressionNoIn();
		EnterRule("logicalORExpressionNoIn", 41);
		TraceIn("logicalORExpressionNoIn", 41);
		ES3Parser.logicalORExpressionNoIn_return retval = new ES3Parser.logicalORExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LOR74 = default(IToken);
		ES3Parser.logicalANDExpressionNoIn_return left = default(ES3Parser.logicalANDExpressionNoIn_return);
		ES3Parser.logicalANDExpressionNoIn_return right = default(ES3Parser.logicalANDExpressionNoIn_return);

		object LOR74_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "logicalORExpressionNoIn");
		DebugLocation(960, 1);
		try
		{
			// ..\\ES3.g:961:2: (left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:961:4: left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(961, 8);
			PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn4809);
			left=logicalANDExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, left.Tree);
			DebugLocation(961, 34);
			 retval.value = left.value; 
			DebugLocation(961, 59);
			// ..\\ES3.g:961:59: ( LOR right= logicalANDExpressionNoIn )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==LOR))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:961:61: LOR right= logicalANDExpressionNoIn
					{
					DebugLocation(961, 64);
					LOR74=(IToken)Match(input,LOR,Follow._LOR_in_logicalORExpressionNoIn4815); 
					LOR74_tree = (object)adaptor.Create(LOR74);
					root_0 = (object)adaptor.BecomeRoot(LOR74_tree, root_0);

					DebugLocation(961, 71);
					PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn4820);
					right=logicalANDExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, right.Tree);
					DebugLocation(961, 97);
					 retval.value = new BinaryExpressionSyntax(BinaryExpressionType.Or, retval.value, right.value); 

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpressionNoIn", 41);
			LeaveRule("logicalORExpressionNoIn", 41);
			LeaveRule_logicalORExpressionNoIn();
		}
		DebugLocation(962, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalORExpressionNoIn"

	private sealed partial class conditionalExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public conditionalExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// ..\\ES3.g:968:1: conditionalExpression returns [ExpressionSyntax value] : expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? ;
	[GrammarRule("conditionalExpression")]
	private ES3Parser.conditionalExpression_return conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 42);
		TraceIn("conditionalExpression", 42);
		ES3Parser.conditionalExpression_return retval = new ES3Parser.conditionalExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken QUE75 = default(IToken);
		IToken COLON76 = default(IToken);
		ES3Parser.logicalORExpression_return expr1 = default(ES3Parser.logicalORExpression_return);
		ES3Parser.assignmentExpression_return expr2 = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return expr3 = default(ES3Parser.assignmentExpression_return);

		object QUE75_tree = default(object);
		object COLON76_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(968, 1);
		try
		{
			// ..\\ES3.g:969:2: (expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:969:4: expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(969, 9);
			PushFollow(Follow._logicalORExpression_in_conditionalExpression4847);
			expr1=logicalORExpression();
			PopFollow();

			adaptor.AddChild(root_0, expr1.Tree);
			DebugLocation(969, 30);
			 retval.value = expr1.value; 
			DebugLocation(969, 56);
			// ..\\ES3.g:969:56: ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==QUE))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:969:58: QUE expr2= assignmentExpression COLON expr3= assignmentExpression
				{
				DebugLocation(969, 61);
				QUE75=(IToken)Match(input,QUE,Follow._QUE_in_conditionalExpression4853); 
				QUE75_tree = (object)adaptor.Create(QUE75);
				root_0 = (object)adaptor.BecomeRoot(QUE75_tree, root_0);

				DebugLocation(969, 68);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression4858);
				expr2=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, expr2.Tree);
				DebugLocation(969, 95);
				COLON76=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression4860); 
				DebugLocation(969, 102);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression4865);
				expr3=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, expr3.Tree);
				DebugLocation(969, 124);
				 retval.value = new TernarySyntax(expr1.value, expr2.value, expr3.value); 

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 42);
			LeaveRule("conditionalExpression", 42);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(970, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	private sealed partial class conditionalExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public conditionalExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_conditionalExpressionNoIn();
	partial void LeaveRule_conditionalExpressionNoIn();

	// $ANTLR start "conditionalExpressionNoIn"
	// ..\\ES3.g:972:1: conditionalExpressionNoIn returns [ExpressionSyntax value] : expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? ;
	[GrammarRule("conditionalExpressionNoIn")]
	private ES3Parser.conditionalExpressionNoIn_return conditionalExpressionNoIn()
	{
		EnterRule_conditionalExpressionNoIn();
		EnterRule("conditionalExpressionNoIn", 43);
		TraceIn("conditionalExpressionNoIn", 43);
		ES3Parser.conditionalExpressionNoIn_return retval = new ES3Parser.conditionalExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken QUE77 = default(IToken);
		IToken COLON78 = default(IToken);
		ES3Parser.logicalORExpressionNoIn_return expr1 = default(ES3Parser.logicalORExpressionNoIn_return);
		ES3Parser.assignmentExpressionNoIn_return expr2 = default(ES3Parser.assignmentExpressionNoIn_return);
		ES3Parser.assignmentExpressionNoIn_return expr3 = default(ES3Parser.assignmentExpressionNoIn_return);

		object QUE77_tree = default(object);
		object COLON78_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "conditionalExpressionNoIn");
		DebugLocation(972, 1);
		try
		{
			// ..\\ES3.g:973:2: (expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:973:4: expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(973, 9);
			PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn4886);
			expr1=logicalORExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, expr1.Tree);
			DebugLocation(973, 34);
			 retval.value = expr1.value; 
			DebugLocation(973, 60);
			// ..\\ES3.g:973:60: ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==QUE))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:973:62: QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn
				{
				DebugLocation(973, 65);
				QUE77=(IToken)Match(input,QUE,Follow._QUE_in_conditionalExpressionNoIn4892); 
				QUE77_tree = (object)adaptor.Create(QUE77);
				root_0 = (object)adaptor.BecomeRoot(QUE77_tree, root_0);

				DebugLocation(973, 72);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn4897);
				expr2=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, expr2.Tree);
				DebugLocation(973, 103);
				COLON78=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpressionNoIn4899); 
				DebugLocation(973, 110);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn4904);
				expr3=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, expr3.Tree);
				DebugLocation(973, 136);
				 retval.value = new TernarySyntax(expr1.value, expr2.value, expr3.value); 

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpressionNoIn", 43);
			LeaveRule("conditionalExpressionNoIn", 43);
			LeaveRule_conditionalExpressionNoIn();
		}
		DebugLocation(974, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "conditionalExpressionNoIn"

	private sealed partial class assignmentExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignmentExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// ..\\ES3.g:1002:1: assignmentExpression returns [ExpressionSyntax value] : lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private ES3Parser.assignmentExpression_return assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 44);
		TraceIn("assignmentExpression", 44);
		ES3Parser.assignmentExpression_return retval = new ES3Parser.assignmentExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.conditionalExpression_return lhs = default(ES3Parser.conditionalExpression_return);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ES3Parser.assignmentExpression_return exp = default(ES3Parser.assignmentExpression_return);



			Object[] isLhs = new Object[1];
			var assignment = new AssignmentSyntax();

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(1002, 1);
		try
		{
			// ..\\ES3.g:1008:2: (lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1008:4: lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1008, 7);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression4937);
			lhs=conditionalExpression();
			PopFollow();

			adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(1008, 30);
			 retval.value = assignment.Left = lhs.value; 
			DebugLocation(1009, 2);
			// ..\\ES3.g:1009:2: ({...}?ass= assignmentOperator exp= assignmentExpression )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==ADDASS||LA52_0==ANDASS||LA52_0==ASSIGN||LA52_0==DIVASS||LA52_0==MODASS||LA52_0==MULASS||LA52_0==ORASS||LA52_0==SHLASS||LA52_0==SHRASS||LA52_0==SHUASS||LA52_0==SUBASS||LA52_0==XORASS))
			{
				int LA52_1 = input.LA(2);

				if ((( IsLeftHandSideAssign(lhs.value, isLhs) )))
				{
					alt52 = 1;
				}
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1009:5: {...}?ass= assignmentOperator exp= assignmentExpression
				{
				DebugLocation(1009, 5);
				if (!(( IsLeftHandSideAssign(lhs.value, isLhs) )))
				{
					throw new FailedPredicateException(input, "assignmentExpression", " IsLeftHandSideAssign(lhs.value, isLhs) ");
				}
				DebugLocation(1009, 52);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression4949);
				ass=assignmentOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(ass.Tree, root_0);
				DebugLocation(1009, 73);
				 assignment.AssignmentOperator = ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)); 
				DebugLocation(1009, 150);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression4956);
				exp=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, exp.Tree);
				DebugLocation(1009, 172);
				  assignment.Right = exp.value; retval.value = assignment; 

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 44);
			LeaveRule("assignmentExpression", 44);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(1010, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	private sealed partial class assignmentOperator_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignmentOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();

	// $ANTLR start "assignmentOperator"
	// ..\\ES3.g:1012:1: assignmentOperator : ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS );
	[GrammarRule("assignmentOperator")]
	private ES3Parser.assignmentOperator_return assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 45);
		TraceIn("assignmentOperator", 45);
		ES3Parser.assignmentOperator_return retval = new ES3Parser.assignmentOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set79 = default(IToken);

		object set79_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(1012, 1);
		try
		{
			// ..\\ES3.g:1013:2: ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1013, 2);
			set79=(IToken)input.LT(1);
			if (input.LA(1)==ADDASS||input.LA(1)==ANDASS||input.LA(1)==ASSIGN||input.LA(1)==DIVASS||input.LA(1)==MODASS||input.LA(1)==MULASS||input.LA(1)==ORASS||input.LA(1)==SHLASS||input.LA(1)==SHRASS||input.LA(1)==SHUASS||input.LA(1)==SUBASS||input.LA(1)==XORASS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set79));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentOperator", 45);
			LeaveRule("assignmentOperator", 45);
			LeaveRule_assignmentOperator();
		}
		DebugLocation(1025, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	private sealed partial class assignmentExpressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public assignmentExpressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentExpressionNoIn();
	partial void LeaveRule_assignmentExpressionNoIn();

	// $ANTLR start "assignmentExpressionNoIn"
	// ..\\ES3.g:1027:1: assignmentExpressionNoIn returns [ExpressionSyntax value] : lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? ;
	[GrammarRule("assignmentExpressionNoIn")]
	private ES3Parser.assignmentExpressionNoIn_return assignmentExpressionNoIn()
	{
		EnterRule_assignmentExpressionNoIn();
		EnterRule("assignmentExpressionNoIn", 46);
		TraceIn("assignmentExpressionNoIn", 46);
		ES3Parser.assignmentExpressionNoIn_return retval = new ES3Parser.assignmentExpressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.conditionalExpressionNoIn_return lhs = default(ES3Parser.conditionalExpressionNoIn_return);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ES3Parser.assignmentExpressionNoIn_return exp = default(ES3Parser.assignmentExpressionNoIn_return);



			object[] isLhs = new object[1];
			var assignment = new AssignmentSyntax();

		try { DebugEnterRule(GrammarFileName, "assignmentExpressionNoIn");
		DebugLocation(1027, 1);
		try
		{
			// ..\\ES3.g:1033:2: (lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1033:4: lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1033, 7);
			PushFollow(Follow._conditionalExpressionNoIn_in_assignmentExpressionNoIn5051);
			lhs=conditionalExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(1033, 34);
			  assignment.Left = retval.value = (lhs!=null?lhs.value:default(ExpressionSyntax)); 
			DebugLocation(1034, 2);
			// ..\\ES3.g:1034:2: ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==ADDASS||LA53_0==ANDASS||LA53_0==ASSIGN||LA53_0==DIVASS||LA53_0==MODASS||LA53_0==MULASS||LA53_0==ORASS||LA53_0==SHLASS||LA53_0==SHRASS||LA53_0==SHUASS||LA53_0==SUBASS||LA53_0==XORASS))
			{
				int LA53_1 = input.LA(2);

				if ((( IsLeftHandSideAssign(lhs.value, isLhs) )))
				{
					alt53 = 1;
				}
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1034:4: {...}?ass= assignmentOperator exp= assignmentExpressionNoIn
				{
				DebugLocation(1034, 4);
				if (!(( IsLeftHandSideAssign(lhs.value, isLhs) )))
				{
					throw new FailedPredicateException(input, "assignmentExpressionNoIn", " IsLeftHandSideAssign(lhs.value, isLhs) ");
				}
				DebugLocation(1034, 51);
				PushFollow(Follow._assignmentOperator_in_assignmentExpressionNoIn5063);
				ass=assignmentOperator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(ass.Tree, root_0);
				DebugLocation(1034, 72);
				 assignment.AssignmentOperator = ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)); 
				DebugLocation(1034, 149);
				PushFollow(Follow._assignmentExpressionNoIn_in_assignmentExpressionNoIn5070);
				exp=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, exp.Tree);
				DebugLocation(1034, 175);
				  assignment.Right = exp.value; retval.value = assignment; 

				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpressionNoIn", 46);
			LeaveRule("assignmentExpressionNoIn", 46);
			LeaveRule_assignmentExpressionNoIn();
		}
		DebugLocation(1035, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "assignmentExpressionNoIn"

	private sealed partial class expression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// ..\\ES3.g:1041:1: expression returns [ExpressionSyntax value] : first= assignmentExpression ( COMMA follow= assignmentExpression )* ;
	[GrammarRule("expression")]
	private ES3Parser.expression_return expression()
	{
		EnterRule_expression();
		EnterRule("expression", 47);
		TraceIn("expression", 47);
		ES3Parser.expression_return retval = new ES3Parser.expression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA80 = default(IToken);
		ES3Parser.assignmentExpression_return first = default(ES3Parser.assignmentExpression_return);
		ES3Parser.assignmentExpression_return follow = default(ES3Parser.assignmentExpression_return);

		object COMMA80_tree = default(object);


			var cs = new CommaOperatorSyntax();

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(1041, 1);
		try
		{
			// ..\\ES3.g:1045:2: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1045:4: first= assignmentExpression ( COMMA follow= assignmentExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1045, 9);
			PushFollow(Follow._assignmentExpression_in_expression5102);
			first=assignmentExpression();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1045, 31);
			 retval.value = first.value; 
			DebugLocation(1045, 57);
			// ..\\ES3.g:1045:57: ( COMMA follow= assignmentExpression )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==COMMA))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1045:59: COMMA follow= assignmentExpression
					{
					DebugLocation(1045, 59);
					COMMA80=(IToken)Match(input,COMMA,Follow._COMMA_in_expression5108); 
					COMMA80_tree = (object)adaptor.Create(COMMA80);
					adaptor.AddChild(root_0, COMMA80_tree);

					DebugLocation(1045, 65);
					 if(cs.Expressions.Count == 0) { cs.Expressions.Add(retval.value); retval.value = cs; } 
					DebugLocation(1045, 150);
					PushFollow(Follow._assignmentExpression_in_expression5114);
					follow=assignmentExpression();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1045, 173);
					 cs.Expressions.Add(follow.value); 

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 47);
			LeaveRule("expression", 47);
			LeaveRule_expression();
		}
		DebugLocation(1046, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	private sealed partial class expressionNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ExpressionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expressionNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_expressionNoIn();
	partial void LeaveRule_expressionNoIn();

	// $ANTLR start "expressionNoIn"
	// ..\\ES3.g:1048:1: expressionNoIn returns [ExpressionSyntax value] : first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* ;
	[GrammarRule("expressionNoIn")]
	private ES3Parser.expressionNoIn_return expressionNoIn()
	{
		EnterRule_expressionNoIn();
		EnterRule("expressionNoIn", 48);
		TraceIn("expressionNoIn", 48);
		ES3Parser.expressionNoIn_return retval = new ES3Parser.expressionNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA81 = default(IToken);
		ES3Parser.assignmentExpressionNoIn_return first = default(ES3Parser.assignmentExpressionNoIn_return);
		ES3Parser.assignmentExpressionNoIn_return follow = default(ES3Parser.assignmentExpressionNoIn_return);

		object COMMA81_tree = default(object);


			var cs = new CommaOperatorSyntax();

		try { DebugEnterRule(GrammarFileName, "expressionNoIn");
		DebugLocation(1048, 1);
		try
		{
			// ..\\ES3.g:1052:2: (first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1052:4: first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1052, 9);
			PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn5142);
			first=assignmentExpressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1052, 35);
			 retval.value = first.value; 
			DebugLocation(1052, 61);
			// ..\\ES3.g:1052:61: ( COMMA follow= assignmentExpressionNoIn )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==COMMA))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1052:63: COMMA follow= assignmentExpressionNoIn
					{
					DebugLocation(1052, 63);
					COMMA81=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionNoIn5148); 
					COMMA81_tree = (object)adaptor.Create(COMMA81);
					adaptor.AddChild(root_0, COMMA81_tree);

					DebugLocation(1052, 69);
					if(cs.Expressions.Count == 0) { cs.Expressions.Add(retval.value); retval.value = cs; } 
					DebugLocation(1052, 153);
					PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn5154);
					follow=assignmentExpressionNoIn();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1052, 180);
					 cs.Expressions.Add(follow.value); 

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionNoIn", 48);
			LeaveRule("expressionNoIn", 48);
			LeaveRule_expressionNoIn();
		}
		DebugLocation(1053, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionNoIn"); }
		return retval;

	}
	// $ANTLR end "expressionNoIn"

	private sealed partial class semic_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public semic_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_semic();
	partial void LeaveRule_semic();

	// $ANTLR start "semic"
	// ..\\ES3.g:1077:1: semic : ( SEMIC | EOF | RBRACE | EOL | MultiLineComment );
	[GrammarRule("semic")]
	private ES3Parser.semic_return semic()
	{
		EnterRule_semic();
		EnterRule("semic", 49);
		TraceIn("semic", 49);
		ES3Parser.semic_return retval = new ES3Parser.semic_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SEMIC82 = default(IToken);
		IToken EOF83 = default(IToken);
		IToken RBRACE84 = default(IToken);
		IToken EOL85 = default(IToken);
		IToken MultiLineComment86 = default(IToken);

		object SEMIC82_tree = default(object);
		object EOF83_tree = default(object);
		object RBRACE84_tree = default(object);
		object EOL85_tree = default(object);
		object MultiLineComment86_tree = default(object);


			// Mark current position so we can unconsume a RBRACE.
			int marker = input.Mark();
			// Promote EOL if appropriate	
			PromoteEOL(retval);

		try { DebugEnterRule(GrammarFileName, "semic");
		DebugLocation(1077, 1);
		try
		{
			// ..\\ES3.g:1085:2: ( SEMIC | EOF | RBRACE | EOL | MultiLineComment )
			int alt56=5;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case SEMIC:
				{
				alt56 = 1;
				}
				break;
			case EOF:
				{
				alt56 = 2;
				}
				break;
			case RBRACE:
				{
				alt56 = 3;
				}
				break;
			case EOL:
				{
				alt56 = 4;
				}
				break;
			case MultiLineComment:
				{
				alt56 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1085:4: SEMIC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1085, 4);
				SEMIC82=(IToken)Match(input,SEMIC,Follow._SEMIC_in_semic5188); 
				SEMIC82_tree = (object)adaptor.Create(SEMIC82);
				adaptor.AddChild(root_0, SEMIC82_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1086:4: EOF
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1086, 4);
				EOF83=(IToken)Match(input,EOF,Follow._EOF_in_semic5193); 
				EOF83_tree = (object)adaptor.Create(EOF83);
				adaptor.AddChild(root_0, EOF83_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1087:4: RBRACE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1087, 4);
				RBRACE84=(IToken)Match(input,RBRACE,Follow._RBRACE_in_semic5198); 
				RBRACE84_tree = (object)adaptor.Create(RBRACE84);
				adaptor.AddChild(root_0, RBRACE84_tree);

				DebugLocation(1087, 11);
				 input.Rewind(marker); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1088:4: EOL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1088, 4);
				EOL85=(IToken)Match(input,EOL,Follow._EOL_in_semic5205); 
				EOL85_tree = (object)adaptor.Create(EOL85);
				adaptor.AddChild(root_0, EOL85_tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1088:10: MultiLineComment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1088, 10);
				MultiLineComment86=(IToken)Match(input,MultiLineComment,Follow._MultiLineComment_in_semic5209); 
				MultiLineComment86_tree = (object)adaptor.Create(MultiLineComment86);
				adaptor.AddChild(root_0, MultiLineComment86_tree);


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("semic", 49);
			LeaveRule("semic", 49);
			LeaveRule_semic();
		}
		DebugLocation(1089, 1);
		} finally { DebugExitRule(GrammarFileName, "semic"); }
		return retval;

	}
	// $ANTLR end "semic"

	private sealed partial class statement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// ..\\ES3.g:1096:1: statement returns [SyntaxNode value] options {k=1; } : ({...}? block |{...}?func= functionDeclaration | statementTail );
	[GrammarRule("statement")]
	private ES3Parser.statement_return statement()
	{
		EnterRule_statement();
		EnterRule("statement", 50);
		TraceIn("statement", 50);
		ES3Parser.statement_return retval = new ES3Parser.statement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.functionDeclaration_return func = default(ES3Parser.functionDeclaration_return);
		ES3Parser.block_return block87 = default(ES3Parser.block_return);
		ES3Parser.statementTail_return statementTail88 = default(ES3Parser.statementTail_return);


		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(1096, 1);
		try
		{
			// ..\\ES3.g:1102:2: ({...}? block |{...}?func= functionDeclaration | statementTail )
			int alt57=3;
			try { DebugEnterDecision(57, false);
			try
			{
				alt57 = dfa57.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1102:4: {...}? block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1102, 4);
				if (!(( input.LA(1) == LBRACE )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == LBRACE ");
				}
				DebugLocation(1102, 31);
				PushFollow(Follow._block_in_statement5243);
				block87=block();
				PopFollow();

				adaptor.AddChild(root_0, block87.Tree);
				DebugLocation(1102, 37);
				 retval.value = (block87!=null?block87.value:default(BlockSyntax)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1103:4: {...}?func= functionDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1103, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1103, 37);
				PushFollow(Follow._functionDeclaration_in_statement5254);
				func=functionDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, func.Tree);
				DebugLocation(1103, 58);
				 retval.value = func.value; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1104:4: statementTail
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1104, 4);
				PushFollow(Follow._statementTail_in_statement5261);
				statementTail88=statementTail();
				PopFollow();

				adaptor.AddChild(root_0, statementTail88.Tree);
				DebugLocation(1104, 18);
				 retval.value = (statementTail88!=null?statementTail88.value:default(SyntaxNode)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 50);
			LeaveRule("statement", 50);
			LeaveRule_statement();
		}
		DebugLocation(1105, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	private sealed partial class statementTail_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public statementTail_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_statementTail();
	partial void LeaveRule_statementTail();

	// $ANTLR start "statementTail"
	// ..\\ES3.g:1107:1: statementTail returns [SyntaxNode value] : ( variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement );
	[GrammarRule("statementTail")]
	private ES3Parser.statementTail_return statementTail()
	{
		EnterRule_statementTail();
		EnterRule("statementTail", 51);
		TraceIn("statementTail", 51);
		ES3Parser.statementTail_return retval = new ES3Parser.statementTail_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.variableStatement_return variableStatement89 = default(ES3Parser.variableStatement_return);
		ES3Parser.emptyStatement_return emptyStatement90 = default(ES3Parser.emptyStatement_return);
		ES3Parser.expressionStatement_return expressionStatement91 = default(ES3Parser.expressionStatement_return);
		ES3Parser.ifStatement_return ifStatement92 = default(ES3Parser.ifStatement_return);
		ES3Parser.iterationStatement_return iterationStatement93 = default(ES3Parser.iterationStatement_return);
		ES3Parser.continueStatement_return continueStatement94 = default(ES3Parser.continueStatement_return);
		ES3Parser.breakStatement_return breakStatement95 = default(ES3Parser.breakStatement_return);
		ES3Parser.returnStatement_return returnStatement96 = default(ES3Parser.returnStatement_return);
		ES3Parser.withStatement_return withStatement97 = default(ES3Parser.withStatement_return);
		ES3Parser.labelledStatement_return labelledStatement98 = default(ES3Parser.labelledStatement_return);
		ES3Parser.switchStatement_return switchStatement99 = default(ES3Parser.switchStatement_return);
		ES3Parser.throwStatement_return throwStatement100 = default(ES3Parser.throwStatement_return);
		ES3Parser.tryStatement_return tryStatement101 = default(ES3Parser.tryStatement_return);


		try { DebugEnterRule(GrammarFileName, "statementTail");
		DebugLocation(1107, 1);
		try
		{
			// ..\\ES3.g:1119:2: ( variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement )
			int alt58=13;
			try { DebugEnterDecision(58, false);
			try
			{
				alt58 = dfa58.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1119:4: variableStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1119, 4);
				PushFollow(Follow._variableStatement_in_statementTail5284);
				variableStatement89=variableStatement();
				PopFollow();

				adaptor.AddChild(root_0, variableStatement89.Tree);
				DebugLocation(1119, 22);
				 retval.value = (variableStatement89!=null?variableStatement89.value:default(SyntaxNode)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1120:4: emptyStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1120, 4);
				PushFollow(Follow._emptyStatement_in_statementTail5291);
				emptyStatement90=emptyStatement();
				PopFollow();

				adaptor.AddChild(root_0, emptyStatement90.Tree);
				DebugLocation(1120, 19);
				 retval.value = (emptyStatement90!=null?emptyStatement90.value:default(SyntaxNode)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1121:4: expressionStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1121, 4);
				PushFollow(Follow._expressionStatement_in_statementTail5298);
				expressionStatement91=expressionStatement();
				PopFollow();

				adaptor.AddChild(root_0, expressionStatement91.Tree);
				DebugLocation(1121, 24);
				 retval.value = (expressionStatement91!=null?expressionStatement91.value:default(SyntaxNode)); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1122:4: ifStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1122, 4);
				PushFollow(Follow._ifStatement_in_statementTail5305);
				ifStatement92=ifStatement();
				PopFollow();

				adaptor.AddChild(root_0, ifStatement92.Tree);
				DebugLocation(1122, 16);
				 retval.value = (ifStatement92!=null?ifStatement92.value:default(SyntaxNode)); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1123:4: iterationStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1123, 4);
				PushFollow(Follow._iterationStatement_in_statementTail5312);
				iterationStatement93=iterationStatement();
				PopFollow();

				adaptor.AddChild(root_0, iterationStatement93.Tree);
				DebugLocation(1123, 23);
				 retval.value = (iterationStatement93!=null?iterationStatement93.value:default(SyntaxNode)); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:1124:4: continueStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1124, 4);
				PushFollow(Follow._continueStatement_in_statementTail5319);
				continueStatement94=continueStatement();
				PopFollow();

				adaptor.AddChild(root_0, continueStatement94.Tree);
				DebugLocation(1124, 22);
				 retval.value = (continueStatement94!=null?continueStatement94.value:default(SyntaxNode)); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:1125:4: breakStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1125, 4);
				PushFollow(Follow._breakStatement_in_statementTail5326);
				breakStatement95=breakStatement();
				PopFollow();

				adaptor.AddChild(root_0, breakStatement95.Tree);
				DebugLocation(1125, 19);
				 retval.value = (breakStatement95!=null?breakStatement95.value:default(SyntaxNode)); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:1126:4: returnStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1126, 4);
				PushFollow(Follow._returnStatement_in_statementTail5333);
				returnStatement96=returnStatement();
				PopFollow();

				adaptor.AddChild(root_0, returnStatement96.Tree);
				DebugLocation(1126, 20);
				 retval.value = (returnStatement96!=null?returnStatement96.value:default(ReturnSyntax)); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:1127:4: withStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1127, 4);
				PushFollow(Follow._withStatement_in_statementTail5340);
				withStatement97=withStatement();
				PopFollow();

				adaptor.AddChild(root_0, withStatement97.Tree);
				DebugLocation(1127, 18);
				 retval.value = (withStatement97!=null?withStatement97.value:default(SyntaxNode)); 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ..\\ES3.g:1128:4: labelledStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1128, 4);
				PushFollow(Follow._labelledStatement_in_statementTail5347);
				labelledStatement98=labelledStatement();
				PopFollow();

				adaptor.AddChild(root_0, labelledStatement98.Tree);
				DebugLocation(1128, 22);
				 retval.value = (labelledStatement98!=null?labelledStatement98.value:default(SyntaxNode)); 

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// ..\\ES3.g:1129:4: switchStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1129, 4);
				PushFollow(Follow._switchStatement_in_statementTail5354);
				switchStatement99=switchStatement();
				PopFollow();

				adaptor.AddChild(root_0, switchStatement99.Tree);
				DebugLocation(1129, 20);
				 retval.value = (switchStatement99!=null?switchStatement99.value:default(SyntaxNode)); 

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// ..\\ES3.g:1130:4: throwStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1130, 4);
				PushFollow(Follow._throwStatement_in_statementTail5361);
				throwStatement100=throwStatement();
				PopFollow();

				adaptor.AddChild(root_0, throwStatement100.Tree);
				DebugLocation(1130, 19);
				 retval.value = (throwStatement100!=null?throwStatement100.value:default(SyntaxNode)); 

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// ..\\ES3.g:1131:4: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1131, 4);
				PushFollow(Follow._tryStatement_in_statementTail5368);
				tryStatement101=tryStatement();
				PopFollow();

				adaptor.AddChild(root_0, tryStatement101.Tree);
				DebugLocation(1131, 17);
				 retval.value = (tryStatement101!=null?tryStatement101.value:default(TrySyntax)); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			        if (!(retval.value is ForSyntax ||
			            retval.value is BlockSyntax ||
			            retval.value is WhileSyntax ||
			            retval.value is DoWhileSyntax ||
			            retval.value is SwitchSyntax ||
			            retval.value is TrySyntax ||
			            retval.value is IfSyntax)) {
			            retval.value.Source = ExtractSourceCode((CommonToken)retval.Start, (CommonToken)retval.Stop);
			        }

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementTail", 51);
			LeaveRule("statementTail", 51);
			LeaveRule_statementTail();
		}
		DebugLocation(1132, 1);
		} finally { DebugExitRule(GrammarFileName, "statementTail"); }
		return retval;

	}
	// $ANTLR end "statementTail"

	private sealed partial class block_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public BlockSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public block_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// ..\\ES3.g:1136:1: block returns [BlockSyntax value] : lb= LBRACE ( statement )* RBRACE ;
	[GrammarRule("block")]
	private ES3Parser.block_return block()
	{
		EnterRule_block();
		EnterRule("block", 52);
		TraceIn("block", 52);
		ES3Parser.block_return retval = new ES3Parser.block_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken RBRACE103 = default(IToken);
		ES3Parser.statement_return statement102 = default(ES3Parser.statement_return);

		object lb_tree = default(object);
		object RBRACE103_tree = default(object);


			retval.value = new BlockSyntax();

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(1136, 1);
		try
		{
			// ..\\ES3.g:1143:2: (lb= LBRACE ( statement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1143:4: lb= LBRACE ( statement )* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1143, 6);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_block5398); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(1143, 14);
			// ..\\ES3.g:1143:14: ( statement )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==ADD||LA59_0==BREAK||LA59_0==CONTINUE||LA59_0==DEC||LA59_0==DELETE||LA59_0==DO||LA59_0==DecimalLiteral||LA59_0==FALSE||LA59_0==FOR||LA59_0==FUNCTION||(LA59_0>=HexIntegerLiteral && LA59_0<=IF)||LA59_0==INC||LA59_0==INV||LA59_0==Identifier||(LA59_0>=LBRACE && LA59_0<=LBRACK)||LA59_0==LPAREN||(LA59_0>=NEW && LA59_0<=NOT)||LA59_0==NULL||LA59_0==OctalIntegerLiteral||LA59_0==RETURN||LA59_0==RegularExpressionLiteral||LA59_0==SEMIC||LA59_0==SUB||LA59_0==SWITCH||LA59_0==StringLiteral||(LA59_0>=THIS && LA59_0<=THROW)||(LA59_0>=TRUE && LA59_0<=TYPEOF)||(LA59_0>=VAR && LA59_0<=VOID)||(LA59_0>=WHILE && LA59_0<=WITH)))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1143:15: statement
					{
					DebugLocation(1143, 15);
					PushFollow(Follow._statement_in_block5401);
					statement102=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement102.Tree);
					DebugLocation(1143, 25);
					 retval.value.Statements.AddLast((statement102!=null?statement102.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(1143, 76);
			RBRACE103=(IToken)Match(input,RBRACE,Follow._RBRACE_in_block5407); 
			RBRACE103_tree = (object)adaptor.Create(RBRACE103);
			adaptor.AddChild(root_0, RBRACE103_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


				retval.value.Source = ExtractSourceCode((CommonToken)retval.Start, (CommonToken)retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 52);
			LeaveRule("block", 52);
			LeaveRule_block();
		}
		DebugLocation(1145, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	private sealed partial class variableStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_variableStatement();
	partial void LeaveRule_variableStatement();

	// $ANTLR start "variableStatement"
	// ..\\ES3.g:1151:1: variableStatement returns [SyntaxNode value] : VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic ;
	[GrammarRule("variableStatement")]
	private ES3Parser.variableStatement_return variableStatement()
	{
		EnterRule_variableStatement();
		EnterRule("variableStatement", 53);
		TraceIn("variableStatement", 53);
		ES3Parser.variableStatement_return retval = new ES3Parser.variableStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken VAR104 = default(IToken);
		IToken COMMA105 = default(IToken);
		ES3Parser.variableDeclaration_return first = default(ES3Parser.variableDeclaration_return);
		ES3Parser.variableDeclaration_return follow = default(ES3Parser.variableDeclaration_return);
		ES3Parser.semic_return semic106 = default(ES3Parser.semic_return);

		object VAR104_tree = default(object);
		object COMMA105_tree = default(object);


			var cs = new CommaOperatorSyntax();

		try { DebugEnterRule(GrammarFileName, "variableStatement");
		DebugLocation(1151, 1);
		try
		{
			// ..\\ES3.g:1166:2: ( VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1166:4: VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1166, 4);
			VAR104=(IToken)Match(input,VAR,Follow._VAR_in_variableStatement5437); 
			VAR104_tree = (object)adaptor.Create(VAR104);
			adaptor.AddChild(root_0, VAR104_tree);

			DebugLocation(1166, 13);
			PushFollow(Follow._variableDeclaration_in_variableStatement5441);
			first=variableDeclaration();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1166, 34);
			 first.value.Global = false; retval.value = first.value; 
			DebugLocation(1166, 88);
			// ..\\ES3.g:1166:88: ( COMMA follow= variableDeclaration )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==COMMA))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1166:90: COMMA follow= variableDeclaration
					{
					DebugLocation(1166, 90);
					COMMA105=(IToken)Match(input,COMMA,Follow._COMMA_in_variableStatement5447); 
					COMMA105_tree = (object)adaptor.Create(COMMA105);
					adaptor.AddChild(root_0, COMMA105_tree);

					DebugLocation(1166, 96);
					 if( cs.Expressions.Count == 0) { cs.Expressions.Add(retval.value); retval.value = cs; } 
					DebugLocation(1166, 182);
					PushFollow(Follow._variableDeclaration_in_variableStatement5453);
					follow=variableDeclaration();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1166, 204);
					 cs.Expressions.Add(follow.value); follow.value.Global = false; 

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(1166, 274);
			PushFollow(Follow._semic_in_variableStatement5461);
			semic106=semic();
			PopFollow();

			adaptor.AddChild(root_0, semic106.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


				// hoisting
				if(cs.Expressions.Count > 0) {
					foreach(VariableDeclarationSyntax vd in cs.Expressions) {
			            vd.Target = _currentBody.DeclareVariable(vd.Identifier);
					}
				}
				else {
			        first.value.Target = _currentBody.DeclareVariable(first.value.Identifier);
				}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableStatement", 53);
			LeaveRule("variableStatement", 53);
			LeaveRule_variableStatement();
		}
		DebugLocation(1168, 1);
		} finally { DebugExitRule(GrammarFileName, "variableStatement"); }
		return retval;

	}
	// $ANTLR end "variableStatement"

	private sealed partial class variableDeclaration_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public VariableDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclaration_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\ES3.g:1170:1: variableDeclaration returns [VariableDeclarationSyntax value] : id= Identifier ( ASSIGN ass= assignmentExpression )? ;
	[GrammarRule("variableDeclaration")]
	private ES3Parser.variableDeclaration_return variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 54);
		TraceIn("variableDeclaration", 54);
		ES3Parser.variableDeclaration_return retval = new ES3Parser.variableDeclaration_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken ASSIGN107 = default(IToken);
		ES3Parser.assignmentExpression_return ass = default(ES3Parser.assignmentExpression_return);

		object id_tree = default(object);
		object ASSIGN107_tree = default(object);


			retval.value = new VariableDeclarationSyntax();
			retval.value.Global = true;

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(1170, 1);
		try
		{
			// ..\\ES3.g:1175:2: (id= Identifier ( ASSIGN ass= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1175:4: id= Identifier ( ASSIGN ass= assignmentExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1175, 6);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclaration5485); 
			id_tree = (object)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(1175, 18);
			 retval.value.Identifier = id.Text; 
			DebugLocation(1175, 51);
			// ..\\ES3.g:1175:51: ( ASSIGN ass= assignmentExpression )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==ASSIGN))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1175:53: ASSIGN ass= assignmentExpression
				{
				DebugLocation(1175, 59);
				ASSIGN107=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclaration5491); 
				ASSIGN107_tree = (object)adaptor.Create(ASSIGN107);
				root_0 = (object)adaptor.BecomeRoot(ASSIGN107_tree, root_0);

				DebugLocation(1175, 64);
				PushFollow(Follow._assignmentExpression_in_variableDeclaration5496);
				ass=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, ass.Tree);
				DebugLocation(1175, 86);
				 retval.value.Expression = ass.value; 

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaration", 54);
			LeaveRule("variableDeclaration", 54);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(1176, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return retval;

	}
	// $ANTLR end "variableDeclaration"

	private sealed partial class variableDeclarationNoIn_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public VariableDeclarationSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclarationNoIn_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_variableDeclarationNoIn();
	partial void LeaveRule_variableDeclarationNoIn();

	// $ANTLR start "variableDeclarationNoIn"
	// ..\\ES3.g:1178:1: variableDeclarationNoIn returns [VariableDeclarationSyntax value] : id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? ;
	[GrammarRule("variableDeclarationNoIn")]
	private ES3Parser.variableDeclarationNoIn_return variableDeclarationNoIn()
	{
		EnterRule_variableDeclarationNoIn();
		EnterRule("variableDeclarationNoIn", 55);
		TraceIn("variableDeclarationNoIn", 55);
		ES3Parser.variableDeclarationNoIn_return retval = new ES3Parser.variableDeclarationNoIn_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken ASSIGN108 = default(IToken);
		ES3Parser.assignmentExpressionNoIn_return ass = default(ES3Parser.assignmentExpressionNoIn_return);

		object id_tree = default(object);
		object ASSIGN108_tree = default(object);


			retval.value = new VariableDeclarationSyntax();
			retval.value.Global = true;

		try { DebugEnterRule(GrammarFileName, "variableDeclarationNoIn");
		DebugLocation(1178, 1);
		try
		{
			// ..\\ES3.g:1183:2: (id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1183:4: id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1183, 6);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn5524); 
			id_tree = (object)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(1183, 18);
			 retval.value.Identifier = id.Text; 
			DebugLocation(1183, 51);
			// ..\\ES3.g:1183:51: ( ASSIGN ass= assignmentExpressionNoIn )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==ASSIGN))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1183:53: ASSIGN ass= assignmentExpressionNoIn
				{
				DebugLocation(1183, 59);
				ASSIGN108=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclarationNoIn5530); 
				ASSIGN108_tree = (object)adaptor.Create(ASSIGN108);
				root_0 = (object)adaptor.BecomeRoot(ASSIGN108_tree, root_0);

				DebugLocation(1183, 64);
				PushFollow(Follow._assignmentExpressionNoIn_in_variableDeclarationNoIn5535);
				ass=assignmentExpressionNoIn();
				PopFollow();

				adaptor.AddChild(root_0, ass.Tree);
				DebugLocation(1183, 90);
				 retval.value.Expression = ass.value; 

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationNoIn", 55);
			LeaveRule("variableDeclarationNoIn", 55);
			LeaveRule_variableDeclarationNoIn();
		}
		DebugLocation(1184, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationNoIn"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationNoIn"

	private sealed partial class emptyStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public emptyStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();

	// $ANTLR start "emptyStatement"
	// ..\\ES3.g:1190:1: emptyStatement returns [SyntaxNode value] : SEMIC ;
	[GrammarRule("emptyStatement")]
	private ES3Parser.emptyStatement_return emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 56);
		TraceIn("emptyStatement", 56);
		ES3Parser.emptyStatement_return retval = new ES3Parser.emptyStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SEMIC109 = default(IToken);

		object SEMIC109_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(1190, 1);
		try
		{
			// ..\\ES3.g:1191:2: ( SEMIC )
			DebugEnterAlt(1);
			// ..\\ES3.g:1191:4: SEMIC
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1191, 9);
			SEMIC109=(IToken)Match(input,SEMIC,Follow._SEMIC_in_emptyStatement5560); 
			DebugLocation(1191, 11);
			 retval.value = new EmptySyntax(); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("emptyStatement", 56);
			LeaveRule("emptyStatement", 56);
			LeaveRule_emptyStatement();
		}
		DebugLocation(1192, 1);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return retval;

	}
	// $ANTLR end "emptyStatement"

	private sealed partial class expressionStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expressionStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();

	// $ANTLR start "expressionStatement"
	// ..\\ES3.g:1204:1: expressionStatement returns [SyntaxNode value] : expression semic ;
	[GrammarRule("expressionStatement")]
	private ES3Parser.expressionStatement_return expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 57);
		TraceIn("expressionStatement", 57);
		ES3Parser.expressionStatement_return retval = new ES3Parser.expressionStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.expression_return expression110 = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic111 = default(ES3Parser.semic_return);


		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(1204, 1);
		try
		{
			// ..\\ES3.g:1205:2: ( expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1205:4: expression semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1205, 4);
			PushFollow(Follow._expression_in_expressionStatement5585);
			expression110=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression110.Tree);
			DebugLocation(1205, 20);
			PushFollow(Follow._semic_in_expressionStatement5587);
			semic111=semic();
			PopFollow();

			DebugLocation(1205, 22);
			 retval.value = new ExpressionStatementSyntax((expression110!=null?expression110.value:default(ExpressionSyntax))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionStatement", 57);
			LeaveRule("expressionStatement", 57);
			LeaveRule_expressionStatement();
		}
		DebugLocation(1206, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return retval;

	}
	// $ANTLR end "expressionStatement"

	private sealed partial class ifStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ifStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();

	// $ANTLR start "ifStatement"
	// ..\\ES3.g:1212:1: ifStatement returns [SyntaxNode value] : IF LPAREN expression RPAREN then= statement ({...}? ELSE els= statement )? ;
	[GrammarRule("ifStatement")]
	private ES3Parser.ifStatement_return ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 58);
		TraceIn("ifStatement", 58);
		ES3Parser.ifStatement_return retval = new ES3Parser.ifStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IF112 = default(IToken);
		IToken LPAREN113 = default(IToken);
		IToken RPAREN115 = default(IToken);
		IToken ELSE116 = default(IToken);
		ES3Parser.statement_return then = default(ES3Parser.statement_return);
		ES3Parser.statement_return els = default(ES3Parser.statement_return);
		ES3Parser.expression_return expression114 = default(ES3Parser.expression_return);

		object IF112_tree = default(object);
		object LPAREN113_tree = default(object);
		object RPAREN115_tree = default(object);
		object ELSE116_tree = default(object);


		var st = new IfSyntax();
		retval.value = st;

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(1212, 1);
		try
		{
			// ..\\ES3.g:1218:2: ( IF LPAREN expression RPAREN then= statement ({...}? ELSE els= statement )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1218:4: IF LPAREN expression RPAREN then= statement ({...}? ELSE els= statement )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1218, 4);
			IF112=(IToken)Match(input,IF,Follow._IF_in_ifStatement5616); 
			IF112_tree = (object)adaptor.Create(IF112);
			adaptor.AddChild(root_0, IF112_tree);

			DebugLocation(1218, 7);
			LPAREN113=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifStatement5618); 
			LPAREN113_tree = (object)adaptor.Create(LPAREN113);
			adaptor.AddChild(root_0, LPAREN113_tree);

			DebugLocation(1218, 14);
			PushFollow(Follow._expression_in_ifStatement5620);
			expression114=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression114.Tree);
			DebugLocation(1218, 25);
			 st.Test = (expression114!=null?expression114.value:default(ExpressionSyntax)); 
			DebugLocation(1218, 58);
			RPAREN115=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifStatement5624); 
			RPAREN115_tree = (object)adaptor.Create(RPAREN115);
			adaptor.AddChild(root_0, RPAREN115_tree);

			DebugLocation(1218, 69);
			PushFollow(Follow._statement_in_ifStatement5628);
			then=statement();
			PopFollow();

			adaptor.AddChild(root_0, then.Tree);
			DebugLocation(1218, 80);
			 st.Then = (then!=null?then.value:default(SyntaxNode)); 
			DebugLocation(1218, 107);
			// ..\\ES3.g:1218:107: ({...}? ELSE els= statement )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==ELSE))
			{
				int LA63_1 = input.LA(2);

				if ((( input.LA(1) == ELSE )))
				{
					alt63 = 1;
				}
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1218:109: {...}? ELSE els= statement
				{
				DebugLocation(1218, 109);
				if (!(( input.LA(1) == ELSE )))
				{
					throw new FailedPredicateException(input, "ifStatement", " input.LA(1) == ELSE ");
				}
				DebugLocation(1218, 134);
				ELSE116=(IToken)Match(input,ELSE,Follow._ELSE_in_ifStatement5636); 
				ELSE116_tree = (object)adaptor.Create(ELSE116);
				adaptor.AddChild(root_0, ELSE116_tree);

				DebugLocation(1218, 142);
				PushFollow(Follow._statement_in_ifStatement5640);
				els=statement();
				PopFollow();

				adaptor.AddChild(root_0, els.Tree);
				DebugLocation(1218, 153);
				 st.Else = (els!=null?els.value:default(SyntaxNode)); 

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifStatement", 58);
			LeaveRule("ifStatement", 58);
			LeaveRule_ifStatement();
		}
		DebugLocation(1221, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"

	private sealed partial class iterationStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public iterationStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_iterationStatement();
	partial void LeaveRule_iterationStatement();

	// $ANTLR start "iterationStatement"
	// ..\\ES3.g:1227:1: iterationStatement returns [SyntaxNode value] : (dos= doStatement |wh= whileStatement |fo= forStatement );
	[GrammarRule("iterationStatement")]
	private ES3Parser.iterationStatement_return iterationStatement()
	{
		EnterRule_iterationStatement();
		EnterRule("iterationStatement", 59);
		TraceIn("iterationStatement", 59);
		ES3Parser.iterationStatement_return retval = new ES3Parser.iterationStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.doStatement_return dos = default(ES3Parser.doStatement_return);
		ES3Parser.whileStatement_return wh = default(ES3Parser.whileStatement_return);
		ES3Parser.forStatement_return fo = default(ES3Parser.forStatement_return);


		try { DebugEnterRule(GrammarFileName, "iterationStatement");
		DebugLocation(1227, 1);
		try
		{
			// ..\\ES3.g:1228:2: (dos= doStatement |wh= whileStatement |fo= forStatement )
			int alt64=3;
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case DO:
				{
				alt64 = 1;
				}
				break;
			case WHILE:
				{
				alt64 = 2;
				}
				break;
			case FOR:
				{
				alt64 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1228:4: dos= doStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1228, 7);
				PushFollow(Follow._doStatement_in_iterationStatement5670);
				dos=doStatement();
				PopFollow();

				adaptor.AddChild(root_0, dos.Tree);
				DebugLocation(1228, 20);
				 retval.value = dos.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1229:4: wh= whileStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1229, 6);
				PushFollow(Follow._whileStatement_in_iterationStatement5679);
				wh=whileStatement();
				PopFollow();

				adaptor.AddChild(root_0, wh.Tree);
				DebugLocation(1229, 23);
				 retval.value = wh.value; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1230:4: fo= forStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1230, 6);
				PushFollow(Follow._forStatement_in_iterationStatement5689);
				fo=forStatement();
				PopFollow();

				adaptor.AddChild(root_0, fo.Tree);
				DebugLocation(1230, 21);
				 retval.value = (SyntaxNode)fo.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iterationStatement", 59);
			LeaveRule("iterationStatement", 59);
			LeaveRule_iterationStatement();
		}
		DebugLocation(1231, 1);
		} finally { DebugExitRule(GrammarFileName, "iterationStatement"); }
		return retval;

	}
	// $ANTLR end "iterationStatement"

	private sealed partial class doStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public doStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_doStatement();
	partial void LeaveRule_doStatement();

	// $ANTLR start "doStatement"
	// ..\\ES3.g:1233:1: doStatement returns [SyntaxNode value] : DO statement WHILE LPAREN expression RPAREN semic ;
	[GrammarRule("doStatement")]
	private ES3Parser.doStatement_return doStatement()
	{
		EnterRule_doStatement();
		EnterRule("doStatement", 60);
		TraceIn("doStatement", 60);
		ES3Parser.doStatement_return retval = new ES3Parser.doStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DO117 = default(IToken);
		IToken WHILE119 = default(IToken);
		IToken LPAREN120 = default(IToken);
		IToken RPAREN122 = default(IToken);
		ES3Parser.statement_return statement118 = default(ES3Parser.statement_return);
		ES3Parser.expression_return expression121 = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic123 = default(ES3Parser.semic_return);

		object DO117_tree = default(object);
		object WHILE119_tree = default(object);
		object LPAREN120_tree = default(object);
		object RPAREN122_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "doStatement");
		DebugLocation(1233, 1);
		try
		{
			// ..\\ES3.g:1234:2: ( DO statement WHILE LPAREN expression RPAREN semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1234:4: DO statement WHILE LPAREN expression RPAREN semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1234, 4);
			DO117=(IToken)Match(input,DO,Follow._DO_in_doStatement5708); 
			DO117_tree = (object)adaptor.Create(DO117);
			adaptor.AddChild(root_0, DO117_tree);

			DebugLocation(1234, 7);
			PushFollow(Follow._statement_in_doStatement5710);
			statement118=statement();
			PopFollow();

			adaptor.AddChild(root_0, statement118.Tree);
			DebugLocation(1234, 17);
			WHILE119=(IToken)Match(input,WHILE,Follow._WHILE_in_doStatement5712); 
			WHILE119_tree = (object)adaptor.Create(WHILE119);
			adaptor.AddChild(root_0, WHILE119_tree);

			DebugLocation(1234, 23);
			LPAREN120=(IToken)Match(input,LPAREN,Follow._LPAREN_in_doStatement5714); 
			LPAREN120_tree = (object)adaptor.Create(LPAREN120);
			adaptor.AddChild(root_0, LPAREN120_tree);

			DebugLocation(1234, 30);
			PushFollow(Follow._expression_in_doStatement5716);
			expression121=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression121.Tree);
			DebugLocation(1234, 41);
			RPAREN122=(IToken)Match(input,RPAREN,Follow._RPAREN_in_doStatement5718); 
			RPAREN122_tree = (object)adaptor.Create(RPAREN122);
			adaptor.AddChild(root_0, RPAREN122_tree);

			DebugLocation(1234, 48);
			PushFollow(Follow._semic_in_doStatement5720);
			semic123=semic();
			PopFollow();

			adaptor.AddChild(root_0, semic123.Tree);
			DebugLocation(1234, 54);
			 retval.value = new DoWhileSyntax((expression121!=null?expression121.value:default(ExpressionSyntax)), (statement118!=null?statement118.value:default(SyntaxNode))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("doStatement", 60);
			LeaveRule("doStatement", 60);
			LeaveRule_doStatement();
		}
		DebugLocation(1236, 1);
		} finally { DebugExitRule(GrammarFileName, "doStatement"); }
		return retval;

	}
	// $ANTLR end "doStatement"

	private sealed partial class whileStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public whileStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// ..\\ES3.g:1238:1: whileStatement returns [SyntaxNode value] : WHILE LPAREN expression RPAREN statement ;
	[GrammarRule("whileStatement")]
	private ES3Parser.whileStatement_return whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 61);
		TraceIn("whileStatement", 61);
		ES3Parser.whileStatement_return retval = new ES3Parser.whileStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WHILE124 = default(IToken);
		IToken LPAREN125 = default(IToken);
		IToken RPAREN127 = default(IToken);
		ES3Parser.expression_return expression126 = default(ES3Parser.expression_return);
		ES3Parser.statement_return statement128 = default(ES3Parser.statement_return);

		object WHILE124_tree = default(object);
		object LPAREN125_tree = default(object);
		object RPAREN127_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(1238, 1);
		try
		{
			// ..\\ES3.g:1239:2: ( WHILE LPAREN expression RPAREN statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1239:4: WHILE LPAREN expression RPAREN statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1239, 9);
			WHILE124=(IToken)Match(input,WHILE,Follow._WHILE_in_whileStatement5740); 
			WHILE124_tree = (object)adaptor.Create(WHILE124);
			root_0 = (object)adaptor.BecomeRoot(WHILE124_tree, root_0);

			DebugLocation(1239, 17);
			LPAREN125=(IToken)Match(input,LPAREN,Follow._LPAREN_in_whileStatement5743); 
			DebugLocation(1239, 19);
			PushFollow(Follow._expression_in_whileStatement5746);
			expression126=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression126.Tree);
			DebugLocation(1239, 36);
			RPAREN127=(IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement5748); 
			DebugLocation(1239, 38);
			PushFollow(Follow._statement_in_whileStatement5751);
			statement128=statement();
			PopFollow();

			adaptor.AddChild(root_0, statement128.Tree);
			DebugLocation(1239, 48);
			 retval.value = new WhileSyntax((expression126!=null?expression126.value:default(ExpressionSyntax)), (statement128!=null?statement128.value:default(SyntaxNode))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 61);
			LeaveRule("whileStatement", 61);
			LeaveRule_whileStatement();
		}
		DebugLocation(1240, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	private sealed partial class forStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public IForStatement value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// ..\\ES3.g:1283:1: forStatement returns [IForStatement value] : FOR LPAREN fo= forControl RPAREN st= statement ;
	[GrammarRule("forStatement")]
	private ES3Parser.forStatement_return forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 62);
		TraceIn("forStatement", 62);
		ES3Parser.forStatement_return retval = new ES3Parser.forStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FOR129 = default(IToken);
		IToken LPAREN130 = default(IToken);
		IToken RPAREN131 = default(IToken);
		ES3Parser.forControl_return fo = default(ES3Parser.forControl_return);
		ES3Parser.statement_return st = default(ES3Parser.statement_return);

		object FOR129_tree = default(object);
		object LPAREN130_tree = default(object);
		object RPAREN131_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(1283, 1);
		try
		{
			// ..\\ES3.g:1284:2: ( FOR LPAREN fo= forControl RPAREN st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1284:4: FOR LPAREN fo= forControl RPAREN st= statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1284, 7);
			FOR129=(IToken)Match(input,FOR,Follow._FOR_in_forStatement5770); 
			FOR129_tree = (object)adaptor.Create(FOR129);
			root_0 = (object)adaptor.BecomeRoot(FOR129_tree, root_0);

			DebugLocation(1284, 15);
			LPAREN130=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement5773); 
			DebugLocation(1284, 19);
			PushFollow(Follow._forControl_in_forStatement5778);
			fo=forControl();
			PopFollow();

			adaptor.AddChild(root_0, fo.Tree);
			DebugLocation(1284, 31);
			 retval.value = fo.value; 
			DebugLocation(1284, 61);
			RPAREN131=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement5783); 
			DebugLocation(1284, 65);
			PushFollow(Follow._statement_in_forStatement5788);
			st=statement();
			PopFollow();

			adaptor.AddChild(root_0, st.Tree);
			DebugLocation(1284, 76);
			  retval.value.Body = st.value; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 62);
			LeaveRule("forStatement", 62);
			LeaveRule_forStatement();
		}
		DebugLocation(1285, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	private sealed partial class forControl_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public IForStatement value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControl_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControl();
	partial void LeaveRule_forControl();

	// $ANTLR start "forControl"
	// ..\\ES3.g:1287:1: forControl returns [IForStatement value] : (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic );
	[GrammarRule("forControl")]
	private ES3Parser.forControl_return forControl()
	{
		EnterRule_forControl();
		EnterRule("forControl", 63);
		TraceIn("forControl", 63);
		ES3Parser.forControl_return retval = new ES3Parser.forControl_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.forControlVar_return ex1 = default(ES3Parser.forControlVar_return);
		ES3Parser.forControlExpression_return ex2 = default(ES3Parser.forControlExpression_return);
		ES3Parser.forControlSemic_return ex3 = default(ES3Parser.forControlSemic_return);


		try { DebugEnterRule(GrammarFileName, "forControl");
		DebugLocation(1287, 1);
		try
		{
			// ..\\ES3.g:1288:2: (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic )
			int alt65=3;
			try { DebugEnterDecision(65, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt65 = 1;
				}
				break;
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt65 = 2;
				}
				break;
			case SEMIC:
				{
				alt65 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1288:4: ex1= forControlVar
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1288, 7);
				PushFollow(Follow._forControlVar_in_forControl5807);
				ex1=forControlVar();
				PopFollow();

				adaptor.AddChild(root_0, ex1.Tree);
				DebugLocation(1288, 22);
				 retval.value = ex1.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1289:4: ex2= forControlExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1289, 7);
				PushFollow(Follow._forControlExpression_in_forControl5816);
				ex2=forControlExpression();
				PopFollow();

				adaptor.AddChild(root_0, ex2.Tree);
				DebugLocation(1289, 29);
				 retval.value = ex2.value; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1290:4: ex3= forControlSemic
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1290, 7);
				PushFollow(Follow._forControlSemic_in_forControl5825);
				ex3=forControlSemic();
				PopFollow();

				adaptor.AddChild(root_0, ex3.Tree);
				DebugLocation(1290, 24);
				 retval.value = ex3.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControl", 63);
			LeaveRule("forControl", 63);
			LeaveRule_forControl();
		}
		DebugLocation(1291, 1);
		} finally { DebugExitRule(GrammarFileName, "forControl"); }
		return retval;

	}
	// $ANTLR end "forControl"

	private sealed partial class forControlVar_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public IForStatement value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControlVar_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControlVar();
	partial void LeaveRule_forControlVar();

	// $ANTLR start "forControlVar"
	// ..\\ES3.g:1293:1: forControlVar returns [IForStatement value] : VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) ;
	[GrammarRule("forControlVar")]
	private ES3Parser.forControlVar_return forControlVar()
	{
		EnterRule_forControlVar();
		EnterRule("forControlVar", 64);
		TraceIn("forControlVar", 64);
		ES3Parser.forControlVar_return retval = new ES3Parser.forControlVar_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken VAR132 = default(IToken);
		IToken IN133 = default(IToken);
		IToken COMMA134 = default(IToken);
		IToken SEMIC135 = default(IToken);
		IToken SEMIC136 = default(IToken);
		ES3Parser.variableDeclarationNoIn_return first = default(ES3Parser.variableDeclarationNoIn_return);
		ES3Parser.expression_return ex = default(ES3Parser.expression_return);
		ES3Parser.variableDeclarationNoIn_return follow = default(ES3Parser.variableDeclarationNoIn_return);
		ES3Parser.expression_return ex1 = default(ES3Parser.expression_return);
		ES3Parser.expression_return ex2 = default(ES3Parser.expression_return);

		object VAR132_tree = default(object);
		object IN133_tree = default(object);
		object COMMA134_tree = default(object);
		object SEMIC135_tree = default(object);
		object SEMIC136_tree = default(object);


			var forStatement = new ForSyntax();
			var foreachStatement = new ForEachInSyntax();
			var cs = new CommaOperatorSyntax();

		try { DebugEnterRule(GrammarFileName, "forControlVar");
		DebugLocation(1293, 1);
		try
		{
			// ..\\ES3.g:1311:2: ( VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1311:4: VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1311, 4);
			VAR132=(IToken)Match(input,VAR,Follow._VAR_in_forControlVar5853); 
			VAR132_tree = (object)adaptor.Create(VAR132);
			adaptor.AddChild(root_0, VAR132_tree);

			DebugLocation(1311, 13);
			PushFollow(Follow._variableDeclarationNoIn_in_forControlVar5857);
			first=variableDeclarationNoIn();
			PopFollow();

			adaptor.AddChild(root_0, first.Tree);
			DebugLocation(1311, 38);
			 foreachStatement.Initialization = forStatement.Initialization = first.value; first.value.Global = false;  
			DebugLocation(1312, 2);
			// ..\\ES3.g:1312:2: ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==IN))
			{
				alt69 = 1;
			}
			else if ((LA69_0==COMMA||LA69_0==SEMIC))
			{
				alt69 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1313:3: ( IN ex= expression )
				{
				DebugLocation(1313, 3);
				// ..\\ES3.g:1313:3: ( IN ex= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1314:4: IN ex= expression
				{
				DebugLocation(1314, 4);
				IN133=(IToken)Match(input,IN,Follow._IN_in_forControlVar5871); 
				IN133_tree = (object)adaptor.Create(IN133);
				adaptor.AddChild(root_0, IN133_tree);

				DebugLocation(1314, 9);
				PushFollow(Follow._expression_in_forControlVar5875);
				ex=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex.Tree);
				DebugLocation(1314, 21);
				 retval.value = foreachStatement; foreachStatement.Expression = (ex!=null?ex.value:default(ExpressionSyntax)); 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1318:3: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				{
				DebugLocation(1318, 3);
				// ..\\ES3.g:1318:3: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1319:4: ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )?
				{
				DebugLocation(1319, 4);
				// ..\\ES3.g:1319:4: ( COMMA follow= variableDeclarationNoIn )*
				try { DebugEnterSubRule(66);
				while (true)
				{
					int alt66=2;
					try { DebugEnterDecision(66, false);
					int LA66_0 = input.LA(1);

					if ((LA66_0==COMMA))
					{
						alt66 = 1;
					}


					} finally { DebugExitDecision(66); }
					switch ( alt66 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1319:6: COMMA follow= variableDeclarationNoIn
						{
						DebugLocation(1319, 6);
						COMMA134=(IToken)Match(input,COMMA,Follow._COMMA_in_forControlVar5900); 
						COMMA134_tree = (object)adaptor.Create(COMMA134);
						adaptor.AddChild(root_0, COMMA134_tree);

						DebugLocation(1319, 12);
						 if( cs.Expressions.Count == 0) { foreachStatement.Initialization = forStatement.Initialization = cs; cs.Expressions.Add(first.value); } 
						DebugLocation(1319, 158);
						PushFollow(Follow._variableDeclarationNoIn_in_forControlVar5906);
						follow=variableDeclarationNoIn();
						PopFollow();

						adaptor.AddChild(root_0, follow.Tree);
						DebugLocation(1319, 183);
						  follow.value.Global = false; cs.Expressions.Add(follow.value); 

						}
						break;

					default:
						goto loop66;
					}
				}

				loop66:
					;

				} finally { DebugExitSubRule(66); }

				DebugLocation(1320, 4);
				SEMIC135=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlVar5917); 
				SEMIC135_tree = (object)adaptor.Create(SEMIC135);
				adaptor.AddChild(root_0, SEMIC135_tree);

				DebugLocation(1320, 10);
				// ..\\ES3.g:1320:10: (ex1= expression )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==ADD||LA67_0==DEC||LA67_0==DELETE||LA67_0==DecimalLiteral||LA67_0==FALSE||LA67_0==FUNCTION||LA67_0==HexIntegerLiteral||LA67_0==INC||LA67_0==INV||LA67_0==Identifier||(LA67_0>=LBRACE && LA67_0<=LBRACK)||LA67_0==LPAREN||(LA67_0>=NEW && LA67_0<=NOT)||LA67_0==NULL||LA67_0==OctalIntegerLiteral||LA67_0==RegularExpressionLiteral||LA67_0==SUB||LA67_0==StringLiteral||LA67_0==THIS||LA67_0==TRUE||LA67_0==TYPEOF||LA67_0==VOID))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1320:12: ex1= expression
					{
					DebugLocation(1320, 15);
					PushFollow(Follow._expression_in_forControlVar5923);
					ex1=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex1.Tree);
					DebugLocation(1320, 27);
					 forStatement.Test = (ex1!=null?ex1.value:default(ExpressionSyntax));

					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(1320, 66);
				SEMIC136=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlVar5931); 
				SEMIC136_tree = (object)adaptor.Create(SEMIC136);
				adaptor.AddChild(root_0, SEMIC136_tree);

				DebugLocation(1320, 72);
				// ..\\ES3.g:1320:72: (ex2= expression )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==ADD||LA68_0==DEC||LA68_0==DELETE||LA68_0==DecimalLiteral||LA68_0==FALSE||LA68_0==FUNCTION||LA68_0==HexIntegerLiteral||LA68_0==INC||LA68_0==INV||LA68_0==Identifier||(LA68_0>=LBRACE && LA68_0<=LBRACK)||LA68_0==LPAREN||(LA68_0>=NEW && LA68_0<=NOT)||LA68_0==NULL||LA68_0==OctalIntegerLiteral||LA68_0==RegularExpressionLiteral||LA68_0==SUB||LA68_0==StringLiteral||LA68_0==THIS||LA68_0==TRUE||LA68_0==TYPEOF||LA68_0==VOID))
				{
					alt68 = 1;
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1320:73: ex2= expression
					{
					DebugLocation(1320, 76);
					PushFollow(Follow._expression_in_forControlVar5936);
					ex2=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex2.Tree);
					DebugLocation(1320, 88);
					  forStatement.Increment = (ex2!=null?ex2.value:default(ExpressionSyntax)); 

					}
					break;

				}
				} finally { DebugExitSubRule(68); }

				DebugLocation(1320, 132);
				 retval.value = forStatement; 

				}


				}
				break;

			}
			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


				// hoisting
				if(cs.Expressions.Count > 0) {
					foreach(VariableDeclarationSyntax vd in cs.Expressions) {
			            vd.Target = _currentBody.DeclareVariable(vd.Identifier);
					}
				}
				else {
			        first.value.Target = _currentBody.DeclareVariable(first.value.Identifier);
				}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControlVar", 64);
			LeaveRule("forControlVar", 64);
			LeaveRule_forControlVar();
		}
		DebugLocation(1324, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlVar"); }
		return retval;

	}
	// $ANTLR end "forControlVar"

	private sealed partial class forControlExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public IForStatement value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControlExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControlExpression();
	partial void LeaveRule_forControlExpression();

	// $ANTLR start "forControlExpression"
	// ..\\ES3.g:1326:1: forControlExpression returns [IForStatement value] : ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) ;
	[GrammarRule("forControlExpression")]
	private ES3Parser.forControlExpression_return forControlExpression()
	{
		EnterRule_forControlExpression();
		EnterRule("forControlExpression", 65);
		TraceIn("forControlExpression", 65);
		ES3Parser.forControlExpression_return retval = new ES3Parser.forControlExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IN137 = default(IToken);
		IToken SEMIC138 = default(IToken);
		IToken SEMIC139 = default(IToken);
		ES3Parser.expressionNoIn_return ex1 = default(ES3Parser.expressionNoIn_return);
		ES3Parser.expression_return ex2 = default(ES3Parser.expression_return);
		ES3Parser.expression_return ex3 = default(ES3Parser.expression_return);

		object IN137_tree = default(object);
		object SEMIC138_tree = default(object);
		object SEMIC139_tree = default(object);


			var forStatement = new ForSyntax();
			var foreachStatement = new ForEachInSyntax();

			object[] isLhs = new object[1];

		try { DebugEnterRule(GrammarFileName, "forControlExpression");
		DebugLocation(1326, 1);
		try
		{
			// ..\\ES3.g:1334:2: (ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1334:4: ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1334, 7);
			PushFollow(Follow._expressionNoIn_in_forControlExpression5975);
			ex1=expressionNoIn();
			PopFollow();

			adaptor.AddChild(root_0, ex1.Tree);
			DebugLocation(1334, 23);
			 foreachStatement.Initialization = forStatement.Initialization = ex1.value; 
			DebugLocation(1335, 2);
			// ..\\ES3.g:1335:2: ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==IN))
			{
				alt72 = 1;
			}
			else if ((LA72_0==SEMIC))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1336:3: {...}? ( IN ex2= expression )
				{
				DebugLocation(1336, 3);
				if (!(( IsLeftHandSideIn(ex1.value, isLhs) )))
				{
					throw new FailedPredicateException(input, "forControlExpression", " IsLeftHandSideIn(ex1.value, isLhs) ");
				}
				DebugLocation(1336, 43);
				// ..\\ES3.g:1336:43: ( IN ex2= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1337:4: IN ex2= expression
				{
				DebugLocation(1337, 4);
				IN137=(IToken)Match(input,IN,Follow._IN_in_forControlExpression5992); 
				IN137_tree = (object)adaptor.Create(IN137);
				adaptor.AddChild(root_0, IN137_tree);

				DebugLocation(1337, 10);
				PushFollow(Follow._expression_in_forControlExpression5996);
				ex2=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex2.Tree);
				DebugLocation(1337, 22);
				 retval.value = foreachStatement; foreachStatement.Expression = ex2.value; 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1341:3: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				{
				DebugLocation(1341, 3);
				// ..\\ES3.g:1341:3: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1342:4: SEMIC (ex2= expression )? SEMIC (ex3= expression )?
				{
				DebugLocation(1342, 4);
				SEMIC138=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlExpression6019); 
				SEMIC138_tree = (object)adaptor.Create(SEMIC138);
				adaptor.AddChild(root_0, SEMIC138_tree);

				DebugLocation(1342, 10);
				// ..\\ES3.g:1342:10: (ex2= expression )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==ADD||LA70_0==DEC||LA70_0==DELETE||LA70_0==DecimalLiteral||LA70_0==FALSE||LA70_0==FUNCTION||LA70_0==HexIntegerLiteral||LA70_0==INC||LA70_0==INV||LA70_0==Identifier||(LA70_0>=LBRACE && LA70_0<=LBRACK)||LA70_0==LPAREN||(LA70_0>=NEW && LA70_0<=NOT)||LA70_0==NULL||LA70_0==OctalIntegerLiteral||LA70_0==RegularExpressionLiteral||LA70_0==SUB||LA70_0==StringLiteral||LA70_0==THIS||LA70_0==TRUE||LA70_0==TYPEOF||LA70_0==VOID))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1342:12: ex2= expression
					{
					DebugLocation(1342, 15);
					PushFollow(Follow._expression_in_forControlExpression6025);
					ex2=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex2.Tree);
					DebugLocation(1342, 27);
					 forStatement.Test = ex2.value;

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(1342, 65);
				SEMIC139=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlExpression6033); 
				SEMIC139_tree = (object)adaptor.Create(SEMIC139);
				adaptor.AddChild(root_0, SEMIC139_tree);

				DebugLocation(1342, 71);
				// ..\\ES3.g:1342:71: (ex3= expression )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==ADD||LA71_0==DEC||LA71_0==DELETE||LA71_0==DecimalLiteral||LA71_0==FALSE||LA71_0==FUNCTION||LA71_0==HexIntegerLiteral||LA71_0==INC||LA71_0==INV||LA71_0==Identifier||(LA71_0>=LBRACE && LA71_0<=LBRACK)||LA71_0==LPAREN||(LA71_0>=NEW && LA71_0<=NOT)||LA71_0==NULL||LA71_0==OctalIntegerLiteral||LA71_0==RegularExpressionLiteral||LA71_0==SUB||LA71_0==StringLiteral||LA71_0==THIS||LA71_0==TRUE||LA71_0==TYPEOF||LA71_0==VOID))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1342:72: ex3= expression
					{
					DebugLocation(1342, 75);
					PushFollow(Follow._expression_in_forControlExpression6038);
					ex3=expression();
					PopFollow();

					adaptor.AddChild(root_0, ex3.Tree);
					DebugLocation(1342, 87);
					  forStatement.Increment = ex3.value; 

					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(1342, 130);
				 retval.value = forStatement; 

				}


				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControlExpression", 65);
			LeaveRule("forControlExpression", 65);
			LeaveRule_forControlExpression();
		}
		DebugLocation(1346, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlExpression"); }
		return retval;

	}
	// $ANTLR end "forControlExpression"

	private sealed partial class forControlSemic_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ForSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public forControlSemic_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_forControlSemic();
	partial void LeaveRule_forControlSemic();

	// $ANTLR start "forControlSemic"
	// ..\\ES3.g:1348:1: forControlSemic returns [ForSyntax value] : SEMIC (ex1= expression )? SEMIC (ex2= expression )? ;
	[GrammarRule("forControlSemic")]
	private ES3Parser.forControlSemic_return forControlSemic()
	{
		EnterRule_forControlSemic();
		EnterRule("forControlSemic", 66);
		TraceIn("forControlSemic", 66);
		ES3Parser.forControlSemic_return retval = new ES3Parser.forControlSemic_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SEMIC140 = default(IToken);
		IToken SEMIC141 = default(IToken);
		ES3Parser.expression_return ex1 = default(ES3Parser.expression_return);
		ES3Parser.expression_return ex2 = default(ES3Parser.expression_return);

		object SEMIC140_tree = default(object);
		object SEMIC141_tree = default(object);


			retval.value = new ForSyntax();

		try { DebugEnterRule(GrammarFileName, "forControlSemic");
		DebugLocation(1348, 1);
		try
		{
			// ..\\ES3.g:1352:2: ( SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1352:4: SEMIC (ex1= expression )? SEMIC (ex2= expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1352, 4);
			SEMIC140=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlSemic6074); 
			SEMIC140_tree = (object)adaptor.Create(SEMIC140);
			adaptor.AddChild(root_0, SEMIC140_tree);

			DebugLocation(1352, 10);
			// ..\\ES3.g:1352:10: (ex1= expression )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==ADD||LA73_0==DEC||LA73_0==DELETE||LA73_0==DecimalLiteral||LA73_0==FALSE||LA73_0==FUNCTION||LA73_0==HexIntegerLiteral||LA73_0==INC||LA73_0==INV||LA73_0==Identifier||(LA73_0>=LBRACE && LA73_0<=LBRACK)||LA73_0==LPAREN||(LA73_0>=NEW && LA73_0<=NOT)||LA73_0==NULL||LA73_0==OctalIntegerLiteral||LA73_0==RegularExpressionLiteral||LA73_0==SUB||LA73_0==StringLiteral||LA73_0==THIS||LA73_0==TRUE||LA73_0==TYPEOF||LA73_0==VOID))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1352:12: ex1= expression
				{
				DebugLocation(1352, 15);
				PushFollow(Follow._expression_in_forControlSemic6080);
				ex1=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex1.Tree);
				DebugLocation(1352, 27);
				 retval.value.Test = ex1.value;

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(1352, 59);
			SEMIC141=(IToken)Match(input,SEMIC,Follow._SEMIC_in_forControlSemic6088); 
			SEMIC141_tree = (object)adaptor.Create(SEMIC141);
			adaptor.AddChild(root_0, SEMIC141_tree);

			DebugLocation(1352, 65);
			// ..\\ES3.g:1352:65: (ex2= expression )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==ADD||LA74_0==DEC||LA74_0==DELETE||LA74_0==DecimalLiteral||LA74_0==FALSE||LA74_0==FUNCTION||LA74_0==HexIntegerLiteral||LA74_0==INC||LA74_0==INV||LA74_0==Identifier||(LA74_0>=LBRACE && LA74_0<=LBRACK)||LA74_0==LPAREN||(LA74_0>=NEW && LA74_0<=NOT)||LA74_0==NULL||LA74_0==OctalIntegerLiteral||LA74_0==RegularExpressionLiteral||LA74_0==SUB||LA74_0==StringLiteral||LA74_0==THIS||LA74_0==TRUE||LA74_0==TYPEOF||LA74_0==VOID))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1352:66: ex2= expression
				{
				DebugLocation(1352, 69);
				PushFollow(Follow._expression_in_forControlSemic6093);
				ex2=expression();
				PopFollow();

				adaptor.AddChild(root_0, ex2.Tree);
				DebugLocation(1352, 81);
				  retval.value.Increment = ex2.value; 

				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forControlSemic", 66);
			LeaveRule("forControlSemic", 66);
			LeaveRule_forControlSemic();
		}
		DebugLocation(1354, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlSemic"); }
		return retval;

	}
	// $ANTLR end "forControlSemic"

	private sealed partial class continueStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public continueStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();

	// $ANTLR start "continueStatement"
	// ..\\ES3.g:1365:1: continueStatement returns [SyntaxNode value] : CONTINUE (lb= Identifier )? semic ;
	[GrammarRule("continueStatement")]
	private ES3Parser.continueStatement_return continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 67);
		TraceIn("continueStatement", 67);
		ES3Parser.continueStatement_return retval = new ES3Parser.continueStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken CONTINUE142 = default(IToken);
		ES3Parser.semic_return semic143 = default(ES3Parser.semic_return);

		object lb_tree = default(object);
		object CONTINUE142_tree = default(object);

		 
			string label = String.Empty; 

		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(1365, 1);
		try
		{
			// ..\\ES3.g:1369:2: ( CONTINUE (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1369:4: CONTINUE (lb= Identifier )? semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1369, 12);
			CONTINUE142=(IToken)Match(input,CONTINUE,Follow._CONTINUE_in_continueStatement6127); 
			CONTINUE142_tree = (object)adaptor.Create(CONTINUE142);
			root_0 = (object)adaptor.BecomeRoot(CONTINUE142_tree, root_0);

			DebugLocation(1369, 14);
			 if (input.LA(1) == Identifier) PromoteEOL(null); 
			DebugLocation(1369, 67);
			// ..\\ES3.g:1369:67: (lb= Identifier )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==Identifier))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1369:68: lb= Identifier
				{
				DebugLocation(1369, 70);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_continueStatement6135); 
				lb_tree = (object)adaptor.Create(lb);
				adaptor.AddChild(root_0, lb_tree);

				DebugLocation(1369, 82);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(1369, 111);
			PushFollow(Follow._semic_in_continueStatement6142);
			semic143=semic();
			PopFollow();

			DebugLocation(1369, 113);
			 retval.value = new ContinueSyntax() { Label = label }; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continueStatement", 67);
			LeaveRule("continueStatement", 67);
			LeaveRule_continueStatement();
		}
		DebugLocation(1370, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return retval;

	}
	// $ANTLR end "continueStatement"

	private sealed partial class breakStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public breakStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();

	// $ANTLR start "breakStatement"
	// ..\\ES3.g:1381:1: breakStatement returns [SyntaxNode value] : BREAK (lb= Identifier )? semic ;
	[GrammarRule("breakStatement")]
	private ES3Parser.breakStatement_return breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 68);
		TraceIn("breakStatement", 68);
		ES3Parser.breakStatement_return retval = new ES3Parser.breakStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken BREAK144 = default(IToken);
		ES3Parser.semic_return semic145 = default(ES3Parser.semic_return);

		object lb_tree = default(object);
		object BREAK144_tree = default(object);

		 
			string label = String.Empty; 

		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(1381, 1);
		try
		{
			// ..\\ES3.g:1385:2: ( BREAK (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1385:4: BREAK (lb= Identifier )? semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1385, 9);
			BREAK144=(IToken)Match(input,BREAK,Follow._BREAK_in_breakStatement6172); 
			BREAK144_tree = (object)adaptor.Create(BREAK144);
			root_0 = (object)adaptor.BecomeRoot(BREAK144_tree, root_0);

			DebugLocation(1385, 11);
			 if (input.LA(1) == Identifier) PromoteEOL(null); 
			DebugLocation(1385, 64);
			// ..\\ES3.g:1385:64: (lb= Identifier )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==Identifier))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1385:65: lb= Identifier
				{
				DebugLocation(1385, 67);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_breakStatement6180); 
				lb_tree = (object)adaptor.Create(lb);
				adaptor.AddChild(root_0, lb_tree);

				DebugLocation(1385, 79);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(1385, 108);
			PushFollow(Follow._semic_in_breakStatement6187);
			semic145=semic();
			PopFollow();

			DebugLocation(1385, 110);
			 retval.value = new BreakSyntax() { Label = label }; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("breakStatement", 68);
			LeaveRule("breakStatement", 68);
			LeaveRule_breakStatement();
		}
		DebugLocation(1386, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return retval;

	}
	// $ANTLR end "breakStatement"

	private sealed partial class returnStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ReturnSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public returnStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// ..\\ES3.g:1405:1: returnStatement returns [ReturnSyntax value] : RETURN (expr= expression )? semic ;
	[GrammarRule("returnStatement")]
	private ES3Parser.returnStatement_return returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 69);
		TraceIn("returnStatement", 69);
		ES3Parser.returnStatement_return retval = new ES3Parser.returnStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken RETURN146 = default(IToken);
		ES3Parser.expression_return expr = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic147 = default(ES3Parser.semic_return);

		object RETURN146_tree = default(object);


			retval.value = new ReturnSyntax();

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(1405, 1);
		try
		{
			// ..\\ES3.g:1409:2: ( RETURN (expr= expression )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1409:4: RETURN (expr= expression )? semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1409, 10);
			RETURN146=(IToken)Match(input,RETURN,Follow._RETURN_in_returnStatement6217); 
			RETURN146_tree = (object)adaptor.Create(RETURN146);
			root_0 = (object)adaptor.BecomeRoot(RETURN146_tree, root_0);

			DebugLocation(1409, 12);
			 PromoteEOL(null); 
			DebugLocation(1409, 34);
			// ..\\ES3.g:1409:34: (expr= expression )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==ADD||LA77_0==DEC||LA77_0==DELETE||LA77_0==DecimalLiteral||LA77_0==FALSE||LA77_0==FUNCTION||LA77_0==HexIntegerLiteral||LA77_0==INC||LA77_0==INV||LA77_0==Identifier||(LA77_0>=LBRACE && LA77_0<=LBRACK)||LA77_0==LPAREN||(LA77_0>=NEW && LA77_0<=NOT)||LA77_0==NULL||LA77_0==OctalIntegerLiteral||LA77_0==RegularExpressionLiteral||LA77_0==SUB||LA77_0==StringLiteral||LA77_0==THIS||LA77_0==TRUE||LA77_0==TYPEOF||LA77_0==VOID))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1409:35: expr= expression
				{
				DebugLocation(1409, 39);
				PushFollow(Follow._expression_in_returnStatement6225);
				expr=expression();
				PopFollow();

				adaptor.AddChild(root_0, expr.Tree);
				DebugLocation(1409, 51);
				 retval.value.Expression = expr.value; 

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(1409, 94);
			PushFollow(Follow._semic_in_returnStatement6231);
			semic147=semic();
			PopFollow();


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 69);
			LeaveRule("returnStatement", 69);
			LeaveRule_returnStatement();
		}
		DebugLocation(1410, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	private sealed partial class withStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public withStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();

	// $ANTLR start "withStatement"
	// ..\\ES3.g:1416:1: withStatement returns [SyntaxNode value] : WITH LPAREN exp= expression RPAREN smt= statement ;
	[GrammarRule("withStatement")]
	private ES3Parser.withStatement_return withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 70);
		TraceIn("withStatement", 70);
		ES3Parser.withStatement_return retval = new ES3Parser.withStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WITH148 = default(IToken);
		IToken LPAREN149 = default(IToken);
		IToken RPAREN150 = default(IToken);
		ES3Parser.expression_return exp = default(ES3Parser.expression_return);
		ES3Parser.statement_return smt = default(ES3Parser.statement_return);

		object WITH148_tree = default(object);
		object LPAREN149_tree = default(object);
		object RPAREN150_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(1416, 1);
		try
		{
			// ..\\ES3.g:1417:2: ( WITH LPAREN exp= expression RPAREN smt= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1417:4: WITH LPAREN exp= expression RPAREN smt= statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1417, 8);
			WITH148=(IToken)Match(input,WITH,Follow._WITH_in_withStatement6252); 
			WITH148_tree = (object)adaptor.Create(WITH148);
			root_0 = (object)adaptor.BecomeRoot(WITH148_tree, root_0);

			DebugLocation(1417, 16);
			LPAREN149=(IToken)Match(input,LPAREN,Follow._LPAREN_in_withStatement6255); 
			DebugLocation(1417, 21);
			PushFollow(Follow._expression_in_withStatement6260);
			exp=expression();
			PopFollow();

			adaptor.AddChild(root_0, exp.Tree);
			DebugLocation(1417, 39);
			RPAREN150=(IToken)Match(input,RPAREN,Follow._RPAREN_in_withStatement6262); 
			DebugLocation(1417, 44);
			PushFollow(Follow._statement_in_withStatement6267);
			smt=statement();
			PopFollow();

			adaptor.AddChild(root_0, smt.Tree);
			DebugLocation(1417, 55);
			 retval.value = new WithSyntax(exp.value, smt.value); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("withStatement", 70);
			LeaveRule("withStatement", 70);
			LeaveRule_withStatement();
		}
		DebugLocation(1418, 1);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return retval;

	}
	// $ANTLR end "withStatement"

	private sealed partial class switchStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public switchStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// ..\\ES3.g:1424:1: switchStatement returns [SyntaxNode value] : SWITCH LPAREN expression RPAREN LBRACE ({...}? => defaultClause | caseClause )* RBRACE ;
	[GrammarRule("switchStatement")]
	private ES3Parser.switchStatement_return switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 71);
		TraceIn("switchStatement", 71);
		ES3Parser.switchStatement_return retval = new ES3Parser.switchStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SWITCH151 = default(IToken);
		IToken LPAREN152 = default(IToken);
		IToken RPAREN154 = default(IToken);
		IToken LBRACE155 = default(IToken);
		IToken RBRACE158 = default(IToken);
		ES3Parser.expression_return expression153 = default(ES3Parser.expression_return);
		ES3Parser.defaultClause_return defaultClause156 = default(ES3Parser.defaultClause_return);
		ES3Parser.caseClause_return caseClause157 = default(ES3Parser.caseClause_return);

		object SWITCH151_tree = default(object);
		object LPAREN152_tree = default(object);
		object RPAREN154_tree = default(object);
		object LBRACE155_tree = default(object);
		object RBRACE158_tree = default(object);


			SwitchSyntax switchStatement = new SwitchSyntax();
			retval.value = switchStatement;
			int defaultClauseCount = 0;

		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(1424, 1);
		try
		{
			// ..\\ES3.g:1430:2: ( SWITCH LPAREN expression RPAREN LBRACE ({...}? => defaultClause | caseClause )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1430:4: SWITCH LPAREN expression RPAREN LBRACE ({...}? => defaultClause | caseClause )* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1430, 4);
			SWITCH151=(IToken)Match(input,SWITCH,Follow._SWITCH_in_switchStatement6294); 
			SWITCH151_tree = (object)adaptor.Create(SWITCH151);
			adaptor.AddChild(root_0, SWITCH151_tree);

			DebugLocation(1430, 11);
			LPAREN152=(IToken)Match(input,LPAREN,Follow._LPAREN_in_switchStatement6296); 
			LPAREN152_tree = (object)adaptor.Create(LPAREN152);
			adaptor.AddChild(root_0, LPAREN152_tree);

			DebugLocation(1430, 18);
			PushFollow(Follow._expression_in_switchStatement6298);
			expression153=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression153.Tree);
			DebugLocation(1430, 29);
			 switchStatement.Expression = (expression153!=null?expression153.value:default(ExpressionSyntax)); 
			DebugLocation(1430, 81);
			RPAREN154=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement6302); 
			RPAREN154_tree = (object)adaptor.Create(RPAREN154);
			adaptor.AddChild(root_0, RPAREN154_tree);

			DebugLocation(1431, 3);
			LBRACE155=(IToken)Match(input,LBRACE,Follow._LBRACE_in_switchStatement6307); 
			LBRACE155_tree = (object)adaptor.Create(LBRACE155);
			adaptor.AddChild(root_0, LBRACE155_tree);

			DebugLocation(1431, 10);
			// ..\\ES3.g:1431:10: ({...}? => defaultClause | caseClause )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=3;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==DEFAULT) && (( defaultClauseCount == 0 )))
				{
					alt78 = 1;
				}
				else if ((LA78_0==CASE))
				{
					alt78 = 2;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1431:12: {...}? => defaultClause
					{
					DebugLocation(1431, 12);
					if (!(( defaultClauseCount == 0 )))
					{
						throw new FailedPredicateException(input, "switchStatement", " defaultClauseCount == 0 ");
					}
					DebugLocation(1431, 43);
					PushFollow(Follow._defaultClause_in_switchStatement6314);
					defaultClause156=defaultClause();
					PopFollow();

					adaptor.AddChild(root_0, defaultClause156.Tree);
					DebugLocation(1431, 57);
					 defaultClauseCount++; switchStatement.Default=(defaultClause156!=null?defaultClause156.value:default(BlockSyntax)); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:1431:131: caseClause
					{
					DebugLocation(1431, 131);
					PushFollow(Follow._caseClause_in_switchStatement6320);
					caseClause157=caseClause();
					PopFollow();

					adaptor.AddChild(root_0, caseClause157.Tree);
					DebugLocation(1431, 142);
					 switchStatement.Cases.Add((caseClause157!=null?caseClause157.value:default(CaseClause))); 

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }

			DebugLocation(1431, 195);
			RBRACE158=(IToken)Match(input,RBRACE,Follow._RBRACE_in_switchStatement6327); 
			RBRACE158_tree = (object)adaptor.Create(RBRACE158);
			adaptor.AddChild(root_0, RBRACE158_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 71);
			LeaveRule("switchStatement", 71);
			LeaveRule_switchStatement();
		}
		DebugLocation(1433, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	private sealed partial class caseClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public CaseClause value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public caseClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_caseClause();
	partial void LeaveRule_caseClause();

	// $ANTLR start "caseClause"
	// ..\\ES3.g:1435:1: caseClause returns [CaseClause value] : CASE expression COLON ( statement )* ;
	[GrammarRule("caseClause")]
	private ES3Parser.caseClause_return caseClause()
	{
		EnterRule_caseClause();
		EnterRule("caseClause", 72);
		TraceIn("caseClause", 72);
		ES3Parser.caseClause_return retval = new ES3Parser.caseClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CASE159 = default(IToken);
		IToken COLON161 = default(IToken);
		ES3Parser.expression_return expression160 = default(ES3Parser.expression_return);
		ES3Parser.statement_return statement162 = default(ES3Parser.statement_return);

		object CASE159_tree = default(object);
		object COLON161_tree = default(object);


			retval.value = new CaseClause();

		try { DebugEnterRule(GrammarFileName, "caseClause");
		DebugLocation(1435, 1);
		try
		{
			// ..\\ES3.g:1439:2: ( CASE expression COLON ( statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1439:4: CASE expression COLON ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1439, 8);
			CASE159=(IToken)Match(input,CASE,Follow._CASE_in_caseClause6350); 
			CASE159_tree = (object)adaptor.Create(CASE159);
			root_0 = (object)adaptor.BecomeRoot(CASE159_tree, root_0);

			DebugLocation(1439, 10);
			PushFollow(Follow._expression_in_caseClause6353);
			expression160=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression160.Tree);
			DebugLocation(1439, 21);
			 retval.value.Expression = (expression160!=null?expression160.value:default(ExpressionSyntax)); 
			DebugLocation(1439, 69);
			COLON161=(IToken)Match(input,COLON,Follow._COLON_in_caseClause6357); 
			DebugLocation(1439, 70);
			// ..\\ES3.g:1439:70: ( statement )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==ADD||LA79_0==BREAK||LA79_0==CONTINUE||LA79_0==DEC||LA79_0==DELETE||LA79_0==DO||LA79_0==DecimalLiteral||LA79_0==FALSE||LA79_0==FOR||LA79_0==FUNCTION||(LA79_0>=HexIntegerLiteral && LA79_0<=IF)||LA79_0==INC||LA79_0==INV||LA79_0==Identifier||(LA79_0>=LBRACE && LA79_0<=LBRACK)||LA79_0==LPAREN||(LA79_0>=NEW && LA79_0<=NOT)||LA79_0==NULL||LA79_0==OctalIntegerLiteral||LA79_0==RETURN||LA79_0==RegularExpressionLiteral||LA79_0==SEMIC||LA79_0==SUB||LA79_0==SWITCH||LA79_0==StringLiteral||(LA79_0>=THIS && LA79_0<=THROW)||(LA79_0>=TRUE && LA79_0<=TYPEOF)||(LA79_0>=VAR && LA79_0<=VOID)||(LA79_0>=WHILE && LA79_0<=WITH)))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1439:72: statement
					{
					DebugLocation(1439, 72);
					PushFollow(Follow._statement_in_caseClause6361);
					statement162=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement162.Tree);
					DebugLocation(1439, 82);
					 retval.value.Body.Statements.AddLast((statement162!=null?statement162.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseClause", 72);
			LeaveRule("caseClause", 72);
			LeaveRule_caseClause();
		}
		DebugLocation(1440, 1);
		} finally { DebugExitRule(GrammarFileName, "caseClause"); }
		return retval;

	}
	// $ANTLR end "caseClause"

	private sealed partial class defaultClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public BlockSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public defaultClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_defaultClause();
	partial void LeaveRule_defaultClause();

	// $ANTLR start "defaultClause"
	// ..\\ES3.g:1442:1: defaultClause returns [BlockSyntax value] : DEFAULT COLON ( statement )* ;
	[GrammarRule("defaultClause")]
	private ES3Parser.defaultClause_return defaultClause()
	{
		EnterRule_defaultClause();
		EnterRule("defaultClause", 73);
		TraceIn("defaultClause", 73);
		ES3Parser.defaultClause_return retval = new ES3Parser.defaultClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DEFAULT163 = default(IToken);
		IToken COLON164 = default(IToken);
		ES3Parser.statement_return statement165 = default(ES3Parser.statement_return);

		object DEFAULT163_tree = default(object);
		object COLON164_tree = default(object);


			retval.value = new BlockSyntax();

		try { DebugEnterRule(GrammarFileName, "defaultClause");
		DebugLocation(1442, 1);
		try
		{
			// ..\\ES3.g:1446:2: ( DEFAULT COLON ( statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1446:4: DEFAULT COLON ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1446, 11);
			DEFAULT163=(IToken)Match(input,DEFAULT,Follow._DEFAULT_in_defaultClause6386); 
			DEFAULT163_tree = (object)adaptor.Create(DEFAULT163);
			root_0 = (object)adaptor.BecomeRoot(DEFAULT163_tree, root_0);

			DebugLocation(1446, 18);
			COLON164=(IToken)Match(input,COLON,Follow._COLON_in_defaultClause6389); 
			DebugLocation(1446, 20);
			// ..\\ES3.g:1446:20: ( statement )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==ADD||LA80_0==BREAK||LA80_0==CONTINUE||LA80_0==DEC||LA80_0==DELETE||LA80_0==DO||LA80_0==DecimalLiteral||LA80_0==FALSE||LA80_0==FOR||LA80_0==FUNCTION||(LA80_0>=HexIntegerLiteral && LA80_0<=IF)||LA80_0==INC||LA80_0==INV||LA80_0==Identifier||(LA80_0>=LBRACE && LA80_0<=LBRACK)||LA80_0==LPAREN||(LA80_0>=NEW && LA80_0<=NOT)||LA80_0==NULL||LA80_0==OctalIntegerLiteral||LA80_0==RETURN||LA80_0==RegularExpressionLiteral||LA80_0==SEMIC||LA80_0==SUB||LA80_0==SWITCH||LA80_0==StringLiteral||(LA80_0>=THIS && LA80_0<=THROW)||(LA80_0>=TRUE && LA80_0<=TYPEOF)||(LA80_0>=VAR && LA80_0<=VOID)||(LA80_0>=WHILE && LA80_0<=WITH)))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1446:21: statement
					{
					DebugLocation(1446, 21);
					PushFollow(Follow._statement_in_defaultClause6393);
					statement165=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement165.Tree);
					DebugLocation(1446, 31);
					 retval.value.Statements.AddLast((statement165!=null?statement165.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultClause", 73);
			LeaveRule("defaultClause", 73);
			LeaveRule_defaultClause();
		}
		DebugLocation(1447, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultClause"); }
		return retval;

	}
	// $ANTLR end "defaultClause"

	private sealed partial class labelledStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public labelledStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_labelledStatement();
	partial void LeaveRule_labelledStatement();

	// $ANTLR start "labelledStatement"
	// ..\\ES3.g:1453:1: labelledStatement returns [SyntaxNode value] : lb= Identifier COLON st= statement ;
	[GrammarRule("labelledStatement")]
	private ES3Parser.labelledStatement_return labelledStatement()
	{
		EnterRule_labelledStatement();
		EnterRule("labelledStatement", 74);
		TraceIn("labelledStatement", 74);
		ES3Parser.labelledStatement_return retval = new ES3Parser.labelledStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken COLON166 = default(IToken);
		ES3Parser.statement_return st = default(ES3Parser.statement_return);

		object lb_tree = default(object);
		object COLON166_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "labelledStatement");
		DebugLocation(1453, 1);
		try
		{
			// ..\\ES3.g:1454:2: (lb= Identifier COLON st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1454:4: lb= Identifier COLON st= statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1454, 6);
			lb=(IToken)Match(input,Identifier,Follow._Identifier_in_labelledStatement6420); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(1454, 18);
			COLON166=(IToken)Match(input,COLON,Follow._COLON_in_labelledStatement6422); 
			COLON166_tree = (object)adaptor.Create(COLON166);
			adaptor.AddChild(root_0, COLON166_tree);

			DebugLocation(1454, 26);
			PushFollow(Follow._statement_in_labelledStatement6426);
			st=statement();
			PopFollow();

			adaptor.AddChild(root_0, st.Tree);
			DebugLocation(1454, 37);
			 retval.value = st.value;  retval.value.Label = lb.Text; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labelledStatement", 74);
			LeaveRule("labelledStatement", 74);
			LeaveRule_labelledStatement();
		}
		DebugLocation(1456, 1);
		} finally { DebugExitRule(GrammarFileName, "labelledStatement"); }
		return retval;

	}
	// $ANTLR end "labelledStatement"

	private sealed partial class throwStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public throwStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();

	// $ANTLR start "throwStatement"
	// ..\\ES3.g:1477:1: throwStatement returns [SyntaxNode value] : THROW exp= expression semic ;
	[GrammarRule("throwStatement")]
	private ES3Parser.throwStatement_return throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 75);
		TraceIn("throwStatement", 75);
		ES3Parser.throwStatement_return retval = new ES3Parser.throwStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken THROW167 = default(IToken);
		ES3Parser.expression_return exp = default(ES3Parser.expression_return);
		ES3Parser.semic_return semic168 = default(ES3Parser.semic_return);

		object THROW167_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(1477, 1);
		try
		{
			// ..\\ES3.g:1478:2: ( THROW exp= expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1478:4: THROW exp= expression semic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1478, 9);
			THROW167=(IToken)Match(input,THROW,Follow._THROW_in_throwStatement6452); 
			THROW167_tree = (object)adaptor.Create(THROW167);
			root_0 = (object)adaptor.BecomeRoot(THROW167_tree, root_0);

			DebugLocation(1478, 11);
			 PromoteEOL(null); 
			DebugLocation(1478, 36);
			PushFollow(Follow._expression_in_throwStatement6459);
			exp=expression();
			PopFollow();

			adaptor.AddChild(root_0, exp.Tree);
			DebugLocation(1478, 48);
			 retval.value = new ThrowSyntax(exp.value); 
			DebugLocation(1478, 94);
			PushFollow(Follow._semic_in_throwStatement6463);
			semic168=semic();
			PopFollow();


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwStatement", 75);
			LeaveRule("throwStatement", 75);
			LeaveRule_throwStatement();
		}
		DebugLocation(1479, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return retval;

	}
	// $ANTLR end "throwStatement"

	private sealed partial class tryStatement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public TrySyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tryStatement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();

	// $ANTLR start "tryStatement"
	// ..\\ES3.g:1485:1: tryStatement returns [TrySyntax value] : TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) ;
	[GrammarRule("tryStatement")]
	private ES3Parser.tryStatement_return tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 76);
		TraceIn("tryStatement", 76);
		ES3Parser.tryStatement_return retval = new ES3Parser.tryStatement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TRY169 = default(IToken);
		ES3Parser.block_return b = default(ES3Parser.block_return);
		ES3Parser.catchClause_return c = default(ES3Parser.catchClause_return);
		ES3Parser.finallyClause_return first = default(ES3Parser.finallyClause_return);
		ES3Parser.finallyClause_return last = default(ES3Parser.finallyClause_return);

		object TRY169_tree = default(object);


			retval.value = new TrySyntax();

		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(1485, 1);
		try
		{
			// ..\\ES3.g:1489:2: ( TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1489:4: TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1489, 7);
			TRY169=(IToken)Match(input,TRY,Follow._TRY_in_tryStatement6488); 
			TRY169_tree = (object)adaptor.Create(TRY169);
			root_0 = (object)adaptor.BecomeRoot(TRY169_tree, root_0);

			DebugLocation(1489, 10);
			PushFollow(Follow._block_in_tryStatement6493);
			b=block();
			PopFollow();

			adaptor.AddChild(root_0, b.Tree);
			DebugLocation(1489, 18);
			 retval.value.Body = b.value; 
			DebugLocation(1489, 45);
			// ..\\ES3.g:1489:45: (c= catchClause (first= finallyClause )? |last= finallyClause )
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==CATCH))
			{
				alt82 = 1;
			}
			else if ((LA82_0==FINALLY))
			{
				alt82 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1489:47: c= catchClause (first= finallyClause )?
				{
				DebugLocation(1489, 48);
				PushFollow(Follow._catchClause_in_tryStatement6502);
				c=catchClause();
				PopFollow();

				adaptor.AddChild(root_0, c.Tree);
				DebugLocation(1489, 61);
				 retval.value.Catch = c.value; 
				DebugLocation(1489, 89);
				// ..\\ES3.g:1489:89: (first= finallyClause )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==FINALLY))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1489:90: first= finallyClause
					{
					DebugLocation(1489, 95);
					PushFollow(Follow._finallyClause_in_tryStatement6509);
					first=finallyClause();
					PopFollow();

					adaptor.AddChild(root_0, first.Tree);
					DebugLocation(1489, 110);
					 retval.value.Finally = first.value; 

					}
					break;

				}
				} finally { DebugExitSubRule(81); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1489:148: last= finallyClause
				{
				DebugLocation(1489, 152);
				PushFollow(Follow._finallyClause_in_tryStatement6519);
				last=finallyClause();
				PopFollow();

				adaptor.AddChild(root_0, last.Tree);
				DebugLocation(1489, 167);
				 retval.value.Finally = last.value; 

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 76);
			LeaveRule("tryStatement", 76);
			LeaveRule_tryStatement();
		}
		DebugLocation(1490, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	private sealed partial class catchClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public CatchClause value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public catchClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();

	// $ANTLR start "catchClause"
	// ..\\ES3.g:1492:1: catchClause returns [CatchClause value] : CATCH LPAREN id= Identifier RPAREN block ;
	[GrammarRule("catchClause")]
	private ES3Parser.catchClause_return catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 77);
		TraceIn("catchClause", 77);
		ES3Parser.catchClause_return retval = new ES3Parser.catchClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken CATCH170 = default(IToken);
		IToken LPAREN171 = default(IToken);
		IToken RPAREN172 = default(IToken);
		ES3Parser.block_return block173 = default(ES3Parser.block_return);

		object id_tree = default(object);
		object CATCH170_tree = default(object);
		object LPAREN171_tree = default(object);
		object RPAREN172_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1492, 1);
		try
		{
			// ..\\ES3.g:1496:2: ( CATCH LPAREN id= Identifier RPAREN block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1496:4: CATCH LPAREN id= Identifier RPAREN block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1496, 9);
			CATCH170=(IToken)Match(input,CATCH,Follow._CATCH_in_catchClause6543); 
			CATCH170_tree = (object)adaptor.Create(CATCH170);
			root_0 = (object)adaptor.BecomeRoot(CATCH170_tree, root_0);

			DebugLocation(1496, 17);
			LPAREN171=(IToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause6546); 
			DebugLocation(1496, 21);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_catchClause6551); 
			id_tree = (object)adaptor.Create(id);
			adaptor.AddChild(root_0, id_tree);

			DebugLocation(1496, 39);
			RPAREN172=(IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause6553); 
			DebugLocation(1496, 41);
			PushFollow(Follow._block_in_catchClause6556);
			block173=block();
			PopFollow();

			adaptor.AddChild(root_0, block173.Tree);
			DebugLocation(1496, 47);
			 retval.value = new CatchClause((id!=null?id.Text:null), (block173!=null?block173.value:default(BlockSyntax))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    retval.value.Target = _currentBody.DeclareVariable(retval.value.Identifier);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 77);
			LeaveRule("catchClause", 77);
			LeaveRule_catchClause();
		}
		DebugLocation(1497, 1);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	private sealed partial class finallyClause_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public FinallyClause value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public finallyClause_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();

	// $ANTLR start "finallyClause"
	// ..\\ES3.g:1499:1: finallyClause returns [FinallyClause value] : FINALLY block ;
	[GrammarRule("finallyClause")]
	private ES3Parser.finallyClause_return finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 78);
		TraceIn("finallyClause", 78);
		ES3Parser.finallyClause_return retval = new ES3Parser.finallyClause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FINALLY174 = default(IToken);
		ES3Parser.block_return block175 = default(ES3Parser.block_return);

		object FINALLY174_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(1499, 1);
		try
		{
			// ..\\ES3.g:1500:2: ( FINALLY block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1500:4: FINALLY block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1500, 11);
			FINALLY174=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause6574); 
			FINALLY174_tree = (object)adaptor.Create(FINALLY174);
			root_0 = (object)adaptor.BecomeRoot(FINALLY174_tree, root_0);

			DebugLocation(1500, 13);
			PushFollow(Follow._block_in_finallyClause6577);
			block175=block();
			PopFollow();

			adaptor.AddChild(root_0, block175.Tree);
			DebugLocation(1500, 19);
			 retval.value = new FinallyClause((block175!=null?block175.value:default(BlockSyntax))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 78);
			LeaveRule("finallyClause", 78);
			LeaveRule_finallyClause();
		}
		DebugLocation(1501, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	private sealed partial class functionDeclaration_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionDeclaration_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();

	// $ANTLR start "functionDeclaration"
	// ..\\ES3.g:1513:1: functionDeclaration returns [SyntaxNode value] : FUNCTION name= Identifier parameters= formalParameterList body= functionBody ;
	[GrammarRule("functionDeclaration")]
	private ES3Parser.functionDeclaration_return functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 79);
		TraceIn("functionDeclaration", 79);
		ES3Parser.functionDeclaration_return retval = new ES3Parser.functionDeclaration_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken name = default(IToken);
		IToken FUNCTION176 = default(IToken);
		ES3Parser.formalParameterList_return parameters = default(ES3Parser.formalParameterList_return);
		ES3Parser.functionBody_return body = default(ES3Parser.functionBody_return);

		object name_tree = default(object);
		object FUNCTION176_tree = default(object);


		    FunctionDeclarationSyntax statement = new FunctionDeclarationSyntax();
		    retval.value = new EmptySyntax();
		    _currentBody.Statements.AddFirst(statement);

		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(1513, 1);
		try
		{
			// ..\\ES3.g:1522:2: ( FUNCTION name= Identifier parameters= formalParameterList body= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1522:4: FUNCTION name= Identifier parameters= formalParameterList body= functionBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1522, 4);
			FUNCTION176=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_functionDeclaration6614); 
			FUNCTION176_tree = (object)adaptor.Create(FUNCTION176);
			adaptor.AddChild(root_0, FUNCTION176_tree);

			DebugLocation(1522, 18);
			name=(IToken)Match(input,Identifier,Follow._Identifier_in_functionDeclaration6619); 
			name_tree = (object)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);

			DebugLocation(1522, 30);
			 statement.Name = name.Text; 
			DebugLocation(1523, 14);
			PushFollow(Follow._formalParameterList_in_functionDeclaration6629);
			parameters=formalParameterList();
			PopFollow();

			adaptor.AddChild(root_0, parameters.Tree);
			DebugLocation(1523, 35);
			 statement.Parameters.AddRange(parameters.value); 
			DebugLocation(1524, 8);
			PushFollow(Follow._functionBody_in_functionDeclaration6638);
			body=functionBody();
			PopFollow();

			adaptor.AddChild(root_0, body.Tree);
			DebugLocation(1524, 22);
			 statement.Body = body.value; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    statement.Target = _currentBody.DeclareVariable(statement.Name);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDeclaration", 79);
			LeaveRule("functionDeclaration", 79);
			LeaveRule_functionDeclaration();
		}
		DebugLocation(1527, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return retval;

	}
	// $ANTLR end "functionDeclaration"

	private sealed partial class functionExpression_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public FunctionSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionExpression_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_functionExpression();
	partial void LeaveRule_functionExpression();

	// $ANTLR start "functionExpression"
	// ..\\ES3.g:1529:1: functionExpression returns [FunctionSyntax value] : FUNCTION (name= Identifier )? formalParameterList functionBody ;
	[GrammarRule("functionExpression")]
	private ES3Parser.functionExpression_return functionExpression()
	{
		EnterRule_functionExpression();
		EnterRule("functionExpression", 80);
		TraceIn("functionExpression", 80);
		ES3Parser.functionExpression_return retval = new ES3Parser.functionExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken name = default(IToken);
		IToken FUNCTION177 = default(IToken);
		ES3Parser.formalParameterList_return formalParameterList178 = default(ES3Parser.formalParameterList_return);
		ES3Parser.functionBody_return functionBody179 = default(ES3Parser.functionBody_return);

		object name_tree = default(object);
		object FUNCTION177_tree = default(object);


			retval.value = new FunctionSyntax();

		try { DebugEnterRule(GrammarFileName, "functionExpression");
		DebugLocation(1529, 1);
		try
		{
			// ..\\ES3.g:1533:2: ( FUNCTION (name= Identifier )? formalParameterList functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1533:4: FUNCTION (name= Identifier )? formalParameterList functionBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1533, 4);
			FUNCTION177=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_functionExpression6665); 
			FUNCTION177_tree = (object)adaptor.Create(FUNCTION177);
			adaptor.AddChild(root_0, FUNCTION177_tree);

			DebugLocation(1533, 13);
			// ..\\ES3.g:1533:13: (name= Identifier )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==Identifier))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1533:14: name= Identifier
				{
				DebugLocation(1533, 18);
				name=(IToken)Match(input,Identifier,Follow._Identifier_in_functionExpression6670); 
				name_tree = (object)adaptor.Create(name);
				adaptor.AddChild(root_0, name_tree);

				DebugLocation(1533, 30);
				 retval.value.Name = name.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(1533, 62);
			PushFollow(Follow._formalParameterList_in_functionExpression6677);
			formalParameterList178=formalParameterList();
			PopFollow();

			adaptor.AddChild(root_0, formalParameterList178.Tree);
			DebugLocation(1533, 82);
			 retval.value.Parameters.AddRange((formalParameterList178!=null?formalParameterList178.value:default(List<string>))) ;
			DebugLocation(1533, 142);
			PushFollow(Follow._functionBody_in_functionExpression6681);
			functionBody179=functionBody();
			PopFollow();

			adaptor.AddChild(root_0, functionBody179.Tree);
			DebugLocation(1533, 155);
			 retval.value.Body = (functionBody179!=null?functionBody179.value:default(BlockSyntax)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionExpression", 80);
			LeaveRule("functionExpression", 80);
			LeaveRule_functionExpression();
		}
		DebugLocation(1536, 1);
		} finally { DebugExitRule(GrammarFileName, "functionExpression"); }
		return retval;

	}
	// $ANTLR end "functionExpression"

	private sealed partial class formalParameterList_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public List<string> value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public formalParameterList_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();

	// $ANTLR start "formalParameterList"
	// ..\\ES3.g:1538:1: formalParameterList returns [List<string> value] : LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN ;
	[GrammarRule("formalParameterList")]
	private ES3Parser.formalParameterList_return formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 81);
		TraceIn("formalParameterList", 81);
		ES3Parser.formalParameterList_return retval = new ES3Parser.formalParameterList_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken first = default(IToken);
		IToken follow = default(IToken);
		IToken LPAREN180 = default(IToken);
		IToken COMMA181 = default(IToken);
		IToken RPAREN182 = default(IToken);

		object first_tree = default(object);
		object follow_tree = default(object);
		object LPAREN180_tree = default(object);
		object COMMA181_tree = default(object);
		object RPAREN182_tree = default(object);


		List<string> identifiers = new List<string>();
		retval.value = identifiers;

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(1538, 1);
		try
		{
			// ..\\ES3.g:1543:2: ( LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:1543:4: LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1543, 4);
			LPAREN180=(IToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameterList6706); 
			LPAREN180_tree = (object)adaptor.Create(LPAREN180);
			adaptor.AddChild(root_0, LPAREN180_tree);

			DebugLocation(1543, 11);
			// ..\\ES3.g:1543:11: (first= Identifier ( COMMA follow= Identifier )* )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==Identifier))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1543:13: first= Identifier ( COMMA follow= Identifier )*
				{
				DebugLocation(1543, 18);
				first=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList6712); 
				first_tree = (object)adaptor.Create(first);
				adaptor.AddChild(root_0, first_tree);

				DebugLocation(1543, 30);
				 identifiers.Add((first!=null?first.Text:null)); 
				DebugLocation(1543, 64);
				// ..\\ES3.g:1543:64: ( COMMA follow= Identifier )*
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==COMMA))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch ( alt84 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1543:66: COMMA follow= Identifier
						{
						DebugLocation(1543, 66);
						COMMA181=(IToken)Match(input,COMMA,Follow._COMMA_in_formalParameterList6718); 
						COMMA181_tree = (object)adaptor.Create(COMMA181);
						adaptor.AddChild(root_0, COMMA181_tree);

						DebugLocation(1543, 78);
						follow=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList6722); 
						follow_tree = (object)adaptor.Create(follow);
						adaptor.AddChild(root_0, follow_tree);

						DebugLocation(1543, 91);
						 identifiers.Add((follow!=null?follow.Text:null)); 

						}
						break;

					default:
						goto loop84;
					}
				}

				loop84:
					;

				} finally { DebugExitSubRule(84); }


				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(1543, 132);
			RPAREN182=(IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameterList6733); 
			RPAREN182_tree = (object)adaptor.Create(RPAREN182);
			adaptor.AddChild(root_0, RPAREN182_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 81);
			LeaveRule("formalParameterList", 81);
			LeaveRule_formalParameterList();
		}
		DebugLocation(1545, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	private sealed partial class functionBody_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public BlockSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public functionBody_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();

	// $ANTLR start "functionBody"
	// ..\\ES3.g:1547:1: functionBody returns [BlockSyntax value] : lb= LBRACE ( sourceElement )* RBRACE ;
	[GrammarRule("functionBody")]
	private ES3Parser.functionBody_return functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 82);
		TraceIn("functionBody", 82);
		ES3Parser.functionBody_return retval = new ES3Parser.functionBody_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken lb = default(IToken);
		IToken RBRACE184 = default(IToken);
		ES3Parser.sourceElement_return sourceElement183 = default(ES3Parser.sourceElement_return);

		object lb_tree = default(object);
		object RBRACE184_tree = default(object);


		    BlockSyntax block = new BlockSyntax();
		    var tempBody = _currentBody;
		    _currentBody = block;
		    retval.value = block;

		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(1547, 1);
		try
		{
			// ..\\ES3.g:1557:2: (lb= LBRACE ( sourceElement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1557:4: lb= LBRACE ( sourceElement )* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1557, 6);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_functionBody6760); 
			lb_tree = (object)adaptor.Create(lb);
			adaptor.AddChild(root_0, lb_tree);

			DebugLocation(1557, 14);
			// ..\\ES3.g:1557:14: ( sourceElement )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==ADD||LA86_0==BREAK||LA86_0==CONTINUE||LA86_0==DEC||LA86_0==DELETE||LA86_0==DO||LA86_0==DecimalLiteral||LA86_0==FALSE||LA86_0==FOR||LA86_0==FUNCTION||(LA86_0>=HexIntegerLiteral && LA86_0<=IF)||LA86_0==INC||LA86_0==INV||LA86_0==Identifier||(LA86_0>=LBRACE && LA86_0<=LBRACK)||LA86_0==LPAREN||(LA86_0>=NEW && LA86_0<=NOT)||LA86_0==NULL||LA86_0==OctalIntegerLiteral||LA86_0==RETURN||LA86_0==RegularExpressionLiteral||LA86_0==SEMIC||LA86_0==SUB||LA86_0==SWITCH||LA86_0==StringLiteral||(LA86_0>=THIS && LA86_0<=THROW)||(LA86_0>=TRUE && LA86_0<=TYPEOF)||(LA86_0>=VAR && LA86_0<=VOID)||(LA86_0>=WHILE && LA86_0<=WITH)))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1557:15: sourceElement
					{
					DebugLocation(1557, 15);
					PushFollow(Follow._sourceElement_in_functionBody6763);
					sourceElement183=sourceElement();
					PopFollow();

					adaptor.AddChild(root_0, sourceElement183.Tree);
					DebugLocation(1557, 29);
					 block.Statements.AddLast((sourceElement183!=null?sourceElement183.value:default(SyntaxNode))); 

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }

			DebugLocation(1557, 84);
			RBRACE184=(IToken)Match(input,RBRACE,Follow._RBRACE_in_functionBody6770); 
			RBRACE184_tree = (object)adaptor.Create(RBRACE184);
			adaptor.AddChild(root_0, RBRACE184_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);


			    _currentBody = tempBody;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionBody", 82);
			LeaveRule("functionBody", 82);
			LeaveRule_functionBody();
		}
		DebugLocation(1559, 1);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return retval;

	}
	// $ANTLR end "functionBody"

	private sealed partial class program_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public ProgramSyntax value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public program_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// ..\\ES3.g:1565:1: program returns [ProgramSyntax value] : (follow= sourceElement )* ;
	[GrammarRule("program")]
	private ES3Parser.program_return program()
	{
		EnterRule_program();
		EnterRule("program", 83);
		TraceIn("program", 83);
		ES3Parser.program_return retval = new ES3Parser.program_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.sourceElement_return follow = default(ES3Parser.sourceElement_return);



		    script = input.ToString().Split('\n');
		    ProgramSyntax program = new ProgramSyntax();
		    _currentBody = program;

		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(1565, 1);
		try
		{
			// ..\\ES3.g:1571:2: ( (follow= sourceElement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1571:4: (follow= sourceElement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1571, 4);
			// ..\\ES3.g:1571:4: (follow= sourceElement )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==ADD||LA87_0==BREAK||LA87_0==CONTINUE||LA87_0==DEC||LA87_0==DELETE||LA87_0==DO||LA87_0==DecimalLiteral||LA87_0==FALSE||LA87_0==FOR||LA87_0==FUNCTION||(LA87_0>=HexIntegerLiteral && LA87_0<=IF)||LA87_0==INC||LA87_0==INV||LA87_0==Identifier||(LA87_0>=LBRACE && LA87_0<=LBRACK)||LA87_0==LPAREN||(LA87_0>=NEW && LA87_0<=NOT)||LA87_0==NULL||LA87_0==OctalIntegerLiteral||LA87_0==RETURN||LA87_0==RegularExpressionLiteral||LA87_0==SEMIC||LA87_0==SUB||LA87_0==SWITCH||LA87_0==StringLiteral||(LA87_0>=THIS && LA87_0<=THROW)||(LA87_0>=TRUE && LA87_0<=TYPEOF)||(LA87_0>=VAR && LA87_0<=VOID)||(LA87_0>=WHILE && LA87_0<=WITH)))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1571:5: follow= sourceElement
					{
					DebugLocation(1571, 11);
					PushFollow(Follow._sourceElement_in_program6799);
					follow=sourceElement();
					PopFollow();

					adaptor.AddChild(root_0, follow.Tree);
					DebugLocation(1571, 26);
					 program.Statements.AddLast(follow.value); 

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(1571, 74);
			 retval.value = program; 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 83);
			LeaveRule("program", 83);
			LeaveRule_program();
		}
		DebugLocation(1572, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	private sealed partial class sourceElement_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		public SyntaxNode value;
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public sourceElement_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_sourceElement();
	partial void LeaveRule_sourceElement();

	// $ANTLR start "sourceElement"
	// ..\\ES3.g:1579:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );
	[GrammarRule("sourceElement")]
	private ES3Parser.sourceElement_return sourceElement()
	{
		EnterRule_sourceElement();
		EnterRule("sourceElement", 84);
		TraceIn("sourceElement", 84);
		ES3Parser.sourceElement_return retval = new ES3Parser.sourceElement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ES3Parser.functionDeclaration_return func = default(ES3Parser.functionDeclaration_return);
		ES3Parser.statement_return stat = default(ES3Parser.statement_return);


		try { DebugEnterRule(GrammarFileName, "sourceElement");
		DebugLocation(1579, 1);
		try
		{
			// ..\\ES3.g:1585:2: ({...}?func= functionDeclaration |stat= statement )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			try
			{
				alt88 = dfa88.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1585:4: {...}?func= functionDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1585, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "sourceElement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1585, 37);
				PushFollow(Follow._functionDeclaration_in_sourceElement6840);
				func=functionDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, func.Tree);
				DebugLocation(1585, 58);
				 retval.value = func.value; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1586:4: stat= statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1586, 8);
				PushFollow(Follow._statement_in_sourceElement6849);
				stat=statement();
				PopFollow();

				adaptor.AddChild(root_0, stat.Tree);
				DebugLocation(1586, 19);
				 retval.value = stat.value; 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sourceElement", 84);
			LeaveRule("sourceElement", 84);
			LeaveRule_sourceElement();
		}
		DebugLocation(1587, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElement"); }
		return retval;

	}
	// $ANTLR end "sourceElement"
	#endregion Rules


	#region DFA
	private DFA57 dfa57;
	private DFA58 dfa58;
	private DFA88 dfa88;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa57 = new DFA57( this, SpecialStateTransition57 );
		dfa58 = new DFA58( this );
		dfa88 = new DFA88( this, SpecialStateTransition88 );
	}

	private class DFA57 : DFA
	{
		private const string DFA57_eotS =
			"\x28\xFFFF";
		private const string DFA57_eofS =
			"\x28\xFFFF";
		private const string DFA57_minS =
			"\x1\x5\x2\x0\x25\xFFFF";
		private const string DFA57_maxS =
			"\x1\xA6\x2\x0\x25\xFFFF";
		private const string DFA57_acceptS =
			"\x3\xFFFF\x1\x3\x22\xFFFF\x1\x1\x1\x2";
		private const string DFA57_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x25\xFFFF}>";
		private static readonly string[] DFA57_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x2\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x1\x1\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\xC\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\x2\x3\x2"+
				"\xFFFF\x2\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA57_eot = DFA.UnpackEncodedString(DFA57_eotS);
		private static readonly short[] DFA57_eof = DFA.UnpackEncodedString(DFA57_eofS);
		private static readonly char[] DFA57_min = DFA.UnpackEncodedStringToUnsignedChars(DFA57_minS);
		private static readonly char[] DFA57_max = DFA.UnpackEncodedStringToUnsignedChars(DFA57_maxS);
		private static readonly short[] DFA57_accept = DFA.UnpackEncodedString(DFA57_acceptS);
		private static readonly short[] DFA57_special = DFA.UnpackEncodedString(DFA57_specialS);
		private static readonly short[][] DFA57_transition;

		static DFA57()
		{
			int numStates = DFA57_transitionS.Length;
			DFA57_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA57_transition[i] = DFA.UnpackEncodedString(DFA57_transitionS[i]);
			}
		}

		public DFA57( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}

		public override string Description { get { return "1096:1: statement returns [SyntaxNode value] options {k=1; } : ({...}? block |{...}?func= functionDeclaration | statementTail );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition57(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA57_1 = input.LA(1);


				int index57_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == LBRACE ))) {s = 38;}

				else if ((true)) {s = 3;}


				input.Seek(index57_1);
				if (s >= 0) return s;
				break;
			case 1:
				int LA57_2 = input.LA(1);


				int index57_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 39;}

				else if ((true)) {s = 3;}


				input.Seek(index57_2);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 57, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA58 : DFA
	{
		private const string DFA58_eotS =
			"\xF\xFFFF";
		private const string DFA58_eofS =
			"\x4\xFFFF\x1\x3\xA\xFFFF";
		private const string DFA58_minS =
			"\x1\x5\x3\xFFFF\x1\x5\xA\xFFFF";
		private const string DFA58_maxS =
			"\x1\xA6\x3\xFFFF\x1\xA9\xA\xFFFF";
		private const string DFA58_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1"+
			"\x9\x1\xB\x1\xC\x1\xD\x1\xA";
		private const string DFA58_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA58_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x8\xE\xFFFF\x1\x7\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x6\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x6\x2\xFFFF\x1"+
				"\x3\x5\xFFFF\x1\x3\x1\x5\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x4"+
				"\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x9\x3\xFFFF\x1\x3\x1\xFFFF\x1\x2\xA\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\xB\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xC\x2\xFFFF\x1\x3\x1\xD"+
				"\x1\x3\x2\xFFFF\x1\x1\x1\x3\x2\xFFFF\x1\x6\x1\xA",
				"",
				"",
				"",
				"\x4\x3\x2\xFFFF\x1\x3\xE\xFFFF\x1\xE\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x7\xFFFF\x2\x3\xF\xFFFF\x2\x3\x6\xFFFF\x3\x3\x9\xFFFF"+
				"\x3\x3\x2\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x5\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x2\x3\xC\xFFFF\x2\x3\x6\xFFFF\x4\x3\x1\xFFFF\x4"+
				"\x3\x3\xFFFF\x2\x3\x16\xFFFF\x2\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
		private static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
		private static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
		private static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
		private static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
		private static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
		private static readonly short[][] DFA58_transition;

		static DFA58()
		{
			int numStates = DFA58_transitionS.Length;
			DFA58_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA58_transition[i] = DFA.UnpackEncodedString(DFA58_transitionS[i]);
			}
		}

		public DFA58( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}

		public override string Description { get { return "1107:1: statementTail returns [SyntaxNode value] : ( variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA88 : DFA
	{
		private const string DFA88_eotS =
			"\x27\xFFFF";
		private const string DFA88_eofS =
			"\x27\xFFFF";
		private const string DFA88_minS =
			"\x1\x5\x1\x0\x25\xFFFF";
		private const string DFA88_maxS =
			"\x1\xA6\x1\x0\x25\xFFFF";
		private const string DFA88_acceptS =
			"\x2\xFFFF\x1\x2\x23\xFFFF\x1\x1";
		private const string DFA88_specialS =
			"\x1\xFFFF\x1\x0\x25\xFFFF}>";
		private static readonly string[] DFA88_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x5\xFFFF\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x1\x5\xFFFF\x2\x2\x3\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\xE\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\xC"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x2\x2\x2\xFFFF"+
				"\x2\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
		private static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
		private static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
		private static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
		private static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
		private static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
		private static readonly short[][] DFA88_transition;

		static DFA88()
		{
			int numStates = DFA88_transitionS.Length;
			DFA88_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA88_transition[i] = DFA.UnpackEncodedString(DFA88_transitionS[i]);
			}
		}

		public DFA88( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}

		public override string Description { get { return "1579:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition88(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA88_1 = input.LA(1);


				int index88_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 38;}

				else if ((true)) {s = 2;}


				input.Seek(index88_1);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 88, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _reservedWord_in_token1773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_token1778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _punctuator_in_token1783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_token1788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_token1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyword_in_reservedWord1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _futureReservedWord_in_reservedWord1811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_reservedWord1816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_reservedWord1821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_keyword1835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_futureReservedWord1970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_punctuator2250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_literal2508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_literal2517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_literal2526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_literal2535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RegularExpressionLiteral_in_literal2545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_booleanLiteral2562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_booleanLiteral2569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DecimalLiteral_in_numericLiteral2780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OctalIntegerLiteral_in_numericLiteral2789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HexIntegerLiteral_in_numericLiteral2798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression3200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_primaryExpression3209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression3218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression3227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression3236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression3245 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_primaryExpression3249 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_primaryExpression3252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayLiteral3278 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x451410008UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3284 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _COMMA_in_arrayLiteral3290 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x451410008UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3294 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_arrayLiteral3304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_arrayItem3325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_objectLiteral3366 = new BitSet(new ulong[]{0x100000000000UL,0x2004000000008010UL,0x400000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3372 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_objectLiteral3379 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x400000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3383 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_objectLiteral3393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_propertyAssignment3416 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x400000UL});
		public static readonly BitSet _propertyName_in_propertyAssignment3424 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _formalParameterList_in_propertyAssignment3431 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_propertyAssignment3439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyName_in_propertyAssignment3449 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_propertyAssignment3453 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_propertyAssignment3457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_accessor3477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_propertyName3499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_propertyName3508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_propertyName3517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberExpression3543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionExpression_in_memberExpression3552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_memberExpression3561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_newExpression3578 = new BitSet(new ulong[]{0x4040100000000000UL,0x4120004608010UL,0x11400008UL});
		public static readonly BitSet _memberExpression_in_newExpression3583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments3606 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410009UL});
		public static readonly BitSet _assignmentExpression_in_arguments3612 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _COMMA_in_arguments3618 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_arguments3622 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_arguments3631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_generics3653 = new BitSet(new ulong[]{0x4040100A00000020UL,0x200416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_generics3659 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_generics3665 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_generics3669 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_generics3678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_leftHandSideExpression3714 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _generics_in_leftHandSideExpression3730 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _arguments_in_leftHandSideExpression3739 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _LBRACK_in_leftHandSideExpression3750 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_leftHandSideExpression3754 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_leftHandSideExpression3756 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _DOT_in_leftHandSideExpression3769 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_leftHandSideExpression3773 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression3807 = new BitSet(new ulong[]{0x200000002UL,0x200UL});
		public static readonly BitSet _postfixOperator_in_postfixExpression3815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_postfixOperator3838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixOperator3847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpression3870 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryOperator_in_unaryExpression3879 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression3884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELETE_in_unaryOperator3902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_unaryOperator3909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPEOF_in_unaryOperator3916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryOperator3923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryOperator3930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ADD_in_unaryOperator3939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryOperator3948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INV_in_unaryOperator3955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryOperator3962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression3990 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _MUL_in_multiplicativeExpression4001 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression4010 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression4018 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4029 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4059 = new BitSet(new ulong[]{0x22UL,0x0UL,0x10000UL});
		public static readonly BitSet _ADD_in_additiveExpression4070 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SUB_in_additiveExpression4078 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4089 = new BitSet(new ulong[]{0x22UL,0x0UL,0x10000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4120 = new BitSet(new ulong[]{0x2UL,0x0UL,0xA40UL});
		public static readonly BitSet _SHL_in_shiftExpression4131 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SHR_in_shiftExpression4139 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SHU_in_shiftExpression4147 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4158 = new BitSet(new ulong[]{0x2UL,0x0UL,0xA40UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4189 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _LT_in_relationalExpression4200 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GT_in_relationalExpression4208 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _LTE_in_relationalExpression4216 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GTE_in_relationalExpression4224 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpression4232 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _IN_in_relationalExpression4240 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4251 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4277 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn4288 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GT_in_relationalExpressionNoIn4296 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _LTE_in_relationalExpressionNoIn4304 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GTE_in_relationalExpressionNoIn4312 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpressionNoIn4320 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4332 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4363 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _EQ_in_equalityExpression4374 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NEQ_in_equalityExpression4382 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SAME_in_equalityExpression4390 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NSAME_in_equalityExpression4398 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4409 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn4435 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _EQ_in_equalityExpressionNoIn4446 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NEQ_in_equalityExpressionNoIn4454 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SAME_in_equalityExpressionNoIn4462 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NSAME_in_equalityExpressionNoIn4470 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn4481 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression4508 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpression4514 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression4519 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4540 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpressionNoIn4546 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4551 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression4574 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpression4580 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression4585 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4608 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpressionNoIn4614 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4619 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression4641 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpression4647 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression4652 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4674 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpressionNoIn4680 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4685 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression4711 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpression4717 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression4722 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4743 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpressionNoIn4749 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4754 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression4776 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpression4782 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression4787 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn4809 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpressionNoIn4815 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn4820 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalORExpression_in_conditionalExpression4847 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpression4853 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression4858 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression4860 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression4865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn4886 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpressionNoIn4892 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn4897 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpressionNoIn4899 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn4904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression4937 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x20000021480UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression4949 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression4956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_assignmentOperator4971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_assignmentExpressionNoIn5051 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x20000021480UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpressionNoIn5063 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_assignmentExpressionNoIn5070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression5102 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expression5108 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_expression5114 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn5142 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expressionNoIn5148 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn5154 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _SEMIC_in_semic5188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_semic5193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RBRACE_in_semic5198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOL_in_semic5205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MultiLineComment_in_semic5209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement5243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_statement5254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementTail_in_statement5261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_statementTail5284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statementTail5291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statementTail5298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statementTail5305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iterationStatement_in_statementTail5312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statementTail5319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statementTail5326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statementTail5333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statementTail5340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_statementTail5347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statementTail5354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statementTail5361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statementTail5368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block5398 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_block5401 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _RBRACE_in_block5407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableStatement5437 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement5441 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _COMMA_in_variableStatement5447 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement5453 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_variableStatement5461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclaration5485 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclaration5491 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclaration5496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn5524 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclarationNoIn5530 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_variableDeclarationNoIn5535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_emptyStatement5560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement5585 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_expressionStatement5587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifStatement5616 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_ifStatement5618 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_ifStatement5620 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_ifStatement5624 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_ifStatement5628 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _ELSE_in_ifStatement5636 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_ifStatement5640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doStatement_in_iterationStatement5670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_iterationStatement5679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_iterationStatement5689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_doStatement5708 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_doStatement5710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _WHILE_in_doStatement5712 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_doStatement5714 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_doStatement5716 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_doStatement5718 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_doStatement5720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement5740 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_whileStatement5743 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_whileStatement5746 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_whileStatement5748 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_whileStatement5751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forStatement5770 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_forStatement5773 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x651410028UL});
		public static readonly BitSet _forControl_in_forStatement5778 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_forStatement5783 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_forStatement5788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlVar_in_forControl5807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlExpression_in_forControl5816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlSemic_in_forControl5825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_forControlVar5853 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar5857 = new BitSet(new ulong[]{0x8000000UL,0x100UL,0x20UL});
		public static readonly BitSet _IN_in_forControlVar5871 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlVar5875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_forControlVar5900 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar5906 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlVar5917 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlVar5923 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlVar5931 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlVar5936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionNoIn_in_forControlExpression5975 = new BitSet(new ulong[]{0x0UL,0x100UL,0x20UL});
		public static readonly BitSet _IN_in_forControlExpression5992 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlExpression5996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlExpression6019 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlExpression6025 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlExpression6033 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlExpression6038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlSemic6074 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlSemic6080 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlSemic6088 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlSemic6093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_continueStatement6127 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x20UL});
		public static readonly BitSet _Identifier_in_continueStatement6135 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_continueStatement6142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_breakStatement6172 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x20UL});
		public static readonly BitSet _Identifier_in_breakStatement6180 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_breakStatement6187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_returnStatement6217 = new BitSet(new ulong[]{0x4040900A08000020UL,0x200416080460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_returnStatement6225 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_returnStatement6231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withStatement6252 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_withStatement6255 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_withStatement6260 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_withStatement6262 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_withStatement6267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_switchStatement6294 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_switchStatement6296 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_switchStatement6298 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_switchStatement6302 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _LBRACE_in_switchStatement6307 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _defaultClause_in_switchStatement6314 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _caseClause_in_switchStatement6320 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_switchStatement6327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseClause6350 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_caseClause6353 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_caseClause6357 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_caseClause6361 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _DEFAULT_in_defaultClause6386 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_defaultClause6389 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_defaultClause6393 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _Identifier_in_labelledStatement6420 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_labelledStatement6422 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_labelledStatement6426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_throwStatement6452 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_throwStatement6459 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_throwStatement6463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_tryStatement6488 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_tryStatement6493 = new BitSet(new ulong[]{0x200000000400000UL});
		public static readonly BitSet _catchClause_in_tryStatement6502 = new BitSet(new ulong[]{0x200000000400002UL});
		public static readonly BitSet _finallyClause_in_tryStatement6509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_tryStatement6519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_in_catchClause6543 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_catchClause6546 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_catchClause6551 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_catchClause6553 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_catchClause6556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause6574 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_finallyClause6577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionDeclaration6614 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_functionDeclaration6619 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionDeclaration6629 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionDeclaration6638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionExpression6665 = new BitSet(new ulong[]{0x0UL,0x4008000UL});
		public static readonly BitSet _Identifier_in_functionExpression6670 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionExpression6677 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionExpression6681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_formalParameterList6706 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x1UL});
		public static readonly BitSet _Identifier_in_formalParameterList6712 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _COMMA_in_formalParameterList6718 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_formalParameterList6722 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_formalParameterList6733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_functionBody6760 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _sourceElement_in_functionBody6763 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _RBRACE_in_functionBody6770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sourceElement_in_program6799 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _functionDeclaration_in_sourceElement6840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_sourceElement6849 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace  Jint.Parser 
