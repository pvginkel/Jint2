//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\ES3.g 2013-11-23 06:15:18

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System;
using System.Text;
using System.Globalization;
using Jint.Expressions;
using Jint.Debugger;


using System.Collections.Generic;
using Antlr.Runtime;

namespace  Jint.Parser 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class ES3Parser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "ADD", "ADDASS", "AND", "ANDASS", "ARGS", "ARRAY", "ASSIGN", "BLOCK", "BOOLEAN", "BREAK", "BSLASH", "BYFIELD", "BYINDEX", "BYTE", "BackslashSequence", "CALL", "CASE", "CATCH", "CEXPR", "CHAR", "CLASS", "COLON", "COMMA", "CONST", "CONTINUE", "CR", "CharacterEscapeSequence", "DEBUGGER", "DEC", "DEFAULT", "DELETE", "DIV", "DIVASS", "DO", "DOT", "DOUBLE", "DQUOTE", "DecimalDigit", "DecimalIntegerLiteral", "DecimalLiteral", "ELSE", "ENUM", "EOL", "EQ", "EXPORT", "EXPR", "EXTENDS", "EscapeSequence", "ExponentPart", "FALSE", "FF", "FINAL", "FINALLY", "FLOAT", "FOR", "FORITER", "FORSTEP", "FUNCTION", "GOTO", "GT", "GTE", "HexDigit", "HexEscapeSequence", "HexIntegerLiteral", "IF", "IMPLEMENTS", "IMPORT", "IN", "INC", "INSTANCEOF", "INT", "INTERFACE", "INV", "ITEM", "Identifier", "IdentifierNameASCIIStart", "IdentifierPart", "IdentifierStartASCII", "LABELLED", "LAND", "LBRACE", "LBRACK", "LF", "LONG", "LOR", "LPAREN", "LS", "LT", "LTE", "LineTerminator", "MOD", "MODASS", "MUL", "MULASS", "MultiLineComment", "NAMEDVALUE", "NATIVE", "NBSP", "NEG", "NEQ", "NEW", "NOT", "NSAME", "NULL", "OBJECT", "OR", "ORASS", "OctalDigit", "OctalEscapeSequence", "OctalIntegerLiteral", "PACKAGE", "PAREXPR", "PDEC", "PINC", "POS", "PRIVATE", "PROTECTED", "PS", "PUBLIC", "QUE", "RBRACE", "RBRACK", "RETURN", "RPAREN", "RegularExpressionChar", "RegularExpressionFirstChar", "RegularExpressionLiteral", "SAME", "SEMIC", "SHL", "SHLASS", "SHORT", "SHR", "SHRASS", "SHU", "SHUASS", "SP", "SQUOTE", "STATIC", "SUB", "SUBASS", "SUPER", "SWITCH", "SYNCHRONIZED", "SingleLineComment", "StringLiteral", "TAB", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "TYPEOF", "USP", "UnicodeEscapeSequence", "VAR", "VOID", "VOLATILE", "VT", "WHILE", "WITH", "WhiteSpace", "XOR", "XORASS", "ZeroToThree"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int ADD=5;
	public const int ADDASS=6;
	public const int AND=7;
	public const int ANDASS=8;
	public const int ARGS=9;
	public const int ARRAY=10;
	public const int ASSIGN=11;
	public const int BLOCK=12;
	public const int BOOLEAN=13;
	public const int BREAK=14;
	public const int BSLASH=15;
	public const int BYFIELD=16;
	public const int BYINDEX=17;
	public const int BYTE=18;
	public const int BackslashSequence=19;
	public const int CALL=20;
	public const int CASE=21;
	public const int CATCH=22;
	public const int CEXPR=23;
	public const int CHAR=24;
	public const int CLASS=25;
	public const int COLON=26;
	public const int COMMA=27;
	public const int CONST=28;
	public const int CONTINUE=29;
	public const int CR=30;
	public const int CharacterEscapeSequence=31;
	public const int DEBUGGER=32;
	public const int DEC=33;
	public const int DEFAULT=34;
	public const int DELETE=35;
	public const int DIV=36;
	public const int DIVASS=37;
	public const int DO=38;
	public const int DOT=39;
	public const int DOUBLE=40;
	public const int DQUOTE=41;
	public const int DecimalDigit=42;
	public const int DecimalIntegerLiteral=43;
	public const int DecimalLiteral=44;
	public const int ELSE=45;
	public const int ENUM=46;
	public const int EOL=47;
	public const int EQ=48;
	public const int EXPORT=49;
	public const int EXPR=50;
	public const int EXTENDS=51;
	public const int EscapeSequence=52;
	public const int ExponentPart=53;
	public const int FALSE=54;
	public const int FF=55;
	public const int FINAL=56;
	public const int FINALLY=57;
	public const int FLOAT=58;
	public const int FOR=59;
	public const int FORITER=60;
	public const int FORSTEP=61;
	public const int FUNCTION=62;
	public const int GOTO=63;
	public const int GT=64;
	public const int GTE=65;
	public const int HexDigit=66;
	public const int HexEscapeSequence=67;
	public const int HexIntegerLiteral=68;
	public const int IF=69;
	public const int IMPLEMENTS=70;
	public const int IMPORT=71;
	public const int IN=72;
	public const int INC=73;
	public const int INSTANCEOF=74;
	public const int INT=75;
	public const int INTERFACE=76;
	public const int INV=77;
	public const int ITEM=78;
	public const int Identifier=79;
	public const int IdentifierNameASCIIStart=80;
	public const int IdentifierPart=81;
	public const int IdentifierStartASCII=82;
	public const int LABELLED=83;
	public const int LAND=84;
	public const int LBRACE=85;
	public const int LBRACK=86;
	public const int LF=87;
	public const int LONG=88;
	public const int LOR=89;
	public const int LPAREN=90;
	public const int LS=91;
	public const int LT=92;
	public const int LTE=93;
	public const int LineTerminator=94;
	public const int MOD=95;
	public const int MODASS=96;
	public const int MUL=97;
	public const int MULASS=98;
	public const int MultiLineComment=99;
	public const int NAMEDVALUE=100;
	public const int NATIVE=101;
	public const int NBSP=102;
	public const int NEG=103;
	public const int NEQ=104;
	public const int NEW=105;
	public const int NOT=106;
	public const int NSAME=107;
	public const int NULL=108;
	public const int OBJECT=109;
	public const int OR=110;
	public const int ORASS=111;
	public const int OctalDigit=112;
	public const int OctalEscapeSequence=113;
	public const int OctalIntegerLiteral=114;
	public const int PACKAGE=115;
	public const int PAREXPR=116;
	public const int PDEC=117;
	public const int PINC=118;
	public const int POS=119;
	public const int PRIVATE=120;
	public const int PROTECTED=121;
	public const int PS=122;
	public const int PUBLIC=123;
	public const int QUE=124;
	public const int RBRACE=125;
	public const int RBRACK=126;
	public const int RETURN=127;
	public const int RPAREN=128;
	public const int RegularExpressionChar=129;
	public const int RegularExpressionFirstChar=130;
	public const int RegularExpressionLiteral=131;
	public const int SAME=132;
	public const int SEMIC=133;
	public const int SHL=134;
	public const int SHLASS=135;
	public const int SHORT=136;
	public const int SHR=137;
	public const int SHRASS=138;
	public const int SHU=139;
	public const int SHUASS=140;
	public const int SP=141;
	public const int SQUOTE=142;
	public const int STATIC=143;
	public const int SUB=144;
	public const int SUBASS=145;
	public const int SUPER=146;
	public const int SWITCH=147;
	public const int SYNCHRONIZED=148;
	public const int SingleLineComment=149;
	public const int StringLiteral=150;
	public const int TAB=151;
	public const int THIS=152;
	public const int THROW=153;
	public const int THROWS=154;
	public const int TRANSIENT=155;
	public const int TRUE=156;
	public const int TRY=157;
	public const int TYPEOF=158;
	public const int USP=159;
	public const int UnicodeEscapeSequence=160;
	public const int VAR=161;
	public const int VOID=162;
	public const int VOLATILE=163;
	public const int VT=164;
	public const int WHILE=165;
	public const int WITH=166;
	public const int WhiteSpace=167;
	public const int XOR=168;
	public const int XORASS=169;
	public const int ZeroToThree=170;

	// delegates
	// delegators

	public ES3Parser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public ES3Parser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
		

	public override string[] TokenNames { get { return ES3Parser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\ES3.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules

	partial void EnterRule_token();
	partial void LeaveRule_token();

	// $ANTLR start "token"
	// ..\\ES3.g:309:1: token : ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral );
	[GrammarRule("token")]
	private void token()
	{
		EnterRule_token();
		EnterRule("token", 1);
		TraceIn("token", 1);
		try { DebugEnterRule(GrammarFileName, "token");
		DebugLocation(309, 1);
		try
		{
			// ..\\ES3.g:310:2: ( reservedWord | Identifier | punctuator | numericLiteral | StringLiteral )
			int alt1=5;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case ABSTRACT:
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DEBUGGER:
			case DEFAULT:
			case DELETE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FALSE:
			case FINAL:
			case FINALLY:
			case FLOAT:
			case FOR:
			case FUNCTION:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case IMPORT:
			case IN:
			case INSTANCEOF:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case NEW:
			case NULL:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case RETURN:
			case SHORT:
			case STATIC:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case THIS:
			case THROW:
			case THROWS:
			case TRANSIENT:
			case TRUE:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case VOLATILE:
			case WHILE:
			case WITH:
				{
				alt1 = 1;
				}
				break;
			case Identifier:
				{
				alt1 = 2;
				}
				break;
			case ADD:
			case ADDASS:
			case AND:
			case ANDASS:
			case ASSIGN:
			case COLON:
			case COMMA:
			case DEC:
			case DIV:
			case DIVASS:
			case DOT:
			case EQ:
			case GT:
			case GTE:
			case INC:
			case INV:
			case LAND:
			case LBRACE:
			case LBRACK:
			case LOR:
			case LPAREN:
			case LT:
			case LTE:
			case MOD:
			case MODASS:
			case MUL:
			case MULASS:
			case NEQ:
			case NOT:
			case NSAME:
			case OR:
			case ORASS:
			case QUE:
			case RBRACE:
			case RBRACK:
			case RPAREN:
			case SAME:
			case SEMIC:
			case SHL:
			case SHLASS:
			case SHR:
			case SHRASS:
			case SHU:
			case SHUASS:
			case SUB:
			case SUBASS:
			case XOR:
			case XORASS:
				{
				alt1 = 3;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt1 = 4;
				}
				break;
			case StringLiteral:
				{
				alt1 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:310:4: reservedWord
				{
				DebugLocation(310, 4);
				PushFollow(Follow._reservedWord_in_token1759);
				reservedWord();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:311:4: Identifier
				{
				DebugLocation(311, 4);
				Match(input,Identifier,Follow._Identifier_in_token1764); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:312:4: punctuator
				{
				DebugLocation(312, 4);
				PushFollow(Follow._punctuator_in_token1769);
				punctuator();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:313:4: numericLiteral
				{
				DebugLocation(313, 4);
				PushFollow(Follow._numericLiteral_in_token1774);
				numericLiteral();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:314:4: StringLiteral
				{
				DebugLocation(314, 4);
				Match(input,StringLiteral,Follow._StringLiteral_in_token1779); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("token", 1);
			LeaveRule("token", 1);
			LeaveRule_token();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "token"); }
		return;

	}
	// $ANTLR end "token"


	partial void EnterRule_reservedWord();
	partial void LeaveRule_reservedWord();

	// $ANTLR start "reservedWord"
	// ..\\ES3.g:319:1: reservedWord : ( keyword | futureReservedWord | NULL | booleanLiteral );
	[GrammarRule("reservedWord")]
	private void reservedWord()
	{
		EnterRule_reservedWord();
		EnterRule("reservedWord", 2);
		TraceIn("reservedWord", 2);
		try { DebugEnterRule(GrammarFileName, "reservedWord");
		DebugLocation(319, 1);
		try
		{
			// ..\\ES3.g:320:2: ( keyword | futureReservedWord | NULL | booleanLiteral )
			int alt2=4;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case BREAK:
			case CASE:
			case CATCH:
			case CONTINUE:
			case DEFAULT:
			case DELETE:
			case DO:
			case ELSE:
			case FINALLY:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INSTANCEOF:
			case NEW:
			case RETURN:
			case SWITCH:
			case THIS:
			case THROW:
			case TRY:
			case TYPEOF:
			case VAR:
			case VOID:
			case WHILE:
			case WITH:
				{
				alt2 = 1;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DEBUGGER:
			case DOUBLE:
			case ENUM:
			case EXPORT:
			case EXTENDS:
			case FINAL:
			case FLOAT:
			case GOTO:
			case IMPLEMENTS:
			case IMPORT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case SUPER:
			case SYNCHRONIZED:
			case THROWS:
			case TRANSIENT:
			case VOLATILE:
				{
				alt2 = 2;
				}
				break;
			case NULL:
				{
				alt2 = 3;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:320:4: keyword
				{
				DebugLocation(320, 4);
				PushFollow(Follow._keyword_in_reservedWord1792);
				keyword();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:321:4: futureReservedWord
				{
				DebugLocation(321, 4);
				PushFollow(Follow._futureReservedWord_in_reservedWord1797);
				futureReservedWord();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:322:4: NULL
				{
				DebugLocation(322, 4);
				Match(input,NULL,Follow._NULL_in_reservedWord1802); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:323:4: booleanLiteral
				{
				DebugLocation(323, 4);
				PushFollow(Follow._booleanLiteral_in_reservedWord1807);
				booleanLiteral();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("reservedWord", 2);
			LeaveRule("reservedWord", 2);
			LeaveRule_reservedWord();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "reservedWord"); }
		return;

	}
	// $ANTLR end "reservedWord"


	partial void EnterRule_keyword();
	partial void LeaveRule_keyword();

	// $ANTLR start "keyword"
	// ..\\ES3.g:330:1: keyword : ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH );
	[GrammarRule("keyword")]
	private void keyword()
	{
		EnterRule_keyword();
		EnterRule("keyword", 3);
		TraceIn("keyword", 3);
		try { DebugEnterRule(GrammarFileName, "keyword");
		DebugLocation(330, 1);
		try
		{
			// ..\\ES3.g:331:2: ( BREAK | CASE | CATCH | CONTINUE | DEFAULT | DELETE | DO | ELSE | FINALLY | FOR | FUNCTION | IF | IN | INSTANCEOF | NEW | RETURN | SWITCH | THIS | THROW | TRY | TYPEOF | VAR | VOID | WHILE | WITH )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(331, 2);
			if (input.LA(1)==BREAK||(input.LA(1)>=CASE && input.LA(1)<=CATCH)||input.LA(1)==CONTINUE||(input.LA(1)>=DEFAULT && input.LA(1)<=DELETE)||input.LA(1)==DO||input.LA(1)==ELSE||input.LA(1)==FINALLY||input.LA(1)==FOR||input.LA(1)==FUNCTION||input.LA(1)==IF||input.LA(1)==IN||input.LA(1)==INSTANCEOF||input.LA(1)==NEW||input.LA(1)==RETURN||input.LA(1)==SWITCH||(input.LA(1)>=THIS && input.LA(1)<=THROW)||(input.LA(1)>=TRY && input.LA(1)<=TYPEOF)||(input.LA(1)>=VAR && input.LA(1)<=VOID)||(input.LA(1)>=WHILE && input.LA(1)<=WITH))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("keyword", 3);
			LeaveRule("keyword", 3);
			LeaveRule_keyword();
		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "keyword"); }
		return;

	}
	// $ANTLR end "keyword"


	partial void EnterRule_futureReservedWord();
	partial void LeaveRule_futureReservedWord();

	// $ANTLR start "futureReservedWord"
	// ..\\ES3.g:362:1: futureReservedWord : ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE );
	[GrammarRule("futureReservedWord")]
	private void futureReservedWord()
	{
		EnterRule_futureReservedWord();
		EnterRule("futureReservedWord", 4);
		TraceIn("futureReservedWord", 4);
		try { DebugEnterRule(GrammarFileName, "futureReservedWord");
		DebugLocation(362, 1);
		try
		{
			// ..\\ES3.g:363:2: ( ABSTRACT | BOOLEAN | BYTE | CHAR | CLASS | CONST | DEBUGGER | DOUBLE | ENUM | EXPORT | EXTENDS | FINAL | FLOAT | GOTO | IMPLEMENTS | IMPORT | INT | INTERFACE | LONG | NATIVE | PACKAGE | PRIVATE | PROTECTED | PUBLIC | SHORT | STATIC | SUPER | SYNCHRONIZED | THROWS | TRANSIENT | VOLATILE )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(363, 2);
			if (input.LA(1)==ABSTRACT||input.LA(1)==BOOLEAN||input.LA(1)==BYTE||(input.LA(1)>=CHAR && input.LA(1)<=CLASS)||input.LA(1)==CONST||input.LA(1)==DEBUGGER||input.LA(1)==DOUBLE||input.LA(1)==ENUM||input.LA(1)==EXPORT||input.LA(1)==EXTENDS||input.LA(1)==FINAL||input.LA(1)==FLOAT||input.LA(1)==GOTO||(input.LA(1)>=IMPLEMENTS && input.LA(1)<=IMPORT)||(input.LA(1)>=INT && input.LA(1)<=INTERFACE)||input.LA(1)==LONG||input.LA(1)==NATIVE||input.LA(1)==PACKAGE||(input.LA(1)>=PRIVATE && input.LA(1)<=PROTECTED)||input.LA(1)==PUBLIC||input.LA(1)==SHORT||input.LA(1)==STATIC||input.LA(1)==SUPER||input.LA(1)==SYNCHRONIZED||(input.LA(1)>=THROWS && input.LA(1)<=TRANSIENT)||input.LA(1)==VOLATILE)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("futureReservedWord", 4);
			LeaveRule("futureReservedWord", 4);
			LeaveRule_futureReservedWord();
		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "futureReservedWord"); }
		return;

	}
	// $ANTLR end "futureReservedWord"


	partial void EnterRule_punctuator();
	partial void LeaveRule_punctuator();

	// $ANTLR start "punctuator"
	// ..\\ES3.g:440:1: punctuator : ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS );
	[GrammarRule("punctuator")]
	private void punctuator()
	{
		EnterRule_punctuator();
		EnterRule("punctuator", 5);
		TraceIn("punctuator", 5);
		try { DebugEnterRule(GrammarFileName, "punctuator");
		DebugLocation(440, 1);
		try
		{
			// ..\\ES3.g:441:2: ( LBRACE | RBRACE | LPAREN | RPAREN | LBRACK | RBRACK | DOT | SEMIC | COMMA | LT | GT | LTE | GTE | EQ | NEQ | SAME | NSAME | ADD | SUB | MUL | MOD | INC | DEC | SHL | SHR | SHU | AND | OR | XOR | NOT | INV | LAND | LOR | QUE | COLON | ASSIGN | ADDASS | SUBASS | MULASS | MODASS | SHLASS | SHRASS | SHUASS | ANDASS | ORASS | XORASS | DIV | DIVASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(441, 2);
			if ((input.LA(1)>=ADD && input.LA(1)<=ANDASS)||input.LA(1)==ASSIGN||(input.LA(1)>=COLON && input.LA(1)<=COMMA)||input.LA(1)==DEC||(input.LA(1)>=DIV && input.LA(1)<=DIVASS)||input.LA(1)==DOT||input.LA(1)==EQ||(input.LA(1)>=GT && input.LA(1)<=GTE)||input.LA(1)==INC||input.LA(1)==INV||(input.LA(1)>=LAND && input.LA(1)<=LBRACK)||(input.LA(1)>=LOR && input.LA(1)<=LPAREN)||(input.LA(1)>=LT && input.LA(1)<=LTE)||(input.LA(1)>=MOD && input.LA(1)<=MULASS)||input.LA(1)==NEQ||(input.LA(1)>=NOT && input.LA(1)<=NSAME)||(input.LA(1)>=OR && input.LA(1)<=ORASS)||(input.LA(1)>=QUE && input.LA(1)<=RBRACK)||input.LA(1)==RPAREN||(input.LA(1)>=SAME && input.LA(1)<=SHLASS)||(input.LA(1)>=SHR && input.LA(1)<=SHUASS)||(input.LA(1)>=SUB && input.LA(1)<=SUBASS)||(input.LA(1)>=XOR && input.LA(1)<=XORASS))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("punctuator", 5);
			LeaveRule("punctuator", 5);
			LeaveRule_punctuator();
		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "punctuator"); }
		return;

	}
	// $ANTLR end "punctuator"


	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// ..\\ES3.g:495:1: literal returns [ExpressionSyntax value] : (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral );
	[GrammarRule("literal")]
	private ExpressionSyntax literal()
	{
		EnterRule_literal();
		EnterRule("literal", 6);
		TraceIn("literal", 6);
		ExpressionSyntax value = default(ExpressionSyntax);

		IToken exp1 = default(IToken);
		IToken exp4 = default(IToken);
		IToken exp5 = default(IToken);
		bool exp2 = default(bool);
		double exp3 = default(double);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(495, 1);
		try
		{
			// ..\\ES3.g:496:2: (exp1= NULL |exp2= booleanLiteral |exp3= numericLiteral |exp4= StringLiteral |exp5= RegularExpressionLiteral )
			int alt3=5;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case NULL:
				{
				alt3 = 1;
				}
				break;
			case FALSE:
			case TRUE:
				{
				alt3 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt3 = 3;
				}
				break;
			case StringLiteral:
				{
				alt3 = 4;
				}
				break;
			case RegularExpressionLiteral:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:496:4: exp1= NULL
				{
				DebugLocation(496, 8);
				exp1=(IToken)Match(input,NULL,Follow._NULL_in_literal2494); 
				DebugLocation(496, 14);
				 value = new IdentifierSyntax(exp1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:497:4: exp2= booleanLiteral
				{
				DebugLocation(497, 8);
				PushFollow(Follow._booleanLiteral_in_literal2503);
				exp2=booleanLiteral();
				PopFollow();

				DebugLocation(497, 24);
				 value = new ValueSyntax(exp2); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:498:4: exp3= numericLiteral
				{
				DebugLocation(498, 8);
				PushFollow(Follow._numericLiteral_in_literal2512);
				exp3=numericLiteral();
				PopFollow();

				DebugLocation(498, 24);
				 value = new ValueSyntax(exp3); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:499:4: exp4= StringLiteral
				{
				DebugLocation(499, 8);
				exp4=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_literal2521); 
				DebugLocation(499, 24);
				 value = new ValueSyntax(ExtractString(exp4.Text)); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:500:4: exp5= RegularExpressionLiteral
				{
				DebugLocation(500, 8);
				exp5=(IToken)Match(input,RegularExpressionLiteral,Follow._RegularExpressionLiteral_in_literal2531); 
				DebugLocation(500, 34);
				 value = new RegexpSyntax(ExtractRegExpPattern(exp5.Text), ExtractRegExpOption(exp5.Text)); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 6);
			LeaveRule("literal", 6);
			LeaveRule_literal();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return value;

	}
	// $ANTLR end "literal"


	partial void EnterRule_booleanLiteral();
	partial void LeaveRule_booleanLiteral();

	// $ANTLR start "booleanLiteral"
	// ..\\ES3.g:503:1: booleanLiteral returns [bool value] : ( TRUE | FALSE );
	[GrammarRule("booleanLiteral")]
	private bool booleanLiteral()
	{
		EnterRule_booleanLiteral();
		EnterRule("booleanLiteral", 7);
		TraceIn("booleanLiteral", 7);
		bool value = default(bool);

		try { DebugEnterRule(GrammarFileName, "booleanLiteral");
		DebugLocation(503, 1);
		try
		{
			// ..\\ES3.g:504:2: ( TRUE | FALSE )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==TRUE))
			{
				alt4 = 1;
			}
			else if ((LA4_0==FALSE))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:504:4: TRUE
				{
				DebugLocation(504, 4);
				Match(input,TRUE,Follow._TRUE_in_booleanLiteral2548); 
				DebugLocation(504, 9);
				 value = true; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:505:4: FALSE
				{
				DebugLocation(505, 4);
				Match(input,FALSE,Follow._FALSE_in_booleanLiteral2555); 
				DebugLocation(505, 10);
				 value = false; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("booleanLiteral", 7);
			LeaveRule("booleanLiteral", 7);
			LeaveRule_booleanLiteral();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "booleanLiteral"); }
		return value;

	}
	// $ANTLR end "booleanLiteral"


	partial void EnterRule_numericLiteral();
	partial void LeaveRule_numericLiteral();

	// $ANTLR start "numericLiteral"
	// ..\\ES3.g:550:1: numericLiteral returns [double value] : (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral );
	[GrammarRule("numericLiteral")]
	private double numericLiteral()
	{
		EnterRule_numericLiteral();
		EnterRule("numericLiteral", 8);
		TraceIn("numericLiteral", 8);
		double value = default(double);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken ex3 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "numericLiteral");
		DebugLocation(550, 1);
		try
		{
			// ..\\ES3.g:551:2: (ex1= DecimalLiteral |ex2= OctalIntegerLiteral |ex3= HexIntegerLiteral )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case DecimalLiteral:
				{
				alt5 = 1;
				}
				break;
			case OctalIntegerLiteral:
				{
				alt5 = 2;
				}
				break;
			case HexIntegerLiteral:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:551:4: ex1= DecimalLiteral
				{
				DebugLocation(551, 7);
				ex1=(IToken)Match(input,DecimalLiteral,Follow._DecimalLiteral_in_numericLiteral2766); 
				DebugLocation(551, 23);
				 value = double.Parse(ex1.Text, NumberStyles.Float, _numberFormatInfo); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:552:4: ex2= OctalIntegerLiteral
				{
				DebugLocation(552, 7);
				ex2=(IToken)Match(input,OctalIntegerLiteral,Follow._OctalIntegerLiteral_in_numericLiteral2775); 
				DebugLocation(552, 28);
				 value = System.Convert.ToInt64(ex2.Text, 8); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:553:4: ex3= HexIntegerLiteral
				{
				DebugLocation(553, 7);
				ex3=(IToken)Match(input,HexIntegerLiteral,Follow._HexIntegerLiteral_in_numericLiteral2784); 
				DebugLocation(553, 26);
				 value = System.Convert.ToInt64(ex3.Text, 16); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericLiteral", 8);
			LeaveRule("numericLiteral", 8);
			LeaveRule_numericLiteral();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "numericLiteral"); }
		return value;

	}
	// $ANTLR end "numericLiteral"


	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// ..\\ES3.g:640:1: primaryExpression returns [ExpressionSyntax value] : (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN );
	[GrammarRule("primaryExpression")]
	private ExpressionSyntax primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 9);
		TraceIn("primaryExpression", 9);
		ExpressionSyntax value = default(ExpressionSyntax);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		IToken lpar = default(IToken);
		ExpressionSyntax ex3 = default(ExpressionSyntax);
		ArrayDeclarationSyntax ex4 = default(ArrayDeclarationSyntax);
		JsonExpressionSyntax ex5 = default(JsonExpressionSyntax);
		ExpressionSyntax ex6 = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(640, 1);
		try
		{
			// ..\\ES3.g:641:2: (ex1= THIS |ex2= Identifier |ex3= literal |ex4= arrayLiteral |ex5= objectLiteral |lpar= LPAREN ex6= expression RPAREN )
			int alt6=6;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				alt6 = 1;
				}
				break;
			case Identifier:
				{
				alt6 = 2;
				}
				break;
			case DecimalLiteral:
			case FALSE:
			case HexIntegerLiteral:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case TRUE:
				{
				alt6 = 3;
				}
				break;
			case LBRACK:
				{
				alt6 = 4;
				}
				break;
			case LBRACE:
				{
				alt6 = 5;
				}
				break;
			case LPAREN:
				{
				alt6 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:641:4: ex1= THIS
				{
				DebugLocation(641, 7);
				ex1=(IToken)Match(input,THIS,Follow._THIS_in_primaryExpression3198); 
				DebugLocation(641, 13);
				 value = new IdentifierSyntax(ex1.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:642:4: ex2= Identifier
				{
				DebugLocation(642, 7);
				ex2=(IToken)Match(input,Identifier,Follow._Identifier_in_primaryExpression3207); 
				DebugLocation(642, 19);
				 value = new IdentifierSyntax(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:643:4: ex3= literal
				{
				DebugLocation(643, 7);
				PushFollow(Follow._literal_in_primaryExpression3216);
				ex3=literal();
				PopFollow();

				DebugLocation(643, 16);
				 value = ex3; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:644:4: ex4= arrayLiteral
				{
				DebugLocation(644, 7);
				PushFollow(Follow._arrayLiteral_in_primaryExpression3225);
				ex4=arrayLiteral();
				PopFollow();

				DebugLocation(644, 21);
				 value = ex4; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:645:4: ex5= objectLiteral
				{
				DebugLocation(645, 7);
				PushFollow(Follow._objectLiteral_in_primaryExpression3234);
				ex5=objectLiteral();
				PopFollow();

				DebugLocation(645, 22);
				 value = ex5; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:646:4: lpar= LPAREN ex6= expression RPAREN
				{
				DebugLocation(646, 8);
				lpar=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression3243); 
				DebugLocation(646, 19);
				PushFollow(Follow._expression_in_primaryExpression3247);
				ex6=expression();
				PopFollow();

				DebugLocation(646, 32);
				Match(input,RPAREN,Follow._RPAREN_in_primaryExpression3250); 
				DebugLocation(646, 40);
				 value = ex6; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 9);
			LeaveRule("primaryExpression", 9);
			LeaveRule_primaryExpression();
		}
		DebugLocation(647, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return value;

	}
	// $ANTLR end "primaryExpression"


	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();

	// $ANTLR start "arrayLiteral"
	// ..\\ES3.g:649:1: arrayLiteral returns [ArrayDeclarationSyntax value] : lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK ;
	[GrammarRule("arrayLiteral")]
	private ArrayDeclarationSyntax arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 10);
		TraceIn("arrayLiteral", 10);
		ArrayDeclarationSyntax value = default(ArrayDeclarationSyntax);

		IToken lb = default(IToken);
		SyntaxNode first = default(SyntaxNode);
		SyntaxNode follow = default(SyntaxNode);


		    var parameters = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(649, 1);
		try
		{
			// ..\\ES3.g:656:2: (lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK )
			DebugEnterAlt(1);
			// ..\\ES3.g:657:9: lb= LBRACK (first= arrayItem ( COMMA follow= arrayItem )* )? RBRACK
			{
			DebugLocation(657, 11);
			lb=(IToken)Match(input,LBRACK,Follow._LBRACK_in_arrayLiteral3289); 
			DebugLocation(658, 3);
			// ..\\ES3.g:658:3: (first= arrayItem ( COMMA follow= arrayItem )* )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==ADD||LA8_0==COMMA||LA8_0==DEC||LA8_0==DELETE||LA8_0==DecimalLiteral||LA8_0==FALSE||LA8_0==FUNCTION||LA8_0==HexIntegerLiteral||LA8_0==INC||LA8_0==INV||LA8_0==Identifier||(LA8_0>=LBRACE && LA8_0<=LBRACK)||LA8_0==LPAREN||(LA8_0>=NEW && LA8_0<=NOT)||LA8_0==NULL||LA8_0==OctalIntegerLiteral||LA8_0==RegularExpressionLiteral||LA8_0==SUB||LA8_0==StringLiteral||LA8_0==THIS||LA8_0==TRUE||LA8_0==TYPEOF||LA8_0==VOID))
			{
				alt8 = 1;
			}
			else if ((LA8_0==RBRACK))
			{
				int LA8_2 = input.LA(2);

				if (((( input.LA(1) == COMMA )||( input.LA(1) == RBRACK ))))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:659:13: first= arrayItem ( COMMA follow= arrayItem )*
				{
				DebugLocation(659, 18);
				PushFollow(Follow._arrayItem_in_arrayLiteral3309);
				first=arrayItem();
				PopFollow();

				DebugLocation(660, 13);
				 if(first != null) parameters.Add(first); 
				DebugLocation(661, 13);
				// ..\\ES3.g:661:13: ( COMMA follow= arrayItem )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==COMMA))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:662:17: COMMA follow= arrayItem
						{
						DebugLocation(662, 17);
						Match(input,COMMA,Follow._COMMA_in_arrayLiteral3355); 
						DebugLocation(662, 29);
						PushFollow(Follow._arrayItem_in_arrayLiteral3359);
						follow=arrayItem();
						PopFollow();

						DebugLocation(663, 17);
						 if(follow != null) parameters.Add(follow); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(666, 9);
			Match(input,RBRACK,Follow._RBRACK_in_arrayLiteral3413); 

			}


				value = new ArrayDeclarationSyntax(parameters);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayLiteral", 10);
			LeaveRule("arrayLiteral", 10);
			LeaveRule_arrayLiteral();
		}
		DebugLocation(667, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return value;

	}
	// $ANTLR end "arrayLiteral"


	partial void EnterRule_arrayItem();
	partial void LeaveRule_arrayItem();

	// $ANTLR start "arrayItem"
	// ..\\ES3.g:669:1: arrayItem returns [SyntaxNode value] : (expr= assignmentExpression |{...}?|{...}?) ;
	[GrammarRule("arrayItem")]
	private SyntaxNode arrayItem()
	{
		EnterRule_arrayItem();
		EnterRule("arrayItem", 11);
		TraceIn("arrayItem", 11);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax expr = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "arrayItem");
		DebugLocation(669, 1);
		try
		{
			// ..\\ES3.g:670:2: ( (expr= assignmentExpression |{...}?|{...}?) )
			DebugEnterAlt(1);
			// ..\\ES3.g:670:4: (expr= assignmentExpression |{...}?|{...}?)
			{
			DebugLocation(670, 4);
			// ..\\ES3.g:670:4: (expr= assignmentExpression |{...}?|{...}?)
			int alt9=3;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt9 = 1;
				}
				break;
			case COMMA:
				{
				int LA9_2 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RBRACK:
				{
				int LA9_3 = input.LA(2);

				if ((( input.LA(1) == COMMA )))
				{
					alt9 = 2;
				}
				else if ((( input.LA(1) == RBRACK )))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:670:6: expr= assignmentExpression
				{
				DebugLocation(670, 10);
				PushFollow(Follow._assignmentExpression_in_arrayItem3432);
				expr=assignmentExpression();
				PopFollow();

				DebugLocation(670, 33);
				 value = expr; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:670:54: {...}?
				{
				DebugLocation(670, 54);
				if (!(( input.LA(1) == COMMA )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == COMMA ");
				}
				DebugLocation(670, 80);
				 value = new IdentifierSyntax("undefined"); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:670:130: {...}?
				{
				DebugLocation(670, 130);
				if (!(( input.LA(1) == RBRACK )))
				{
					throw new FailedPredicateException(input, "arrayItem", " input.LA(1) == RBRACK ");
				}
				DebugLocation(670, 157);
				 value = null; 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayItem", 11);
			LeaveRule("arrayItem", 11);
			LeaveRule_arrayItem();
		}
		DebugLocation(672, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayItem"); }
		return value;

	}
	// $ANTLR end "arrayItem"


	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();

	// $ANTLR start "objectLiteral"
	// ..\\ES3.g:674:1: objectLiteral returns [JsonExpressionSyntax value] : lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE ;
	[GrammarRule("objectLiteral")]
	private JsonExpressionSyntax objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 12);
		TraceIn("objectLiteral", 12);
		JsonExpressionSyntax value = default(JsonExpressionSyntax);

		IToken lb = default(IToken);
		PropertyDeclarationSyntax first = default(PropertyDeclarationSyntax);
		PropertyDeclarationSyntax follow = default(PropertyDeclarationSyntax);


		    var builder = new JsonPropertyBuilder();

		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(674, 1);
		try
		{
			// ..\\ES3.g:681:2: (lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:682:7: lb= LBRACE (first= propertyAssignment ( COMMA follow= propertyAssignment )* )? RBRACE
			{
			DebugLocation(682, 9);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_objectLiteral3485); 
			DebugLocation(682, 17);
			// ..\\ES3.g:682:17: (first= propertyAssignment ( COMMA follow= propertyAssignment )* )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==DecimalLiteral||LA11_0==HexIntegerLiteral||LA11_0==Identifier||LA11_0==OctalIntegerLiteral||LA11_0==StringLiteral))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:683:9: first= propertyAssignment ( COMMA follow= propertyAssignment )*
				{
				DebugLocation(683, 14);
				PushFollow(Follow._propertyAssignment_in_objectLiteral3499);
				first=propertyAssignment();
				PopFollow();

				DebugLocation(683, 34);
				 builder.AddProperty(first); 
				DebugLocation(683, 66);
				// ..\\ES3.g:683:66: ( COMMA follow= propertyAssignment )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==COMMA))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:684:11: COMMA follow= propertyAssignment
						{
						DebugLocation(684, 11);
						Match(input,COMMA,Follow._COMMA_in_objectLiteral3515); 
						DebugLocation(685, 17);
						PushFollow(Follow._propertyAssignment_in_objectLiteral3529);
						follow=propertyAssignment();
						PopFollow();

						DebugLocation(685, 37);
						 builder.AddProperty(follow); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(688, 7);
			Match(input,RBRACE,Follow._RBRACE_in_objectLiteral3559); 

			}


				value = new JsonExpressionSyntax(builder.GetProperties());

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("objectLiteral", 12);
			LeaveRule("objectLiteral", 12);
			LeaveRule_objectLiteral();
		}
		DebugLocation(689, 1);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return value;

	}
	// $ANTLR end "objectLiteral"


	partial void EnterRule_propertyAssignment();
	partial void LeaveRule_propertyAssignment();

	// $ANTLR start "propertyAssignment"
	// ..\\ES3.g:691:1: propertyAssignment returns [PropertyDeclarationSyntax value] : (func= propertyFunctionAssignment |data= propertyValueAssignment );
	[GrammarRule("propertyAssignment")]
	private PropertyDeclarationSyntax propertyAssignment()
	{
		EnterRule_propertyAssignment();
		EnterRule("propertyAssignment", 13);
		TraceIn("propertyAssignment", 13);
		PropertyDeclarationSyntax value = default(PropertyDeclarationSyntax);

		PropertyDeclarationSyntax func = default(PropertyDeclarationSyntax);
		PropertyDeclarationSyntax data = default(PropertyDeclarationSyntax);

		try { DebugEnterRule(GrammarFileName, "propertyAssignment");
		DebugLocation(691, 1);
		try
		{
			// ..\\ES3.g:692:2: (func= propertyFunctionAssignment |data= propertyValueAssignment )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Identifier))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==DecimalLiteral||LA12_1==HexIntegerLiteral||LA12_1==Identifier||LA12_1==OctalIntegerLiteral||LA12_1==StringLiteral))
				{
					alt12 = 1;
				}
				else if ((LA12_1==COLON))
				{
					alt12 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA12_0==DecimalLiteral||LA12_0==HexIntegerLiteral||LA12_0==OctalIntegerLiteral||LA12_0==StringLiteral))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:693:9: func= propertyFunctionAssignment
				{
				DebugLocation(693, 13);
				PushFollow(Follow._propertyFunctionAssignment_in_propertyAssignment3585);
				func=propertyFunctionAssignment();
				PopFollow();

				DebugLocation(694, 9);
				 value = func; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:696:9: data= propertyValueAssignment
				{
				DebugLocation(696, 13);
				PushFollow(Follow._propertyValueAssignment_in_propertyAssignment3610);
				data=propertyValueAssignment();
				PopFollow();

				DebugLocation(697, 9);
				 value = data; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyAssignment", 13);
			LeaveRule("propertyAssignment", 13);
			LeaveRule_propertyAssignment();
		}
		DebugLocation(698, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyAssignment"); }
		return value;

	}
	// $ANTLR end "propertyAssignment"


	partial void EnterRule_propertyFunctionAssignment();
	partial void LeaveRule_propertyFunctionAssignment();

	// $ANTLR start "propertyFunctionAssignment"
	// ..\\ES3.g:700:1: propertyFunctionAssignment returns [PropertyDeclarationSyntax value] : acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody ;
	[GrammarRule("propertyFunctionAssignment")]
	private PropertyDeclarationSyntax propertyFunctionAssignment()
	{
		EnterRule_propertyFunctionAssignment();
		EnterRule("propertyFunctionAssignment", 14);
		TraceIn("propertyFunctionAssignment", 14);
		PropertyDeclarationSyntax value = default(PropertyDeclarationSyntax);

		PropertyExpressionType acc = default(PropertyExpressionType);
		string prop2 = default(string);
		List<string> parms = default(List<string>);
		BlockSyntax statements = default(BlockSyntax);


		    PropertyExpressionType mode;
		    BlockSyntax body;
		    List<string> parameters = null;
		    string name;

		try { DebugEnterRule(GrammarFileName, "propertyFunctionAssignment");
		DebugLocation(700, 4);
		try
		{
			// ..\\ES3.g:718:5: (acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:719:9: acc= accessor prop2= propertyName (parms= formalParameterList )? statements= functionBody
			{
			DebugLocation(719, 12);
			PushFollow(Follow._accessor_in_propertyFunctionAssignment3658);
			acc=accessor();
			PopFollow();

			DebugLocation(720, 9);
			 mode = acc; 
			DebugLocation(721, 14);
			PushFollow(Follow._propertyName_in_propertyFunctionAssignment3680);
			prop2=propertyName();
			PopFollow();

			DebugLocation(722, 9);
			 name = prop2; 
			DebugLocation(723, 9);
			// ..\\ES3.g:723:9: (parms= formalParameterList )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==LPAREN))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:724:13: parms= formalParameterList
				{
				DebugLocation(724, 18);
				PushFollow(Follow._formalParameterList_in_propertyFunctionAssignment3716);
				parms=formalParameterList();
				PopFollow();

				DebugLocation(725, 13);
				 parameters = parms; 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(727, 19);
			PushFollow(Follow._functionBody_in_propertyFunctionAssignment3753);
			statements=functionBody();
			PopFollow();

			DebugLocation(728, 9);
			 body = statements; 

			}


			    value = new PropertyDeclarationSyntax(
			        name,
			        new FunctionSyntax(
			            name,
			            parameters,
			            body
			        ),
			        mode
			    );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyFunctionAssignment", 14);
			LeaveRule("propertyFunctionAssignment", 14);
			LeaveRule_propertyFunctionAssignment();
		}
		DebugLocation(729, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyFunctionAssignment"); }
		return value;

	}
	// $ANTLR end "propertyFunctionAssignment"


	partial void EnterRule_propertyValueAssignment();
	partial void LeaveRule_propertyValueAssignment();

	// $ANTLR start "propertyValueAssignment"
	// ..\\ES3.g:731:1: propertyValueAssignment returns [PropertyDeclarationSyntax value] : prop1= propertyName COLON ass= assignmentExpression ;
	[GrammarRule("propertyValueAssignment")]
	private PropertyDeclarationSyntax propertyValueAssignment()
	{
		EnterRule_propertyValueAssignment();
		EnterRule("propertyValueAssignment", 15);
		TraceIn("propertyValueAssignment", 15);
		PropertyDeclarationSyntax value = default(PropertyDeclarationSyntax);

		string prop1 = default(string);
		ExpressionSyntax ass = default(ExpressionSyntax);


		    string name;
		    ExpressionSyntax expression;

		try { DebugEnterRule(GrammarFileName, "propertyValueAssignment");
		DebugLocation(731, 4);
		try
		{
			// ..\\ES3.g:743:5: (prop1= propertyName COLON ass= assignmentExpression )
			DebugEnterAlt(1);
			// ..\\ES3.g:744:9: prop1= propertyName COLON ass= assignmentExpression
			{
			DebugLocation(744, 14);
			PushFollow(Follow._propertyName_in_propertyValueAssignment3805);
			prop1=propertyName();
			PopFollow();

			DebugLocation(745, 9);
			 name = prop1; 
			DebugLocation(746, 9);
			Match(input,COLON,Follow._COLON_in_propertyValueAssignment3825); 
			DebugLocation(747, 12);
			PushFollow(Follow._assignmentExpression_in_propertyValueAssignment3837);
			ass=assignmentExpression();
			PopFollow();

			DebugLocation(748, 9);
			 expression = ass; 

			}


			    value = new PropertyDeclarationSyntax(
			        name,
			        expression,
			        PropertyExpressionType.Data
			    );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyValueAssignment", 15);
			LeaveRule("propertyValueAssignment", 15);
			LeaveRule_propertyValueAssignment();
		}
		DebugLocation(749, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyValueAssignment"); }
		return value;

	}
	// $ANTLR end "propertyValueAssignment"


	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();

	// $ANTLR start "accessor"
	// ..\\ES3.g:751:1: accessor returns [PropertyExpressionType value] : ex1= Identifier {...}? =>;
	[GrammarRule("accessor")]
	private PropertyExpressionType accessor()
	{
		EnterRule_accessor();
		EnterRule("accessor", 16);
		TraceIn("accessor", 16);
		PropertyExpressionType value = default(PropertyExpressionType);

		IToken ex1 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(751, 1);
		try
		{
			// ..\\ES3.g:752:2: (ex1= Identifier {...}? =>)
			DebugEnterAlt(1);
			// ..\\ES3.g:752:4: ex1= Identifier {...}? =>
			{
			DebugLocation(752, 7);
			ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_accessor3875); 
			DebugLocation(752, 19);
			if (!(( ex1.Text=="get" || ex1.Text=="set" )))
			{
				throw new FailedPredicateException(input, "accessor", " ex1.Text==\"get\" || ex1.Text==\"set\" ");
			}
			DebugLocation(752, 61);
			 if(ex1.Text=="get") value = PropertyExpressionType.Get; if(ex1.Text=="set") value =PropertyExpressionType.Set; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("accessor", 16);
			LeaveRule("accessor", 16);
			LeaveRule_accessor();
		}
		DebugLocation(753, 1);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return value;

	}
	// $ANTLR end "accessor"


	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();

	// $ANTLR start "propertyName"
	// ..\\ES3.g:755:1: propertyName returns [string value] : (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral );
	[GrammarRule("propertyName")]
	private string propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 17);
		TraceIn("propertyName", 17);
		string value = default(string);

		IToken ex1 = default(IToken);
		IToken ex2 = default(IToken);
		double ex3 = default(double);

		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(755, 1);
		try
		{
			// ..\\ES3.g:756:2: (ex1= Identifier |ex2= StringLiteral |ex3= numericLiteral )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case Identifier:
				{
				alt14 = 1;
				}
				break;
			case StringLiteral:
				{
				alt14 = 2;
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:756:4: ex1= Identifier
				{
				DebugLocation(756, 7);
				ex1=(IToken)Match(input,Identifier,Follow._Identifier_in_propertyName3897); 
				DebugLocation(756, 19);
				 value = ex1.Text; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:757:4: ex2= StringLiteral
				{
				DebugLocation(757, 7);
				ex2=(IToken)Match(input,StringLiteral,Follow._StringLiteral_in_propertyName3906); 
				DebugLocation(757, 22);
				 value = ExtractString(ex2.Text); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:758:4: ex3= numericLiteral
				{
				DebugLocation(758, 7);
				PushFollow(Follow._numericLiteral_in_propertyName3915);
				ex3=numericLiteral();
				PopFollow();

				DebugLocation(758, 23);
				 value = ex3.ToString(); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyName", 17);
			LeaveRule("propertyName", 17);
			LeaveRule_propertyName();
		}
		DebugLocation(759, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return value;

	}
	// $ANTLR end "propertyName"


	partial void EnterRule_memberExpression();
	partial void LeaveRule_memberExpression();

	// $ANTLR start "memberExpression"
	// ..\\ES3.g:770:1: memberExpression returns [ExpressionSyntax value] : (prim= primaryExpression |func= functionExpression );
	[GrammarRule("memberExpression")]
	private ExpressionSyntax memberExpression()
	{
		EnterRule_memberExpression();
		EnterRule("memberExpression", 18);
		TraceIn("memberExpression", 18);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax prim = default(ExpressionSyntax);
		FunctionSyntax func = default(FunctionSyntax);

		try { DebugEnterRule(GrammarFileName, "memberExpression");
		DebugLocation(770, 1);
		try
		{
			// ..\\ES3.g:771:2: (prim= primaryExpression |func= functionExpression )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==DecimalLiteral||LA15_0==FALSE||LA15_0==HexIntegerLiteral||LA15_0==Identifier||(LA15_0>=LBRACE && LA15_0<=LBRACK)||LA15_0==LPAREN||LA15_0==NULL||LA15_0==OctalIntegerLiteral||LA15_0==RegularExpressionLiteral||LA15_0==StringLiteral||LA15_0==THIS||LA15_0==TRUE))
			{
				alt15 = 1;
			}
			else if ((LA15_0==FUNCTION))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:771:4: prim= primaryExpression
				{
				DebugLocation(771, 8);
				PushFollow(Follow._primaryExpression_in_memberExpression3941);
				prim=primaryExpression();
				PopFollow();

				DebugLocation(771, 27);
				 value = prim; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:772:4: func= functionExpression
				{
				DebugLocation(772, 8);
				PushFollow(Follow._functionExpression_in_memberExpression3950);
				func=functionExpression();
				PopFollow();

				DebugLocation(772, 28);
				 value = func; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberExpression", 18);
			LeaveRule("memberExpression", 18);
			LeaveRule_memberExpression();
		}
		DebugLocation(773, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpression"); }
		return value;

	}
	// $ANTLR end "memberExpression"


	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\ES3.g:775:1: arguments returns [List<ExpressionSyntax> value] : LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN ;
	[GrammarRule("arguments")]
	private List<ExpressionSyntax> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 19);
		TraceIn("arguments", 19);
		List<ExpressionSyntax> value = default(List<ExpressionSyntax>);

		ExpressionSyntax first = default(ExpressionSyntax);
		ExpressionSyntax follow = default(ExpressionSyntax);


			value = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(775, 1);
		try
		{
			// ..\\ES3.g:779:2: ( LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:779:4: LPAREN (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RPAREN
			{
			DebugLocation(779, 4);
			Match(input,LPAREN,Follow._LPAREN_in_arguments3973); 
			DebugLocation(779, 11);
			// ..\\ES3.g:779:11: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==ADD||LA17_0==DEC||LA17_0==DELETE||LA17_0==DecimalLiteral||LA17_0==FALSE||LA17_0==FUNCTION||LA17_0==HexIntegerLiteral||LA17_0==INC||LA17_0==INV||LA17_0==Identifier||(LA17_0>=LBRACE && LA17_0<=LBRACK)||LA17_0==LPAREN||(LA17_0>=NEW && LA17_0<=NOT)||LA17_0==NULL||LA17_0==OctalIntegerLiteral||LA17_0==RegularExpressionLiteral||LA17_0==SUB||LA17_0==StringLiteral||LA17_0==THIS||LA17_0==TRUE||LA17_0==TYPEOF||LA17_0==VOID))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:779:13: first= assignmentExpression ( COMMA follow= assignmentExpression )*
				{
				DebugLocation(779, 18);
				PushFollow(Follow._assignmentExpression_in_arguments3979);
				first=assignmentExpression();
				PopFollow();

				DebugLocation(779, 40);
				 value.Add(first); 
				DebugLocation(779, 63);
				// ..\\ES3.g:779:63: ( COMMA follow= assignmentExpression )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==COMMA))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:779:65: COMMA follow= assignmentExpression
						{
						DebugLocation(779, 65);
						Match(input,COMMA,Follow._COMMA_in_arguments3985); 
						DebugLocation(779, 77);
						PushFollow(Follow._assignmentExpression_in_arguments3989);
						follow=assignmentExpression();
						PopFollow();

						DebugLocation(779, 99);
						 value.Add(follow); 

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(779, 128);
			Match(input,RPAREN,Follow._RPAREN_in_arguments3998); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 19);
			LeaveRule("arguments", 19);
			LeaveRule_arguments();
		}
		DebugLocation(781, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return value;

	}
	// $ANTLR end "arguments"


	partial void EnterRule_generics();
	partial void LeaveRule_generics();

	// $ANTLR start "generics"
	// ..\\ES3.g:783:1: generics returns [List<ExpressionSyntax> value] : LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE ;
	[GrammarRule("generics")]
	private List<ExpressionSyntax> generics()
	{
		EnterRule_generics();
		EnterRule("generics", 20);
		TraceIn("generics", 20);
		List<ExpressionSyntax> value = default(List<ExpressionSyntax>);

		ExpressionSyntax first = default(ExpressionSyntax);
		ExpressionSyntax follow = default(ExpressionSyntax);


			value = new List<ExpressionSyntax>();

		try { DebugEnterRule(GrammarFileName, "generics");
		DebugLocation(783, 1);
		try
		{
			// ..\\ES3.g:787:2: ( LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:787:4: LBRACE (first= assignmentExpression ( COMMA follow= assignmentExpression )* )? RBRACE
			{
			DebugLocation(787, 4);
			Match(input,LBRACE,Follow._LBRACE_in_generics4020); 
			DebugLocation(787, 11);
			// ..\\ES3.g:787:11: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==ADD||LA19_0==DEC||LA19_0==DELETE||LA19_0==DecimalLiteral||LA19_0==FALSE||LA19_0==FUNCTION||LA19_0==HexIntegerLiteral||LA19_0==INC||LA19_0==INV||LA19_0==Identifier||(LA19_0>=LBRACE && LA19_0<=LBRACK)||LA19_0==LPAREN||(LA19_0>=NEW && LA19_0<=NOT)||LA19_0==NULL||LA19_0==OctalIntegerLiteral||LA19_0==RegularExpressionLiteral||LA19_0==SUB||LA19_0==StringLiteral||LA19_0==THIS||LA19_0==TRUE||LA19_0==TYPEOF||LA19_0==VOID))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:787:13: first= assignmentExpression ( COMMA follow= assignmentExpression )*
				{
				DebugLocation(787, 18);
				PushFollow(Follow._assignmentExpression_in_generics4026);
				first=assignmentExpression();
				PopFollow();

				DebugLocation(787, 40);
				 value.Add(first); 
				DebugLocation(787, 63);
				// ..\\ES3.g:787:63: ( COMMA follow= assignmentExpression )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==COMMA))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:787:65: COMMA follow= assignmentExpression
						{
						DebugLocation(787, 65);
						Match(input,COMMA,Follow._COMMA_in_generics4032); 
						DebugLocation(787, 77);
						PushFollow(Follow._assignmentExpression_in_generics4036);
						follow=assignmentExpression();
						PopFollow();

						DebugLocation(787, 99);
						 value.Add(follow); 

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(787, 128);
			Match(input,RBRACE,Follow._RBRACE_in_generics4045); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generics", 20);
			LeaveRule("generics", 20);
			LeaveRule_generics();
		}
		DebugLocation(789, 1);
		} finally { DebugExitRule(GrammarFileName, "generics"); }
		return value;

	}
	// $ANTLR end "generics"


	partial void EnterRule_leftHandSideExpression();
	partial void LeaveRule_leftHandSideExpression();

	// $ANTLR start "leftHandSideExpression"
	// ..\\ES3.g:791:1: leftHandSideExpression returns [ExpressionSyntax value] : ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* ;
	[GrammarRule("leftHandSideExpression")]
	private ExpressionSyntax leftHandSideExpression()
	{
		EnterRule_leftHandSideExpression();
		EnterRule("leftHandSideExpression", 21);
		TraceIn("leftHandSideExpression", 21);
		ExpressionSyntax value = default(ExpressionSyntax);

		IToken id = default(IToken);
		ExpressionSyntax mem = default(ExpressionSyntax);
		List<ExpressionSyntax> gen = default(List<ExpressionSyntax>);
		List<ExpressionSyntax> arg = default(List<ExpressionSyntax>);
		ExpressionSyntax exp = default(ExpressionSyntax);


			List<ExpressionSyntax> gens = new List<ExpressionSyntax>();
		    bool isNew = false;
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "leftHandSideExpression");
		DebugLocation(791, 1);
		try
		{
			// ..\\ES3.g:803:2: ( ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:804:9: ( NEW )? mem= memberExpression ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			{
			DebugLocation(804, 9);
			// ..\\ES3.g:804:9: ( NEW )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==NEW))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:805:13: NEW
				{
				DebugLocation(805, 13);
				Match(input,NEW,Follow._NEW_in_leftHandSideExpression4094); 
				DebugLocation(806, 13);
				 isNew = true; 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(808, 9);
			PushFollow(Follow._memberExpression_in_leftHandSideExpression4128);
			mem=memberExpression();
			PopFollow();

			DebugLocation(809, 9);
			 value = mem; 
			DebugLocation(810, 6);
			// ..\\ES3.g:810:6: ( (gen= generics )? arg= arguments | LBRACK exp= expression RBRACK | DOT id= Identifier )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=4;
				try { DebugEnterDecision(22, false);
				switch (input.LA(1))
				{
				case LBRACE:
				case LPAREN:
					{
					alt22 = 1;
					}
					break;
				case LBRACK:
					{
					alt22 = 2;
					}
					break;
				case DOT:
					{
					alt22 = 3;
					}
					break;

				}

				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:811:7: (gen= generics )? arg= arguments
					{
					DebugLocation(811, 7);
					// ..\\ES3.g:811:7: (gen= generics )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==LBRACE))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:812:17: gen= generics
						{
						DebugLocation(812, 20);
						PushFollow(Follow._generics_in_leftHandSideExpression4173);
						gen=generics();
						PopFollow();

						DebugLocation(813, 17);
						 gens = gen; 

						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(815, 16);
					PushFollow(Follow._arguments_in_leftHandSideExpression4222);
					arg=arguments();
					PopFollow();

					DebugLocation(816, 13);

					                value = new MethodCallSyntax(
					                    value,
					                    arg,
					                    gens
					                );

					                if (isNew)
					                {
					                    isNew = false;
					                    value = new NewSyntax(value);
					                }
					            

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:831:13: LBRACK exp= expression RBRACK
					{
					DebugLocation(831, 13);
					Match(input,LBRACK,Follow._LBRACK_in_leftHandSideExpression4257); 
					DebugLocation(831, 23);
					PushFollow(Follow._expression_in_leftHandSideExpression4261);
					exp=expression();
					PopFollow();

					DebugLocation(831, 35);
					Match(input,RBRACK,Follow._RBRACK_in_leftHandSideExpression4263); 
					DebugLocation(832, 13);

					                value = new IndexerSyntax(
					                    value,
					                    exp
					                );
					            

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ..\\ES3.g:840:13: DOT id= Identifier
					{
					DebugLocation(840, 13);
					Match(input,DOT,Follow._DOT_in_leftHandSideExpression4300); 
					DebugLocation(840, 19);
					id=(IToken)Match(input,Identifier,Follow._Identifier_in_leftHandSideExpression4304); 
					DebugLocation(841, 13);

					                value = new PropertySyntax(
					                    value,
					                    id.Text
					                );
					            

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}


			    if (isNew)
			        value = new NewSyntax(value);

				value.Source = ExtractSourceCode(start, input.LT(-1));

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("leftHandSideExpression", 21);
			LeaveRule("leftHandSideExpression", 21);
			LeaveRule_leftHandSideExpression();
		}
		DebugLocation(848, 1);
		} finally { DebugExitRule(GrammarFileName, "leftHandSideExpression"); }
		return value;

	}
	// $ANTLR end "leftHandSideExpression"


	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();

	// $ANTLR start "postfixExpression"
	// ..\\ES3.g:860:1: postfixExpression returns [ExpressionSyntax value] : left= leftHandSideExpression (post= postfixOperator )? ;
	[GrammarRule("postfixExpression")]
	private ExpressionSyntax postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 22);
		TraceIn("postfixExpression", 22);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		SyntaxExpressionType post = default(SyntaxExpressionType);

		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(860, 1);
		try
		{
			// ..\\ES3.g:861:2: (left= leftHandSideExpression (post= postfixOperator )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:861:4: left= leftHandSideExpression (post= postfixOperator )?
			{
			DebugLocation(861, 8);
			PushFollow(Follow._leftHandSideExpression_in_postfixExpression4350);
			left=leftHandSideExpression();
			PopFollow();

			DebugLocation(861, 32);
			 value = left; if (input.LA(1) == INC || input.LA(1) == DEC) PromoteEol();  
			DebugLocation(861, 112);
			// ..\\ES3.g:861:112: (post= postfixOperator )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==DEC||LA23_0==INC))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:861:114: post= postfixOperator
				{
				DebugLocation(861, 118);
				PushFollow(Follow._postfixOperator_in_postfixExpression4358);
				post=postfixOperator();
				PopFollow();

				DebugLocation(861, 135);
				 value = new UnaryExpressionSyntax(post, value); 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("postfixExpression", 22);
			LeaveRule("postfixExpression", 22);
			LeaveRule_postfixExpression();
		}
		DebugLocation(862, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return value;

	}
	// $ANTLR end "postfixExpression"


	partial void EnterRule_postfixOperator();
	partial void LeaveRule_postfixOperator();

	// $ANTLR start "postfixOperator"
	// ..\\ES3.g:864:1: postfixOperator returns [SyntaxExpressionType value] : (op= INC |op= DEC );
	[GrammarRule("postfixOperator")]
	private SyntaxExpressionType postfixOperator()
	{
		EnterRule_postfixOperator();
		EnterRule("postfixOperator", 23);
		TraceIn("postfixOperator", 23);
		SyntaxExpressionType value = default(SyntaxExpressionType);

		IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "postfixOperator");
		DebugLocation(864, 1);
		try
		{
			// ..\\ES3.g:865:2: (op= INC |op= DEC )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==INC))
			{
				alt24 = 1;
			}
			else if ((LA24_0==DEC))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:865:4: op= INC
				{
				DebugLocation(865, 6);
				op=(IToken)Match(input,INC,Follow._INC_in_postfixOperator4380); 
				DebugLocation(865, 11);
				 op.Type = PINC; value = SyntaxExpressionType.PostIncrementAssign; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:866:4: op= DEC
				{
				DebugLocation(866, 6);
				op=(IToken)Match(input,DEC,Follow._DEC_in_postfixOperator4389); 
				DebugLocation(866, 11);
				 op.Type = PDEC; value = SyntaxExpressionType.PostDecrementAssign; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("postfixOperator", 23);
			LeaveRule("postfixOperator", 23);
			LeaveRule_postfixOperator();
		}
		DebugLocation(867, 1);
		} finally { DebugExitRule(GrammarFileName, "postfixOperator"); }
		return value;

	}
	// $ANTLR end "postfixOperator"


	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// ..\\ES3.g:873:1: unaryExpression returns [ExpressionSyntax value] : (post= postfixExpression |op= unaryOperator exp= unaryExpression );
	[GrammarRule("unaryExpression")]
	private ExpressionSyntax unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 24);
		TraceIn("unaryExpression", 24);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax post = default(ExpressionSyntax);
		SyntaxExpressionType op = default(SyntaxExpressionType);
		ExpressionSyntax exp = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(873, 1);
		try
		{
			// ..\\ES3.g:874:2: (post= postfixExpression |op= unaryOperator exp= unaryExpression )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==DecimalLiteral||LA25_0==FALSE||LA25_0==FUNCTION||LA25_0==HexIntegerLiteral||LA25_0==Identifier||(LA25_0>=LBRACE && LA25_0<=LBRACK)||LA25_0==LPAREN||LA25_0==NEW||LA25_0==NULL||LA25_0==OctalIntegerLiteral||LA25_0==RegularExpressionLiteral||LA25_0==StringLiteral||LA25_0==THIS||LA25_0==TRUE))
			{
				alt25 = 1;
			}
			else if ((LA25_0==ADD||LA25_0==DEC||LA25_0==DELETE||LA25_0==INC||LA25_0==INV||LA25_0==NOT||LA25_0==SUB||LA25_0==TYPEOF||LA25_0==VOID))
			{
				alt25 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:874:4: post= postfixExpression
				{
				DebugLocation(874, 8);
				PushFollow(Follow._postfixExpression_in_unaryExpression4412);
				post=postfixExpression();
				PopFollow();

				DebugLocation(874, 27);
				 value = post; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:875:4: op= unaryOperator exp= unaryExpression
				{
				DebugLocation(875, 6);
				PushFollow(Follow._unaryOperator_in_unaryExpression4421);
				op=unaryOperator();
				PopFollow();

				DebugLocation(875, 24);
				PushFollow(Follow._unaryExpression_in_unaryExpression4425);
				exp=unaryExpression();
				PopFollow();

				DebugLocation(875, 41);
				 value = new UnaryExpressionSyntax(op, exp); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 24);
			LeaveRule("unaryExpression", 24);
			LeaveRule_unaryExpression();
		}
		DebugLocation(876, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return value;

	}
	// $ANTLR end "unaryExpression"


	partial void EnterRule_unaryOperator();
	partial void LeaveRule_unaryOperator();

	// $ANTLR start "unaryOperator"
	// ..\\ES3.g:878:1: unaryOperator returns [SyntaxExpressionType value] : ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT );
	[GrammarRule("unaryOperator")]
	private SyntaxExpressionType unaryOperator()
	{
		EnterRule_unaryOperator();
		EnterRule("unaryOperator", 25);
		TraceIn("unaryOperator", 25);
		SyntaxExpressionType value = default(SyntaxExpressionType);

		IToken op = default(IToken);

		try { DebugEnterRule(GrammarFileName, "unaryOperator");
		DebugLocation(878, 1);
		try
		{
			// ..\\ES3.g:879:2: ( DELETE | VOID | TYPEOF | INC | DEC |op= ADD |op= SUB | INV | NOT )
			int alt26=9;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case DELETE:
				{
				alt26 = 1;
				}
				break;
			case VOID:
				{
				alt26 = 2;
				}
				break;
			case TYPEOF:
				{
				alt26 = 3;
				}
				break;
			case INC:
				{
				alt26 = 4;
				}
				break;
			case DEC:
				{
				alt26 = 5;
				}
				break;
			case ADD:
				{
				alt26 = 6;
				}
				break;
			case SUB:
				{
				alt26 = 7;
				}
				break;
			case INV:
				{
				alt26 = 8;
				}
				break;
			case NOT:
				{
				alt26 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:879:4: DELETE
				{
				DebugLocation(879, 4);
				Match(input,DELETE,Follow._DELETE_in_unaryOperator4443); 
				DebugLocation(879, 11);
				 value = SyntaxExpressionType.Delete; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:880:4: VOID
				{
				DebugLocation(880, 4);
				Match(input,VOID,Follow._VOID_in_unaryOperator4450); 
				DebugLocation(880, 9);
				 value = SyntaxExpressionType.Void; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:881:4: TYPEOF
				{
				DebugLocation(881, 4);
				Match(input,TYPEOF,Follow._TYPEOF_in_unaryOperator4457); 
				DebugLocation(881, 11);
				 value = SyntaxExpressionType.TypeOf; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:882:4: INC
				{
				DebugLocation(882, 4);
				Match(input,INC,Follow._INC_in_unaryOperator4464); 
				DebugLocation(882, 8);
				 value = SyntaxExpressionType.PreIncrementAssign; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:883:4: DEC
				{
				DebugLocation(883, 4);
				Match(input,DEC,Follow._DEC_in_unaryOperator4471); 
				DebugLocation(883, 8);
				 value = SyntaxExpressionType.PreDecrementAssign; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:884:4: op= ADD
				{
				DebugLocation(884, 6);
				op=(IToken)Match(input,ADD,Follow._ADD_in_unaryOperator4480); 
				DebugLocation(884, 11);
				 op.Type = POS; value = SyntaxExpressionType.UnaryPlus; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:885:4: op= SUB
				{
				DebugLocation(885, 6);
				op=(IToken)Match(input,SUB,Follow._SUB_in_unaryOperator4489); 
				DebugLocation(885, 11);
				 op.Type = NEG; value = SyntaxExpressionType.Negate; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:886:4: INV
				{
				DebugLocation(886, 4);
				Match(input,INV,Follow._INV_in_unaryOperator4496); 
				DebugLocation(886, 8);
				 value = SyntaxExpressionType.BitwiseNot; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:887:4: NOT
				{
				DebugLocation(887, 4);
				Match(input,NOT,Follow._NOT_in_unaryOperator4503); 
				DebugLocation(887, 8);
				 value = SyntaxExpressionType.Not; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryOperator", 25);
			LeaveRule("unaryOperator", 25);
			LeaveRule_unaryOperator();
		}
		DebugLocation(888, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
		return value;

	}
	// $ANTLR end "unaryOperator"


	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// ..\\ES3.g:894:1: multiplicativeExpression returns [ExpressionSyntax value] : left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private ExpressionSyntax multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 26);
		TraceIn("multiplicativeExpression", 26);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(894, 1);
		try
		{
			// ..\\ES3.g:898:2: (left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:898:4: left= unaryExpression ( ( MUL | DIV | MOD ) right= unaryExpression )*
			{
			DebugLocation(898, 8);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression4531);
			left=unaryExpression();
			PopFollow();

			DebugLocation(898, 25);
			 value = left; 
			DebugLocation(898, 44);
			// ..\\ES3.g:898:44: ( ( MUL | DIV | MOD ) right= unaryExpression )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==DIV||LA28_0==MOD||LA28_0==MUL))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:899:3: ( MUL | DIV | MOD ) right= unaryExpression
					{
					DebugLocation(899, 3);
					// ..\\ES3.g:899:3: ( MUL | DIV | MOD )
					int alt27=3;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					switch (input.LA(1))
					{
					case MUL:
						{
						alt27 = 1;
						}
						break;
					case DIV:
						{
						alt27 = 2;
						}
						break;
					case MOD:
						{
						alt27 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:899:5: MUL
						{
						DebugLocation(899, 5);
						Match(input,MUL,Follow._MUL_in_multiplicativeExpression4542); 
						DebugLocation(899, 9);
						 type= SyntaxExpressionType.Multiply; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:900:5: DIV
						{
						DebugLocation(900, 5);
						Match(input,DIV,Follow._DIV_in_multiplicativeExpression4551); 
						DebugLocation(900, 9);
						 type= SyntaxExpressionType.Divide; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:901:5: MOD
						{
						DebugLocation(901, 5);
						Match(input,MOD,Follow._MOD_in_multiplicativeExpression4559); 
						DebugLocation(901, 9);
						 type= SyntaxExpressionType.Modulo; 

						}
						break;

					}
					} finally { DebugExitSubRule(27); }

					DebugLocation(902, 8);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression4569);
					right=unaryExpression();
					PopFollow();

					DebugLocation(902, 25);
					 value = new BinaryExpressionSyntax(type, value, right); 

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 26);
			LeaveRule("multiplicativeExpression", 26);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(903, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return value;

	}
	// $ANTLR end "multiplicativeExpression"


	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// ..\\ES3.g:909:1: additiveExpression returns [ExpressionSyntax value] : left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private ExpressionSyntax additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 27);
		TraceIn("additiveExpression", 27);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(909, 1);
		try
		{
			// ..\\ES3.g:913:2: (left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:913:4: left= multiplicativeExpression ( ( ADD | SUB ) right= multiplicativeExpression )*
			{
			DebugLocation(913, 8);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression4599);
			left=multiplicativeExpression();
			PopFollow();

			DebugLocation(913, 34);
			 value = left; 
			DebugLocation(913, 53);
			// ..\\ES3.g:913:53: ( ( ADD | SUB ) right= multiplicativeExpression )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==ADD||LA30_0==SUB))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:914:3: ( ADD | SUB ) right= multiplicativeExpression
					{
					DebugLocation(914, 3);
					// ..\\ES3.g:914:3: ( ADD | SUB )
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==ADD))
					{
						alt29 = 1;
					}
					else if ((LA29_0==SUB))
					{
						alt29 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:914:5: ADD
						{
						DebugLocation(914, 5);
						Match(input,ADD,Follow._ADD_in_additiveExpression4610); 
						DebugLocation(914, 9);
						 type= SyntaxExpressionType.Add; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:915:5: SUB
						{
						DebugLocation(915, 5);
						Match(input,SUB,Follow._SUB_in_additiveExpression4618); 
						DebugLocation(915, 9);
						 type= SyntaxExpressionType.Subtract; 

						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(916, 8);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression4628);
					right=multiplicativeExpression();
					PopFollow();

					DebugLocation(916, 34);
					 value = new BinaryExpressionSyntax(type, value, right); 

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 27);
			LeaveRule("additiveExpression", 27);
			LeaveRule_additiveExpression();
		}
		DebugLocation(917, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return value;

	}
	// $ANTLR end "additiveExpression"


	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// ..\\ES3.g:923:1: shiftExpression returns [ExpressionSyntax value] : left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private ExpressionSyntax shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 28);
		TraceIn("shiftExpression", 28);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(923, 1);
		try
		{
			// ..\\ES3.g:927:2: (left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:927:4: left= additiveExpression ( ( SHL | SHR | SHU ) right= additiveExpression )*
			{
			DebugLocation(927, 8);
			PushFollow(Follow._additiveExpression_in_shiftExpression4659);
			left=additiveExpression();
			PopFollow();

			DebugLocation(927, 28);
			 value = left; 
			DebugLocation(927, 47);
			// ..\\ES3.g:927:47: ( ( SHL | SHR | SHU ) right= additiveExpression )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==SHL||LA32_0==SHR||LA32_0==SHU))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:928:3: ( SHL | SHR | SHU ) right= additiveExpression
					{
					DebugLocation(928, 3);
					// ..\\ES3.g:928:3: ( SHL | SHR | SHU )
					int alt31=3;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, false);
					switch (input.LA(1))
					{
					case SHL:
						{
						alt31 = 1;
						}
						break;
					case SHR:
						{
						alt31 = 2;
						}
						break;
					case SHU:
						{
						alt31 = 3;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:928:5: SHL
						{
						DebugLocation(928, 5);
						Match(input,SHL,Follow._SHL_in_shiftExpression4670); 
						DebugLocation(928, 9);
						 type= SyntaxExpressionType.LeftShift; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:929:5: SHR
						{
						DebugLocation(929, 5);
						Match(input,SHR,Follow._SHR_in_shiftExpression4678); 
						DebugLocation(929, 9);
						 type= SyntaxExpressionType.RightShift; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:930:5: SHU
						{
						DebugLocation(930, 5);
						Match(input,SHU,Follow._SHU_in_shiftExpression4686); 
						DebugLocation(930, 9);
						 type= SyntaxExpressionType.UnsignedRightShift; 

						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(931, 8);
					PushFollow(Follow._additiveExpression_in_shiftExpression4696);
					right=additiveExpression();
					PopFollow();

					DebugLocation(931, 28);
					 value = new BinaryExpressionSyntax(type, value, right); 

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftExpression", 28);
			LeaveRule("shiftExpression", 28);
			LeaveRule_shiftExpression();
		}
		DebugLocation(932, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return value;

	}
	// $ANTLR end "shiftExpression"


	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// ..\\ES3.g:938:1: relationalExpression returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private ExpressionSyntax relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 29);
		TraceIn("relationalExpression", 29);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(938, 1);
		try
		{
			// ..\\ES3.g:942:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:942:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			{
			DebugLocation(942, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpression4727);
			left=shiftExpression();
			PopFollow();

			DebugLocation(942, 25);
			 value = left; 
			DebugLocation(942, 44);
			// ..\\ES3.g:942:44: ( ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if (((LA34_0>=GT && LA34_0<=GTE)||LA34_0==IN||LA34_0==INSTANCEOF||(LA34_0>=LT && LA34_0<=LTE)))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:943:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN ) right= shiftExpression
					{
					DebugLocation(943, 3);
					// ..\\ES3.g:943:3: ( LT | GT | LTE | GTE | INSTANCEOF | IN )
					int alt33=6;
					try { DebugEnterSubRule(33);
					try { DebugEnterDecision(33, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt33 = 1;
						}
						break;
					case GT:
						{
						alt33 = 2;
						}
						break;
					case LTE:
						{
						alt33 = 3;
						}
						break;
					case GTE:
						{
						alt33 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt33 = 5;
						}
						break;
					case IN:
						{
						alt33 = 6;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:943:5: LT
						{
						DebugLocation(943, 5);
						Match(input,LT,Follow._LT_in_relationalExpression4738); 
						DebugLocation(943, 8);
						 type= SyntaxExpressionType.LessThan; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:944:5: GT
						{
						DebugLocation(944, 5);
						Match(input,GT,Follow._GT_in_relationalExpression4746); 
						DebugLocation(944, 8);
						 type= SyntaxExpressionType.GreaterThan; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:945:5: LTE
						{
						DebugLocation(945, 5);
						Match(input,LTE,Follow._LTE_in_relationalExpression4754); 
						DebugLocation(945, 9);
						 type= SyntaxExpressionType.LessThanOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:946:5: GTE
						{
						DebugLocation(946, 5);
						Match(input,GTE,Follow._GTE_in_relationalExpression4762); 
						DebugLocation(946, 9);
						 type= SyntaxExpressionType.GreaterThanOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:947:5: INSTANCEOF
						{
						DebugLocation(947, 5);
						Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpression4770); 
						DebugLocation(947, 16);
						 type= SyntaxExpressionType.InstanceOf;  

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// ..\\ES3.g:948:5: IN
						{
						DebugLocation(948, 5);
						Match(input,IN,Follow._IN_in_relationalExpression4778); 
						DebugLocation(948, 8);
						 type= SyntaxExpressionType.In;  

						}
						break;

					}
					} finally { DebugExitSubRule(33); }

					DebugLocation(949, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpression4788);
					right=shiftExpression();
					PopFollow();

					DebugLocation(949, 25);
					 value = new BinaryExpressionSyntax(type, value, right); 

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpression", 29);
			LeaveRule("relationalExpression", 29);
			LeaveRule_relationalExpression();
		}
		DebugLocation(950, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return value;

	}
	// $ANTLR end "relationalExpression"


	partial void EnterRule_relationalExpressionNoIn();
	partial void LeaveRule_relationalExpressionNoIn();

	// $ANTLR start "relationalExpressionNoIn"
	// ..\\ES3.g:952:1: relationalExpressionNoIn returns [ExpressionSyntax value] : left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* ;
	[GrammarRule("relationalExpressionNoIn")]
	private ExpressionSyntax relationalExpressionNoIn()
	{
		EnterRule_relationalExpressionNoIn();
		EnterRule("relationalExpressionNoIn", 30);
		TraceIn("relationalExpressionNoIn", 30);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "relationalExpressionNoIn");
		DebugLocation(952, 1);
		try
		{
			// ..\\ES3.g:956:2: (left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:956:4: left= shiftExpression ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			{
			DebugLocation(956, 8);
			PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4814);
			left=shiftExpression();
			PopFollow();

			DebugLocation(956, 25);
			 value = left; 
			DebugLocation(956, 44);
			// ..\\ES3.g:956:44: ( ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if (((LA36_0>=GT && LA36_0<=GTE)||LA36_0==INSTANCEOF||(LA36_0>=LT && LA36_0<=LTE)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:957:3: ( LT | GT | LTE | GTE | INSTANCEOF ) right= shiftExpression
					{
					DebugLocation(957, 3);
					// ..\\ES3.g:957:3: ( LT | GT | LTE | GTE | INSTANCEOF )
					int alt35=5;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, false);
					switch (input.LA(1))
					{
					case LT:
						{
						alt35 = 1;
						}
						break;
					case GT:
						{
						alt35 = 2;
						}
						break;
					case LTE:
						{
						alt35 = 3;
						}
						break;
					case GTE:
						{
						alt35 = 4;
						}
						break;
					case INSTANCEOF:
						{
						alt35 = 5;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:957:5: LT
						{
						DebugLocation(957, 5);
						Match(input,LT,Follow._LT_in_relationalExpressionNoIn4825); 
						DebugLocation(957, 8);
						 type= SyntaxExpressionType.LessThan; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:958:5: GT
						{
						DebugLocation(958, 5);
						Match(input,GT,Follow._GT_in_relationalExpressionNoIn4833); 
						DebugLocation(958, 8);
						 type= SyntaxExpressionType.GreaterThan; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:959:5: LTE
						{
						DebugLocation(959, 5);
						Match(input,LTE,Follow._LTE_in_relationalExpressionNoIn4841); 
						DebugLocation(959, 9);
						 type= SyntaxExpressionType.LessThanOrEqual; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:960:5: GTE
						{
						DebugLocation(960, 5);
						Match(input,GTE,Follow._GTE_in_relationalExpressionNoIn4849); 
						DebugLocation(960, 9);
						 type= SyntaxExpressionType.GreaterThanOrEqual; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// ..\\ES3.g:961:5: INSTANCEOF
						{
						DebugLocation(961, 5);
						Match(input,INSTANCEOF,Follow._INSTANCEOF_in_relationalExpressionNoIn4857); 
						DebugLocation(961, 16);
						 type= SyntaxExpressionType.InstanceOf;  

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(962, 8);
					PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn4868);
					right=shiftExpression();
					PopFollow();

					DebugLocation(962, 25);
					 value = new BinaryExpressionSyntax(type, value, right); 

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpressionNoIn", 30);
			LeaveRule("relationalExpressionNoIn", 30);
			LeaveRule_relationalExpressionNoIn();
		}
		DebugLocation(963, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "relationalExpressionNoIn"


	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// ..\\ES3.g:969:1: equalityExpression returns [ExpressionSyntax value] : left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private ExpressionSyntax equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 31);
		TraceIn("equalityExpression", 31);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(969, 1);
		try
		{
			// ..\\ES3.g:973:2: (left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:973:4: left= relationalExpression ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			{
			DebugLocation(973, 8);
			PushFollow(Follow._relationalExpression_in_equalityExpression4899);
			left=relationalExpression();
			PopFollow();

			DebugLocation(973, 30);
			 value = left; 
			DebugLocation(973, 49);
			// ..\\ES3.g:973:49: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpression )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==EQ||LA38_0==NEQ||LA38_0==NSAME||LA38_0==SAME))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:974:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpression
					{
					DebugLocation(974, 3);
					// ..\\ES3.g:974:3: ( EQ | NEQ | SAME | NSAME )
					int alt37=4;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt37 = 1;
						}
						break;
					case NEQ:
						{
						alt37 = 2;
						}
						break;
					case SAME:
						{
						alt37 = 3;
						}
						break;
					case NSAME:
						{
						alt37 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:974:5: EQ
						{
						DebugLocation(974, 5);
						Match(input,EQ,Follow._EQ_in_equalityExpression4910); 
						DebugLocation(974, 8);
						 type= SyntaxExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:975:5: NEQ
						{
						DebugLocation(975, 5);
						Match(input,NEQ,Follow._NEQ_in_equalityExpression4918); 
						DebugLocation(975, 9);
						 type= SyntaxExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:976:5: SAME
						{
						DebugLocation(976, 5);
						Match(input,SAME,Follow._SAME_in_equalityExpression4926); 
						DebugLocation(976, 10);
						 type= SyntaxExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:977:5: NSAME
						{
						DebugLocation(977, 5);
						Match(input,NSAME,Follow._NSAME_in_equalityExpression4934); 
						DebugLocation(977, 11);
						 type= SyntaxExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(978, 8);
					PushFollow(Follow._relationalExpression_in_equalityExpression4944);
					right=relationalExpression();
					PopFollow();

					DebugLocation(978, 30);
					 value = new BinaryExpressionSyntax(type, value, right); 

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpression", 31);
			LeaveRule("equalityExpression", 31);
			LeaveRule_equalityExpression();
		}
		DebugLocation(979, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return value;

	}
	// $ANTLR end "equalityExpression"


	partial void EnterRule_equalityExpressionNoIn();
	partial void LeaveRule_equalityExpressionNoIn();

	// $ANTLR start "equalityExpressionNoIn"
	// ..\\ES3.g:981:1: equalityExpressionNoIn returns [ExpressionSyntax value] : left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* ;
	[GrammarRule("equalityExpressionNoIn")]
	private ExpressionSyntax equalityExpressionNoIn()
	{
		EnterRule_equalityExpressionNoIn();
		EnterRule("equalityExpressionNoIn", 32);
		TraceIn("equalityExpressionNoIn", 32);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);


			SyntaxExpressionType type = SyntaxExpressionType.Unknown;

		try { DebugEnterRule(GrammarFileName, "equalityExpressionNoIn");
		DebugLocation(981, 1);
		try
		{
			// ..\\ES3.g:985:2: (left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:985:4: left= relationalExpressionNoIn ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			{
			DebugLocation(985, 8);
			PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn4970);
			left=relationalExpressionNoIn();
			PopFollow();

			DebugLocation(985, 34);
			 value = left; 
			DebugLocation(985, 53);
			// ..\\ES3.g:985:53: ( ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==EQ||LA40_0==NEQ||LA40_0==NSAME||LA40_0==SAME))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:986:3: ( EQ | NEQ | SAME | NSAME ) right= relationalExpressionNoIn
					{
					DebugLocation(986, 3);
					// ..\\ES3.g:986:3: ( EQ | NEQ | SAME | NSAME )
					int alt39=4;
					try { DebugEnterSubRule(39);
					try { DebugEnterDecision(39, false);
					switch (input.LA(1))
					{
					case EQ:
						{
						alt39 = 1;
						}
						break;
					case NEQ:
						{
						alt39 = 2;
						}
						break;
					case SAME:
						{
						alt39 = 3;
						}
						break;
					case NSAME:
						{
						alt39 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:986:5: EQ
						{
						DebugLocation(986, 5);
						Match(input,EQ,Follow._EQ_in_equalityExpressionNoIn4981); 
						DebugLocation(986, 8);
						 type= SyntaxExpressionType.Equal; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\ES3.g:987:5: NEQ
						{
						DebugLocation(987, 5);
						Match(input,NEQ,Follow._NEQ_in_equalityExpressionNoIn4989); 
						DebugLocation(987, 9);
						 type= SyntaxExpressionType.NotEqual; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\ES3.g:988:5: SAME
						{
						DebugLocation(988, 5);
						Match(input,SAME,Follow._SAME_in_equalityExpressionNoIn4997); 
						DebugLocation(988, 10);
						 type= SyntaxExpressionType.Same; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\ES3.g:989:5: NSAME
						{
						DebugLocation(989, 5);
						Match(input,NSAME,Follow._NSAME_in_equalityExpressionNoIn5005); 
						DebugLocation(989, 11);
						 type= SyntaxExpressionType.NotSame; 

						}
						break;

					}
					} finally { DebugExitSubRule(39); }

					DebugLocation(990, 8);
					PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn5015);
					right=relationalExpressionNoIn();
					PopFollow();

					DebugLocation(990, 34);
					 value = new BinaryExpressionSyntax(type, value, right); 

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpressionNoIn", 32);
			LeaveRule("equalityExpressionNoIn", 32);
			LeaveRule_equalityExpressionNoIn();
		}
		DebugLocation(991, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "equalityExpressionNoIn"


	partial void EnterRule_bitwiseANDExpression();
	partial void LeaveRule_bitwiseANDExpression();

	// $ANTLR start "bitwiseANDExpression"
	// ..\\ES3.g:997:1: bitwiseANDExpression returns [ExpressionSyntax value] : left= equalityExpression ( AND right= equalityExpression )* ;
	[GrammarRule("bitwiseANDExpression")]
	private ExpressionSyntax bitwiseANDExpression()
	{
		EnterRule_bitwiseANDExpression();
		EnterRule("bitwiseANDExpression", 33);
		TraceIn("bitwiseANDExpression", 33);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpression");
		DebugLocation(997, 1);
		try
		{
			// ..\\ES3.g:998:2: (left= equalityExpression ( AND right= equalityExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:998:4: left= equalityExpression ( AND right= equalityExpression )*
			{
			DebugLocation(998, 8);
			PushFollow(Follow._equalityExpression_in_bitwiseANDExpression5042);
			left=equalityExpression();
			PopFollow();

			DebugLocation(998, 28);
			 value = left; 
			DebugLocation(998, 47);
			// ..\\ES3.g:998:47: ( AND right= equalityExpression )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==AND))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:998:49: AND right= equalityExpression
					{
					DebugLocation(998, 49);
					Match(input,AND,Follow._AND_in_bitwiseANDExpression5048); 
					DebugLocation(998, 58);
					PushFollow(Follow._equalityExpression_in_bitwiseANDExpression5052);
					right=equalityExpression();
					PopFollow();

					DebugLocation(998, 78);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseAnd, value, right); 

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseANDExpression", 33);
			LeaveRule("bitwiseANDExpression", 33);
			LeaveRule_bitwiseANDExpression();
		}
		DebugLocation(999, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseANDExpression"


	partial void EnterRule_bitwiseANDExpressionNoIn();
	partial void LeaveRule_bitwiseANDExpressionNoIn();

	// $ANTLR start "bitwiseANDExpressionNoIn"
	// ..\\ES3.g:1001:1: bitwiseANDExpressionNoIn returns [ExpressionSyntax value] : left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* ;
	[GrammarRule("bitwiseANDExpressionNoIn")]
	private ExpressionSyntax bitwiseANDExpressionNoIn()
	{
		EnterRule_bitwiseANDExpressionNoIn();
		EnterRule("bitwiseANDExpressionNoIn", 34);
		TraceIn("bitwiseANDExpressionNoIn", 34);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpressionNoIn");
		DebugLocation(1001, 1);
		try
		{
			// ..\\ES3.g:1002:2: (left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1002:4: left= equalityExpressionNoIn ( AND right= equalityExpressionNoIn )*
			{
			DebugLocation(1002, 8);
			PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5073);
			left=equalityExpressionNoIn();
			PopFollow();

			DebugLocation(1002, 32);
			 value = left; 
			DebugLocation(1002, 51);
			// ..\\ES3.g:1002:51: ( AND right= equalityExpressionNoIn )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==AND))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1002:53: AND right= equalityExpressionNoIn
					{
					DebugLocation(1002, 53);
					Match(input,AND,Follow._AND_in_bitwiseANDExpressionNoIn5079); 
					DebugLocation(1002, 62);
					PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5083);
					right=equalityExpressionNoIn();
					PopFollow();

					DebugLocation(1002, 86);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseAnd, value, right); 

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseANDExpressionNoIn", 34);
			LeaveRule("bitwiseANDExpressionNoIn", 34);
			LeaveRule_bitwiseANDExpressionNoIn();
		}
		DebugLocation(1003, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "bitwiseANDExpressionNoIn"


	partial void EnterRule_bitwiseXORExpression();
	partial void LeaveRule_bitwiseXORExpression();

	// $ANTLR start "bitwiseXORExpression"
	// ..\\ES3.g:1005:1: bitwiseXORExpression returns [ExpressionSyntax value] : left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* ;
	[GrammarRule("bitwiseXORExpression")]
	private ExpressionSyntax bitwiseXORExpression()
	{
		EnterRule_bitwiseXORExpression();
		EnterRule("bitwiseXORExpression", 35);
		TraceIn("bitwiseXORExpression", 35);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpression");
		DebugLocation(1005, 1);
		try
		{
			// ..\\ES3.g:1006:2: (left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1006:4: left= bitwiseANDExpression ( XOR right= bitwiseANDExpression )*
			{
			DebugLocation(1006, 8);
			PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression5106);
			left=bitwiseANDExpression();
			PopFollow();

			DebugLocation(1006, 30);
			 value = left; 
			DebugLocation(1006, 49);
			// ..\\ES3.g:1006:49: ( XOR right= bitwiseANDExpression )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==XOR))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1006:51: XOR right= bitwiseANDExpression
					{
					DebugLocation(1006, 51);
					Match(input,XOR,Follow._XOR_in_bitwiseXORExpression5112); 
					DebugLocation(1006, 60);
					PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression5116);
					right=bitwiseANDExpression();
					PopFollow();

					DebugLocation(1006, 82);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseExclusiveOr, value, right); 

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXORExpression", 35);
			LeaveRule("bitwiseXORExpression", 35);
			LeaveRule_bitwiseXORExpression();
		}
		DebugLocation(1007, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseXORExpression"


	partial void EnterRule_bitwiseXORExpressionNoIn();
	partial void LeaveRule_bitwiseXORExpressionNoIn();

	// $ANTLR start "bitwiseXORExpressionNoIn"
	// ..\\ES3.g:1009:1: bitwiseXORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* ;
	[GrammarRule("bitwiseXORExpressionNoIn")]
	private ExpressionSyntax bitwiseXORExpressionNoIn()
	{
		EnterRule_bitwiseXORExpressionNoIn();
		EnterRule("bitwiseXORExpressionNoIn", 36);
		TraceIn("bitwiseXORExpressionNoIn", 36);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpressionNoIn");
		DebugLocation(1009, 1);
		try
		{
			// ..\\ES3.g:1010:2: (left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1010:4: left= bitwiseANDExpressionNoIn ( XOR right= bitwiseANDExpressionNoIn )*
			{
			DebugLocation(1010, 8);
			PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5139);
			left=bitwiseANDExpressionNoIn();
			PopFollow();

			DebugLocation(1010, 34);
			 value = left; 
			DebugLocation(1010, 53);
			// ..\\ES3.g:1010:53: ( XOR right= bitwiseANDExpressionNoIn )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==XOR))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1010:55: XOR right= bitwiseANDExpressionNoIn
					{
					DebugLocation(1010, 55);
					Match(input,XOR,Follow._XOR_in_bitwiseXORExpressionNoIn5145); 
					DebugLocation(1010, 64);
					PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5149);
					right=bitwiseANDExpressionNoIn();
					PopFollow();

					DebugLocation(1010, 90);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseExclusiveOr, value, right); 

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXORExpressionNoIn", 36);
			LeaveRule("bitwiseXORExpressionNoIn", 36);
			LeaveRule_bitwiseXORExpressionNoIn();
		}
		DebugLocation(1011, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "bitwiseXORExpressionNoIn"


	partial void EnterRule_bitwiseORExpression();
	partial void LeaveRule_bitwiseORExpression();

	// $ANTLR start "bitwiseORExpression"
	// ..\\ES3.g:1013:1: bitwiseORExpression returns [ExpressionSyntax value] : left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* ;
	[GrammarRule("bitwiseORExpression")]
	private ExpressionSyntax bitwiseORExpression()
	{
		EnterRule_bitwiseORExpression();
		EnterRule("bitwiseORExpression", 37);
		TraceIn("bitwiseORExpression", 37);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpression");
		DebugLocation(1013, 1);
		try
		{
			// ..\\ES3.g:1014:2: (left= bitwiseXORExpression ( OR right= bitwiseXORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1014:4: left= bitwiseXORExpression ( OR right= bitwiseXORExpression )*
			{
			DebugLocation(1014, 8);
			PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression5171);
			left=bitwiseXORExpression();
			PopFollow();

			DebugLocation(1014, 30);
			 value = left; 
			DebugLocation(1014, 49);
			// ..\\ES3.g:1014:49: ( OR right= bitwiseXORExpression )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==OR))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1014:51: OR right= bitwiseXORExpression
					{
					DebugLocation(1014, 51);
					Match(input,OR,Follow._OR_in_bitwiseORExpression5177); 
					DebugLocation(1014, 59);
					PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression5181);
					right=bitwiseXORExpression();
					PopFollow();

					DebugLocation(1014, 81);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseOr, value, right); 

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseORExpression", 37);
			LeaveRule("bitwiseORExpression", 37);
			LeaveRule_bitwiseORExpression();
		}
		DebugLocation(1015, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseORExpression"


	partial void EnterRule_bitwiseORExpressionNoIn();
	partial void LeaveRule_bitwiseORExpressionNoIn();

	// $ANTLR start "bitwiseORExpressionNoIn"
	// ..\\ES3.g:1017:1: bitwiseORExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* ;
	[GrammarRule("bitwiseORExpressionNoIn")]
	private ExpressionSyntax bitwiseORExpressionNoIn()
	{
		EnterRule_bitwiseORExpressionNoIn();
		EnterRule("bitwiseORExpressionNoIn", 38);
		TraceIn("bitwiseORExpressionNoIn", 38);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "bitwiseORExpressionNoIn");
		DebugLocation(1017, 1);
		try
		{
			// ..\\ES3.g:1018:2: (left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1018:4: left= bitwiseXORExpressionNoIn ( OR right= bitwiseXORExpressionNoIn )*
			{
			DebugLocation(1018, 8);
			PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5203);
			left=bitwiseXORExpressionNoIn();
			PopFollow();

			DebugLocation(1018, 34);
			 value = left; 
			DebugLocation(1018, 53);
			// ..\\ES3.g:1018:53: ( OR right= bitwiseXORExpressionNoIn )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==OR))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1018:55: OR right= bitwiseXORExpressionNoIn
					{
					DebugLocation(1018, 55);
					Match(input,OR,Follow._OR_in_bitwiseORExpressionNoIn5209); 
					DebugLocation(1018, 63);
					PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5213);
					right=bitwiseXORExpressionNoIn();
					PopFollow();

					DebugLocation(1018, 89);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.BitwiseOr, value, right); 

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseORExpressionNoIn", 38);
			LeaveRule("bitwiseORExpressionNoIn", 38);
			LeaveRule_bitwiseORExpressionNoIn();
		}
		DebugLocation(1019, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "bitwiseORExpressionNoIn"


	partial void EnterRule_logicalANDExpression();
	partial void LeaveRule_logicalANDExpression();

	// $ANTLR start "logicalANDExpression"
	// ..\\ES3.g:1025:1: logicalANDExpression returns [ExpressionSyntax value] : left= bitwiseORExpression ( LAND right= bitwiseORExpression )* ;
	[GrammarRule("logicalANDExpression")]
	private ExpressionSyntax logicalANDExpression()
	{
		EnterRule_logicalANDExpression();
		EnterRule("logicalANDExpression", 39);
		TraceIn("logicalANDExpression", 39);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpression");
		DebugLocation(1025, 1);
		try
		{
			// ..\\ES3.g:1026:2: (left= bitwiseORExpression ( LAND right= bitwiseORExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1026:3: left= bitwiseORExpression ( LAND right= bitwiseORExpression )*
			{
			DebugLocation(1026, 7);
			PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression5239);
			left=bitwiseORExpression();
			PopFollow();

			DebugLocation(1026, 29);
			 value = left; 
			DebugLocation(1026, 48);
			// ..\\ES3.g:1026:48: ( LAND right= bitwiseORExpression )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==LAND))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1026:50: LAND right= bitwiseORExpression
					{
					DebugLocation(1026, 50);
					Match(input,LAND,Follow._LAND_in_logicalANDExpression5245); 
					DebugLocation(1026, 60);
					PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression5249);
					right=bitwiseORExpression();
					PopFollow();

					DebugLocation(1026, 81);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.And, value, right); 

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalANDExpression", 39);
			LeaveRule("logicalANDExpression", 39);
			LeaveRule_logicalANDExpression();
		}
		DebugLocation(1027, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpression"); }
		return value;

	}
	// $ANTLR end "logicalANDExpression"


	partial void EnterRule_logicalANDExpressionNoIn();
	partial void LeaveRule_logicalANDExpressionNoIn();

	// $ANTLR start "logicalANDExpressionNoIn"
	// ..\\ES3.g:1029:1: logicalANDExpressionNoIn returns [ExpressionSyntax value] : left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* ;
	[GrammarRule("logicalANDExpressionNoIn")]
	private ExpressionSyntax logicalANDExpressionNoIn()
	{
		EnterRule_logicalANDExpressionNoIn();
		EnterRule("logicalANDExpressionNoIn", 40);
		TraceIn("logicalANDExpressionNoIn", 40);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalANDExpressionNoIn");
		DebugLocation(1029, 1);
		try
		{
			// ..\\ES3.g:1030:2: (left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1030:3: left= bitwiseORExpressionNoIn ( LAND right= bitwiseORExpressionNoIn )*
			{
			DebugLocation(1030, 7);
			PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5270);
			left=bitwiseORExpressionNoIn();
			PopFollow();

			DebugLocation(1030, 33);
			 value = left; 
			DebugLocation(1030, 52);
			// ..\\ES3.g:1030:52: ( LAND right= bitwiseORExpressionNoIn )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==LAND))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1030:54: LAND right= bitwiseORExpressionNoIn
					{
					DebugLocation(1030, 54);
					Match(input,LAND,Follow._LAND_in_logicalANDExpressionNoIn5276); 
					DebugLocation(1030, 64);
					PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5280);
					right=bitwiseORExpressionNoIn();
					PopFollow();

					DebugLocation(1030, 89);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.And, value, right); 

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalANDExpressionNoIn", 40);
			LeaveRule("logicalANDExpressionNoIn", 40);
			LeaveRule_logicalANDExpressionNoIn();
		}
		DebugLocation(1031, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "logicalANDExpressionNoIn"


	partial void EnterRule_logicalORExpression();
	partial void LeaveRule_logicalORExpression();

	// $ANTLR start "logicalORExpression"
	// ..\\ES3.g:1033:1: logicalORExpression returns [ExpressionSyntax value] : left= logicalANDExpression ( LOR right= logicalANDExpression )* ;
	[GrammarRule("logicalORExpression")]
	private ExpressionSyntax logicalORExpression()
	{
		EnterRule_logicalORExpression();
		EnterRule("logicalORExpression", 41);
		TraceIn("logicalORExpression", 41);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalORExpression");
		DebugLocation(1033, 1);
		try
		{
			// ..\\ES3.g:1034:2: (left= logicalANDExpression ( LOR right= logicalANDExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1034:4: left= logicalANDExpression ( LOR right= logicalANDExpression )*
			{
			DebugLocation(1034, 8);
			PushFollow(Follow._logicalANDExpression_in_logicalORExpression5302);
			left=logicalANDExpression();
			PopFollow();

			DebugLocation(1034, 30);
			 value = left; 
			DebugLocation(1034, 49);
			// ..\\ES3.g:1034:49: ( LOR right= logicalANDExpression )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==LOR))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1034:51: LOR right= logicalANDExpression
					{
					DebugLocation(1034, 51);
					Match(input,LOR,Follow._LOR_in_logicalORExpression5308); 
					DebugLocation(1034, 60);
					PushFollow(Follow._logicalANDExpression_in_logicalORExpression5312);
					right=logicalANDExpression();
					PopFollow();

					DebugLocation(1034, 82);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.Or, value, right); 

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalORExpression", 41);
			LeaveRule("logicalORExpression", 41);
			LeaveRule_logicalORExpression();
		}
		DebugLocation(1035, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpression"); }
		return value;

	}
	// $ANTLR end "logicalORExpression"


	partial void EnterRule_logicalORExpressionNoIn();
	partial void LeaveRule_logicalORExpressionNoIn();

	// $ANTLR start "logicalORExpressionNoIn"
	// ..\\ES3.g:1037:1: logicalORExpressionNoIn returns [ExpressionSyntax value] : left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* ;
	[GrammarRule("logicalORExpressionNoIn")]
	private ExpressionSyntax logicalORExpressionNoIn()
	{
		EnterRule_logicalORExpressionNoIn();
		EnterRule("logicalORExpressionNoIn", 42);
		TraceIn("logicalORExpressionNoIn", 42);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax left = default(ExpressionSyntax);
		ExpressionSyntax right = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "logicalORExpressionNoIn");
		DebugLocation(1037, 1);
		try
		{
			// ..\\ES3.g:1038:2: (left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1038:4: left= logicalANDExpressionNoIn ( LOR right= logicalANDExpressionNoIn )*
			{
			DebugLocation(1038, 8);
			PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn5334);
			left=logicalANDExpressionNoIn();
			PopFollow();

			DebugLocation(1038, 34);
			 value = left; 
			DebugLocation(1038, 53);
			// ..\\ES3.g:1038:53: ( LOR right= logicalANDExpressionNoIn )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==LOR))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1038:55: LOR right= logicalANDExpressionNoIn
					{
					DebugLocation(1038, 55);
					Match(input,LOR,Follow._LOR_in_logicalORExpressionNoIn5340); 
					DebugLocation(1038, 64);
					PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn5344);
					right=logicalANDExpressionNoIn();
					PopFollow();

					DebugLocation(1038, 90);
					 value = new BinaryExpressionSyntax(SyntaxExpressionType.Or, value, right); 

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalORExpressionNoIn", 42);
			LeaveRule("logicalORExpressionNoIn", 42);
			LeaveRule_logicalORExpressionNoIn();
		}
		DebugLocation(1039, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "logicalORExpressionNoIn"


	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// ..\\ES3.g:1045:1: conditionalExpression returns [ExpressionSyntax value] : expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? ;
	[GrammarRule("conditionalExpression")]
	private ExpressionSyntax conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 43);
		TraceIn("conditionalExpression", 43);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax expr1 = default(ExpressionSyntax);
		ExpressionSyntax expr2 = default(ExpressionSyntax);
		ExpressionSyntax expr3 = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1045, 1);
		try
		{
			// ..\\ES3.g:1046:2: (expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1046:4: expr1= logicalORExpression ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			{
			DebugLocation(1046, 9);
			PushFollow(Follow._logicalORExpression_in_conditionalExpression5371);
			expr1=logicalORExpression();
			PopFollow();

			DebugLocation(1046, 30);
			 value = expr1; 
			DebugLocation(1046, 50);
			// ..\\ES3.g:1046:50: ( QUE expr2= assignmentExpression COLON expr3= assignmentExpression )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==QUE))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1046:52: QUE expr2= assignmentExpression COLON expr3= assignmentExpression
				{
				DebugLocation(1046, 52);
				Match(input,QUE,Follow._QUE_in_conditionalExpression5377); 
				DebugLocation(1046, 61);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression5381);
				expr2=assignmentExpression();
				PopFollow();

				DebugLocation(1046, 83);
				Match(input,COLON,Follow._COLON_in_conditionalExpression5383); 
				DebugLocation(1046, 94);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression5387);
				expr3=assignmentExpression();
				PopFollow();

				DebugLocation(1046, 116);
				 value = new TernarySyntax(expr1, expr2, expr3); 

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpression", 43);
			LeaveRule("conditionalExpression", 43);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(1047, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return value;

	}
	// $ANTLR end "conditionalExpression"


	partial void EnterRule_conditionalExpressionNoIn();
	partial void LeaveRule_conditionalExpressionNoIn();

	// $ANTLR start "conditionalExpressionNoIn"
	// ..\\ES3.g:1049:1: conditionalExpressionNoIn returns [ExpressionSyntax value] : expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? ;
	[GrammarRule("conditionalExpressionNoIn")]
	private ExpressionSyntax conditionalExpressionNoIn()
	{
		EnterRule_conditionalExpressionNoIn();
		EnterRule("conditionalExpressionNoIn", 44);
		TraceIn("conditionalExpressionNoIn", 44);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax expr1 = default(ExpressionSyntax);
		ExpressionSyntax expr2 = default(ExpressionSyntax);
		ExpressionSyntax expr3 = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "conditionalExpressionNoIn");
		DebugLocation(1049, 1);
		try
		{
			// ..\\ES3.g:1050:2: (expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1050:4: expr1= logicalORExpressionNoIn ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			{
			DebugLocation(1050, 9);
			PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn5408);
			expr1=logicalORExpressionNoIn();
			PopFollow();

			DebugLocation(1050, 34);
			 value = expr1; 
			DebugLocation(1050, 54);
			// ..\\ES3.g:1050:54: ( QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==QUE))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1050:56: QUE expr2= assignmentExpressionNoIn COLON expr3= assignmentExpressionNoIn
				{
				DebugLocation(1050, 56);
				Match(input,QUE,Follow._QUE_in_conditionalExpressionNoIn5414); 
				DebugLocation(1050, 65);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn5418);
				expr2=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1050, 91);
				Match(input,COLON,Follow._COLON_in_conditionalExpressionNoIn5420); 
				DebugLocation(1050, 102);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn5424);
				expr3=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1050, 128);
				 value = new TernarySyntax(expr1, expr2, expr3); 

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpressionNoIn", 44);
			LeaveRule("conditionalExpressionNoIn", 44);
			LeaveRule_conditionalExpressionNoIn();
		}
		DebugLocation(1051, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "conditionalExpressionNoIn"


	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// ..\\ES3.g:1079:1: assignmentExpression returns [ExpressionSyntax value] : lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? ;
	[GrammarRule("assignmentExpression")]
	private ExpressionSyntax assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 45);
		TraceIn("assignmentExpression", 45);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax lhs = default(ExpressionSyntax);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ExpressionSyntax exp = default(ExpressionSyntax);


		    bool isLhs;

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(1079, 1);
		try
		{
			// ..\\ES3.g:1083:2: (lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1084:9: lhs= conditionalExpression ({...}?ass= assignmentOperator exp= assignmentExpression )?
			{
			DebugLocation(1084, 12);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression5465);
			lhs=conditionalExpression();
			PopFollow();

			DebugLocation(1085, 9);
			 value = lhs; isLhs = IsLeftHandSideAssign(lhs); 
			DebugLocation(1086, 6);
			// ..\\ES3.g:1086:6: ({...}?ass= assignmentOperator exp= assignmentExpression )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==ADDASS||LA53_0==ANDASS||LA53_0==ASSIGN||LA53_0==DIVASS||LA53_0==MODASS||LA53_0==MULASS||LA53_0==ORASS||LA53_0==SHLASS||LA53_0==SHRASS||LA53_0==SHUASS||LA53_0==SUBASS||LA53_0==XORASS))
			{
				int LA53_1 = input.LA(2);

				if ((( isLhs )))
				{
					alt53 = 1;
				}
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1087:13: {...}?ass= assignmentOperator exp= assignmentExpression
				{
				DebugLocation(1087, 13);
				if (!(( isLhs )))
				{
					throw new FailedPredicateException(input, "assignmentExpression", " isLhs ");
				}
				DebugLocation(1088, 16);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression5512);
				ass=assignmentOperator();
				PopFollow();

				DebugLocation(1089, 16);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression5528);
				exp=assignmentExpression();
				PopFollow();

				DebugLocation(1090, 13);

				                value = new AssignmentSyntax(
				                    ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)),
				                    value,
				                    exp
				                );
				            

				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpression", 45);
			LeaveRule("assignmentExpression", 45);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(1098, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return value;

	}
	// $ANTLR end "assignmentExpression"

	private sealed partial class assignmentOperator_return : ParserRuleReturnScope<IToken>
	{
		public assignmentOperator_return(ES3Parser grammar) {OnCreated(grammar);}
		partial void OnCreated(ES3Parser grammar);
	}

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();

	// $ANTLR start "assignmentOperator"
	// ..\\ES3.g:1100:1: assignmentOperator : ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS );
	[GrammarRule("assignmentOperator")]
	private ES3Parser.assignmentOperator_return assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 46);
		TraceIn("assignmentOperator", 46);
		ES3Parser.assignmentOperator_return retval = new ES3Parser.assignmentOperator_return(this);
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(1100, 1);
		try
		{
			// ..\\ES3.g:1101:2: ( ASSIGN | MULASS | DIVASS | MODASS | ADDASS | SUBASS | SHLASS | SHRASS | SHUASS | ANDASS | XORASS | ORASS )
			DebugEnterAlt(1);
			// ..\\ES3.g:
			{
			DebugLocation(1101, 2);
			if (input.LA(1)==ADDASS||input.LA(1)==ANDASS||input.LA(1)==ASSIGN||input.LA(1)==DIVASS||input.LA(1)==MODASS||input.LA(1)==MULASS||input.LA(1)==ORASS||input.LA(1)==SHLASS||input.LA(1)==SHRASS||input.LA(1)==SHUASS||input.LA(1)==SUBASS||input.LA(1)==XORASS)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentOperator", 46);
			LeaveRule("assignmentOperator", 46);
			LeaveRule_assignmentOperator();
		}
		DebugLocation(1113, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"


	partial void EnterRule_assignmentExpressionNoIn();
	partial void LeaveRule_assignmentExpressionNoIn();

	// $ANTLR start "assignmentExpressionNoIn"
	// ..\\ES3.g:1115:1: assignmentExpressionNoIn returns [ExpressionSyntax value] : lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? ;
	[GrammarRule("assignmentExpressionNoIn")]
	private ExpressionSyntax assignmentExpressionNoIn()
	{
		EnterRule_assignmentExpressionNoIn();
		EnterRule("assignmentExpressionNoIn", 47);
		TraceIn("assignmentExpressionNoIn", 47);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax lhs = default(ExpressionSyntax);
		ES3Parser.assignmentOperator_return ass = default(ES3Parser.assignmentOperator_return);
		ExpressionSyntax exp = default(ExpressionSyntax);


			bool isLhs;

		try { DebugEnterRule(GrammarFileName, "assignmentExpressionNoIn");
		DebugLocation(1115, 1);
		try
		{
			// ..\\ES3.g:1120:2: (lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1121:9: lhs= conditionalExpressionNoIn ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			{
			DebugLocation(1121, 12);
			PushFollow(Follow._conditionalExpressionNoIn_in_assignmentExpressionNoIn5651);
			lhs=conditionalExpressionNoIn();
			PopFollow();

			DebugLocation(1122, 9);
			 value = lhs; isLhs = IsLeftHandSideAssign(lhs); 
			DebugLocation(1123, 6);
			// ..\\ES3.g:1123:6: ({...}?ass= assignmentOperator exp= assignmentExpressionNoIn )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==ADDASS||LA54_0==ANDASS||LA54_0==ASSIGN||LA54_0==DIVASS||LA54_0==MODASS||LA54_0==MULASS||LA54_0==ORASS||LA54_0==SHLASS||LA54_0==SHRASS||LA54_0==SHUASS||LA54_0==SUBASS||LA54_0==XORASS))
			{
				int LA54_1 = input.LA(2);

				if ((( isLhs )))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1124:13: {...}?ass= assignmentOperator exp= assignmentExpressionNoIn
				{
				DebugLocation(1124, 13);
				if (!(( isLhs )))
				{
					throw new FailedPredicateException(input, "assignmentExpressionNoIn", " isLhs ");
				}
				DebugLocation(1125, 16);
				PushFollow(Follow._assignmentOperator_in_assignmentExpressionNoIn5699);
				ass=assignmentOperator();
				PopFollow();

				DebugLocation(1126, 16);
				PushFollow(Follow._assignmentExpressionNoIn_in_assignmentExpressionNoIn5715);
				exp=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1127, 13);

				                value = new AssignmentSyntax(
				                    ResolveAssignmentOperator((ass!=null?input.ToString(ass.Start,ass.Stop):null)),
				                    value,
				                    exp
				                );
				            

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpressionNoIn", 47);
			LeaveRule("assignmentExpressionNoIn", 47);
			LeaveRule_assignmentExpressionNoIn();
		}
		DebugLocation(1135, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpressionNoIn"); }
		return value;

	}
	// $ANTLR end "assignmentExpressionNoIn"


	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// ..\\ES3.g:1141:1: expression returns [ExpressionSyntax value] : first= assignmentExpression ( COMMA follow= assignmentExpression )* ;
	[GrammarRule("expression")]
	private ExpressionSyntax expression()
	{
		EnterRule_expression();
		EnterRule("expression", 48);
		TraceIn("expression", 48);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax first = default(ExpressionSyntax);
		ExpressionSyntax follow = default(ExpressionSyntax);


		    List<SyntaxNode> nodes = null;

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(1141, 1);
		try
		{
			// ..\\ES3.g:1149:2: (first= assignmentExpression ( COMMA follow= assignmentExpression )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1150:9: first= assignmentExpression ( COMMA follow= assignmentExpression )*
			{
			DebugLocation(1150, 14);
			PushFollow(Follow._assignmentExpression_in_expression5781);
			first=assignmentExpression();
			PopFollow();

			DebugLocation(1151, 9);
			 value = first; 
			DebugLocation(1152, 9);
			// ..\\ES3.g:1152:9: ( COMMA follow= assignmentExpression )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==COMMA))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1153:13: COMMA follow= assignmentExpression
					{
					DebugLocation(1153, 13);
					Match(input,COMMA,Follow._COMMA_in_expression5815); 
					DebugLocation(1154, 19);
					PushFollow(Follow._assignmentExpression_in_expression5831);
					follow=assignmentExpression();
					PopFollow();

					DebugLocation(1155, 13);

					                if (nodes == null)
					                    nodes = new List<SyntaxNode> { value };

					                nodes.Add(follow);
					            

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}


			    if (nodes != null)
			        value = new CommaOperatorSyntax(nodes);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 48);
			LeaveRule("expression", 48);
			LeaveRule_expression();
		}
		DebugLocation(1162, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return value;

	}
	// $ANTLR end "expression"


	partial void EnterRule_expressionNoIn();
	partial void LeaveRule_expressionNoIn();

	// $ANTLR start "expressionNoIn"
	// ..\\ES3.g:1164:1: expressionNoIn returns [ExpressionSyntax value] : first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* ;
	[GrammarRule("expressionNoIn")]
	private ExpressionSyntax expressionNoIn()
	{
		EnterRule_expressionNoIn();
		EnterRule("expressionNoIn", 49);
		TraceIn("expressionNoIn", 49);
		ExpressionSyntax value = default(ExpressionSyntax);

		ExpressionSyntax first = default(ExpressionSyntax);
		ExpressionSyntax follow = default(ExpressionSyntax);


		    List<SyntaxNode> nodes = null;

		try { DebugEnterRule(GrammarFileName, "expressionNoIn");
		DebugLocation(1164, 1);
		try
		{
			// ..\\ES3.g:1172:2: (first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1173:9: first= assignmentExpressionNoIn ( COMMA follow= assignmentExpressionNoIn )*
			{
			DebugLocation(1173, 14);
			PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn5891);
			first=assignmentExpressionNoIn();
			PopFollow();

			DebugLocation(1174, 9);
			 value = first; 
			DebugLocation(1175, 9);
			// ..\\ES3.g:1175:9: ( COMMA follow= assignmentExpressionNoIn )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==COMMA))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1176:13: COMMA follow= assignmentExpressionNoIn
					{
					DebugLocation(1176, 13);
					Match(input,COMMA,Follow._COMMA_in_expressionNoIn5925); 
					DebugLocation(1177, 19);
					PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn5941);
					follow=assignmentExpressionNoIn();
					PopFollow();

					DebugLocation(1178, 13);

					                if (nodes == null)
					                    nodes = new List<SyntaxNode> { value };

					                nodes.Add(follow);
					            

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}


			    if (nodes != null)
			        value = new CommaOperatorSyntax(nodes);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionNoIn", 49);
			LeaveRule("expressionNoIn", 49);
			LeaveRule_expressionNoIn();
		}
		DebugLocation(1185, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionNoIn"); }
		return value;

	}
	// $ANTLR end "expressionNoIn"


	partial void EnterRule_semic();
	partial void LeaveRule_semic();

	// $ANTLR start "semic"
	// ..\\ES3.g:1209:1: semic : ( SEMIC | EOF | RBRACE | EOL | MultiLineComment );
	[GrammarRule("semic")]
	private void semic()
	{
		EnterRule_semic();
		EnterRule("semic", 50);
		TraceIn("semic", 50);

			// Mark current position so we can unconsume a RBRACE.
			int marker = input.Mark();
			// Promote EOL if appropriate
			PromoteEol();

		try { DebugEnterRule(GrammarFileName, "semic");
		DebugLocation(1209, 1);
		try
		{
			// ..\\ES3.g:1217:2: ( SEMIC | EOF | RBRACE | EOL | MultiLineComment )
			int alt57=5;
			try { DebugEnterDecision(57, false);
			switch (input.LA(1))
			{
			case SEMIC:
				{
				alt57 = 1;
				}
				break;
			case EOF:
				{
				alt57 = 2;
				}
				break;
			case RBRACE:
				{
				alt57 = 3;
				}
				break;
			case EOL:
				{
				alt57 = 4;
				}
				break;
			case MultiLineComment:
				{
				alt57 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1217:4: SEMIC
				{
				DebugLocation(1217, 4);
				Match(input,SEMIC,Follow._SEMIC_in_semic5994); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1218:4: EOF
				{
				DebugLocation(1218, 4);
				Match(input,EOF,Follow._EOF_in_semic5999); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1219:4: RBRACE
				{
				DebugLocation(1219, 4);
				Match(input,RBRACE,Follow._RBRACE_in_semic6004); 
				DebugLocation(1219, 11);
				 input.Rewind(marker); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1220:4: EOL
				{
				DebugLocation(1220, 4);
				Match(input,EOL,Follow._EOL_in_semic6011); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1221:7: MultiLineComment
				{
				DebugLocation(1221, 7);
				Match(input,MultiLineComment,Follow._MultiLineComment_in_semic6019); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("semic", 50);
			LeaveRule("semic", 50);
			LeaveRule_semic();
		}
		DebugLocation(1222, 1);
		} finally { DebugExitRule(GrammarFileName, "semic"); }
		return;

	}
	// $ANTLR end "semic"


	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// ..\\ES3.g:1229:1: statement returns [SyntaxNode value] options {k=1; } : ({...}?b= block |{...}?func= functionDeclaration |st= statementTail );
	[GrammarRule("statement")]
	private SyntaxNode statement()
	{
		EnterRule_statement();
		EnterRule("statement", 51);
		TraceIn("statement", 51);
		SyntaxNode value = default(SyntaxNode);

		BlockSyntax b = default(BlockSyntax);
		SyntaxNode func = default(SyntaxNode);
		SyntaxNode st = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(1229, 1);
		try
		{
			// ..\\ES3.g:1235:2: ({...}?b= block |{...}?func= functionDeclaration |st= statementTail )
			int alt58=3;
			try { DebugEnterDecision(58, false);
			try
			{
				alt58 = dfa58.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1235:4: {...}?b= block
				{
				DebugLocation(1235, 4);
				if (!(( input.LA(1) == LBRACE )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == LBRACE ");
				}
				DebugLocation(1235, 32);
				PushFollow(Follow._block_in_statement6055);
				b=block();
				PopFollow();

				DebugLocation(1235, 39);
				 value = b; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1236:4: {...}?func= functionDeclaration
				{
				DebugLocation(1236, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "statement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1236, 37);
				PushFollow(Follow._functionDeclaration_in_statement6066);
				func=functionDeclaration();
				PopFollow();

				DebugLocation(1236, 58);
				 value = func; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1237:4: st= statementTail
				{
				DebugLocation(1237, 6);
				PushFollow(Follow._statementTail_in_statement6075);
				st=statementTail();
				PopFollow();

				DebugLocation(1237, 21);
				 value = st; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 51);
			LeaveRule("statement", 51);
			LeaveRule_statement();
		}
		DebugLocation(1238, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return value;

	}
	// $ANTLR end "statement"


	partial void EnterRule_statementTail();
	partial void LeaveRule_statementTail();

	// $ANTLR start "statementTail"
	// ..\\ES3.g:1240:1: statementTail returns [SyntaxNode value] : (vst= variableStatement |est= emptyStatement |exst= expressionStatement |ifst= ifStatement |itst= iterationStatement |cost= continueStatement |brst= breakStatement |rst= returnStatement |wist= withStatement |last= labelledStatement |swst= switchStatement |thst= throwStatement |trst= tryStatement );
	[GrammarRule("statementTail")]
	private SyntaxNode statementTail()
	{
		EnterRule_statementTail();
		EnterRule("statementTail", 52);
		TraceIn("statementTail", 52);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode vst = default(SyntaxNode);
		SyntaxNode est = default(SyntaxNode);
		SyntaxNode exst = default(SyntaxNode);
		SyntaxNode ifst = default(SyntaxNode);
		SyntaxNode itst = default(SyntaxNode);
		SyntaxNode cost = default(SyntaxNode);
		SyntaxNode brst = default(SyntaxNode);
		ReturnSyntax rst = default(ReturnSyntax);
		SyntaxNode wist = default(SyntaxNode);
		SyntaxNode last = default(SyntaxNode);
		SyntaxNode swst = default(SyntaxNode);
		SyntaxNode thst = default(SyntaxNode);
		TrySyntax trst = default(TrySyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "statementTail");
		DebugLocation(1240, 1);
		try
		{
			// ..\\ES3.g:1256:2: (vst= variableStatement |est= emptyStatement |exst= expressionStatement |ifst= ifStatement |itst= iterationStatement |cost= continueStatement |brst= breakStatement |rst= returnStatement |wist= withStatement |last= labelledStatement |swst= switchStatement |thst= throwStatement |trst= tryStatement )
			int alt59=13;
			try { DebugEnterDecision(59, false);
			try
			{
				alt59 = dfa59.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1256:4: vst= variableStatement
				{
				DebugLocation(1256, 7);
				PushFollow(Follow._variableStatement_in_statementTail6105);
				vst=variableStatement();
				PopFollow();

				DebugLocation(1256, 26);
				 value = vst; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1257:4: est= emptyStatement
				{
				DebugLocation(1257, 7);
				PushFollow(Follow._emptyStatement_in_statementTail6114);
				est=emptyStatement();
				PopFollow();

				DebugLocation(1257, 23);
				 value = est; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1258:4: exst= expressionStatement
				{
				DebugLocation(1258, 8);
				PushFollow(Follow._expressionStatement_in_statementTail6123);
				exst=expressionStatement();
				PopFollow();

				DebugLocation(1258, 29);
				 value = exst; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\ES3.g:1259:4: ifst= ifStatement
				{
				DebugLocation(1259, 8);
				PushFollow(Follow._ifStatement_in_statementTail6132);
				ifst=ifStatement();
				PopFollow();

				DebugLocation(1259, 21);
				 value = ifst; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\ES3.g:1260:4: itst= iterationStatement
				{
				DebugLocation(1260, 8);
				PushFollow(Follow._iterationStatement_in_statementTail6141);
				itst=iterationStatement();
				PopFollow();

				DebugLocation(1260, 28);
				 value = itst; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\ES3.g:1261:4: cost= continueStatement
				{
				DebugLocation(1261, 8);
				PushFollow(Follow._continueStatement_in_statementTail6150);
				cost=continueStatement();
				PopFollow();

				DebugLocation(1261, 27);
				 value = cost; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\ES3.g:1262:4: brst= breakStatement
				{
				DebugLocation(1262, 8);
				PushFollow(Follow._breakStatement_in_statementTail6159);
				brst=breakStatement();
				PopFollow();

				DebugLocation(1262, 24);
				 value = brst; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\ES3.g:1263:4: rst= returnStatement
				{
				DebugLocation(1263, 7);
				PushFollow(Follow._returnStatement_in_statementTail6168);
				rst=returnStatement();
				PopFollow();

				DebugLocation(1263, 24);
				 value = rst; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\ES3.g:1264:4: wist= withStatement
				{
				DebugLocation(1264, 8);
				PushFollow(Follow._withStatement_in_statementTail6177);
				wist=withStatement();
				PopFollow();

				DebugLocation(1264, 23);
				 value = wist; 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ..\\ES3.g:1265:4: last= labelledStatement
				{
				DebugLocation(1265, 8);
				PushFollow(Follow._labelledStatement_in_statementTail6186);
				last=labelledStatement();
				PopFollow();

				DebugLocation(1265, 27);
				 value = last; 

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// ..\\ES3.g:1266:4: swst= switchStatement
				{
				DebugLocation(1266, 8);
				PushFollow(Follow._switchStatement_in_statementTail6195);
				swst=switchStatement();
				PopFollow();

				DebugLocation(1266, 25);
				 value = swst; 

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// ..\\ES3.g:1267:4: thst= throwStatement
				{
				DebugLocation(1267, 8);
				PushFollow(Follow._throwStatement_in_statementTail6204);
				thst=throwStatement();
				PopFollow();

				DebugLocation(1267, 24);
				 value = thst; 

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// ..\\ES3.g:1268:4: trst= tryStatement
				{
				DebugLocation(1268, 8);
				PushFollow(Follow._tryStatement_in_statementTail6213);
				trst=tryStatement();
				PopFollow();

				DebugLocation(1268, 22);
				 value = trst; 

				}
				break;

			}

			    if (!(
			        value is ForSyntax ||
			        value is BlockSyntax ||
			        value is WhileSyntax ||
			        value is DoWhileSyntax ||
			        value is SwitchSyntax ||
			        value is TrySyntax ||
			        value is IfSyntax
			    ))
			        value.Source = ExtractSourceCode(start, input.LT(-1));

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statementTail", 52);
			LeaveRule("statementTail", 52);
			LeaveRule_statementTail();
		}
		DebugLocation(1269, 1);
		} finally { DebugExitRule(GrammarFileName, "statementTail"); }
		return value;

	}
	// $ANTLR end "statementTail"


	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// ..\\ES3.g:1273:1: block returns [BlockSyntax value] : lb= LBRACE (st= statement )* RBRACE ;
	[GrammarRule("block")]
	private BlockSyntax block()
	{
		EnterRule_block();
		EnterRule("block", 53);
		TraceIn("block", 53);
		BlockSyntax value = default(BlockSyntax);

		IToken lb = default(IToken);
		SyntaxNode st = default(SyntaxNode);


		    var statements = new List<SyntaxNode>();
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(1273, 1);
		try
		{
			// ..\\ES3.g:1284:2: (lb= LBRACE (st= statement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1285:9: lb= LBRACE (st= statement )* RBRACE
			{
			DebugLocation(1285, 11);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_block6252); 
			DebugLocation(1286, 9);
			// ..\\ES3.g:1286:9: (st= statement )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==ADD||LA60_0==BREAK||LA60_0==CONTINUE||LA60_0==DEC||LA60_0==DELETE||LA60_0==DO||LA60_0==DecimalLiteral||LA60_0==FALSE||LA60_0==FOR||LA60_0==FUNCTION||(LA60_0>=HexIntegerLiteral && LA60_0<=IF)||LA60_0==INC||LA60_0==INV||LA60_0==Identifier||(LA60_0>=LBRACE && LA60_0<=LBRACK)||LA60_0==LPAREN||(LA60_0>=NEW && LA60_0<=NOT)||LA60_0==NULL||LA60_0==OctalIntegerLiteral||LA60_0==RETURN||LA60_0==RegularExpressionLiteral||LA60_0==SEMIC||LA60_0==SUB||LA60_0==SWITCH||LA60_0==StringLiteral||(LA60_0>=THIS && LA60_0<=THROW)||(LA60_0>=TRUE && LA60_0<=TYPEOF)||(LA60_0>=VAR && LA60_0<=VOID)||(LA60_0>=WHILE && LA60_0<=WITH)))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1287:13: st= statement
					{
					DebugLocation(1287, 15);
					PushFollow(Follow._statement_in_block6278);
					st=statement();
					PopFollow();

					DebugLocation(1288, 13);
					 statements.Add(st); 

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(1290, 9);
			Match(input,RBRACE,Follow._RBRACE_in_block6313); 

			}


			    value = new BlockSyntax(statements)
			    {
			        Source = ExtractSourceCode(start, input.LT(-1))
			    };

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 53);
			LeaveRule("block", 53);
			LeaveRule_block();
		}
		DebugLocation(1291, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return value;

	}
	// $ANTLR end "block"


	partial void EnterRule_blockStatements();
	partial void LeaveRule_blockStatements();

	// $ANTLR start "blockStatements"
	// ..\\ES3.g:1295:1: blockStatements returns [BlockSyntax value] : (st= statement )* ;
	[GrammarRule("blockStatements")]
	private BlockSyntax blockStatements()
	{
		EnterRule_blockStatements();
		EnterRule("blockStatements", 54);
		TraceIn("blockStatements", 54);
		BlockSyntax value = default(BlockSyntax);

		SyntaxNode st = default(SyntaxNode);


		    var start = input.LT(1);
		    var tempBody = _currentBody;
		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "blockStatements");
		DebugLocation(1295, 1);
		try
		{
			// ..\\ES3.g:1306:2: ( (st= statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1307:9: (st= statement )*
			{
			DebugLocation(1307, 9);
			// ..\\ES3.g:1307:9: (st= statement )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==ADD||LA61_0==BREAK||LA61_0==CONTINUE||LA61_0==DEC||LA61_0==DELETE||LA61_0==DO||LA61_0==DecimalLiteral||LA61_0==FALSE||LA61_0==FOR||LA61_0==FUNCTION||(LA61_0>=HexIntegerLiteral && LA61_0<=IF)||LA61_0==INC||LA61_0==INV||LA61_0==Identifier||(LA61_0>=LBRACE && LA61_0<=LBRACK)||LA61_0==LPAREN||(LA61_0>=NEW && LA61_0<=NOT)||LA61_0==NULL||LA61_0==OctalIntegerLiteral||LA61_0==RETURN||LA61_0==RegularExpressionLiteral||LA61_0==SEMIC||LA61_0==SUB||LA61_0==SWITCH||LA61_0==StringLiteral||(LA61_0>=THIS && LA61_0<=THROW)||(LA61_0>=TRUE && LA61_0<=TYPEOF)||(LA61_0>=VAR && LA61_0<=VOID)||(LA61_0>=WHILE && LA61_0<=WITH)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1308:13: st= statement
					{
					DebugLocation(1308, 15);
					PushFollow(Follow._statement_in_blockStatements6362);
					st=statement();
					PopFollow();

					DebugLocation(1309, 13);
					 _currentBody.Statements.Add(st); 

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}


			    value = _currentBody.CreateBlock();
				value.Source = ExtractSourceCode(start, input.LT(-1));
			    _currentBody = tempBody;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockStatements", 54);
			LeaveRule("blockStatements", 54);
			LeaveRule_blockStatements();
		}
		DebugLocation(1311, 1);
		} finally { DebugExitRule(GrammarFileName, "blockStatements"); }
		return value;

	}
	// $ANTLR end "blockStatements"


	partial void EnterRule_variableStatement();
	partial void LeaveRule_variableStatement();

	// $ANTLR start "variableStatement"
	// ..\\ES3.g:1318:1: variableStatement returns [SyntaxNode value] : VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic ;
	[GrammarRule("variableStatement")]
	private SyntaxNode variableStatement()
	{
		EnterRule_variableStatement();
		EnterRule("variableStatement", 55);
		TraceIn("variableStatement", 55);
		SyntaxNode value = default(SyntaxNode);

		VariableDeclarationSyntax first = default(VariableDeclarationSyntax);
		VariableDeclarationSyntax follow = default(VariableDeclarationSyntax);


		    List<SyntaxNode> statements = null;

		try { DebugEnterRule(GrammarFileName, "variableStatement");
		DebugLocation(1318, 1);
		try
		{
			// ..\\ES3.g:1326:2: ( VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1327:9: VAR first= variableDeclaration ( COMMA follow= variableDeclaration )* semic
			{
			DebugLocation(1327, 9);
			Match(input,VAR,Follow._VAR_in_variableStatement6426); 
			DebugLocation(1327, 18);
			PushFollow(Follow._variableDeclaration_in_variableStatement6430);
			first=variableDeclaration();
			PopFollow();

			DebugLocation(1328, 9);

			            value = new VariableDeclarationSyntax(
			                first.Identifier,
			                first.Expression,
			                false
			            )
			            {
			                Target = _currentBody.DeclaredVariables.AddOrGet(first.Identifier)
			            };
			        
			DebugLocation(1338, 9);
			// ..\\ES3.g:1338:9: ( COMMA follow= variableDeclaration )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==COMMA))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1339:13: COMMA follow= variableDeclaration
					{
					DebugLocation(1339, 13);
					Match(input,COMMA,Follow._COMMA_in_variableStatement6464); 
					DebugLocation(1339, 25);
					PushFollow(Follow._variableDeclaration_in_variableStatement6468);
					follow=variableDeclaration();
					PopFollow();

					DebugLocation(1340, 13);

					                if (statements == null)
					                    statements = new List<SyntaxNode> { value };

					                statements.Add(
					                    new VariableDeclarationSyntax(
					                        follow.Identifier,
					                        follow.Expression,
					                        false
					                    )
					                    {
					                        Target = _currentBody.DeclaredVariables.AddOrGet(follow.Identifier)
					                    }
					                );
					            

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }

			DebugLocation(1356, 9);
			PushFollow(Follow._semic_in_variableStatement6503);
			semic();
			PopFollow();


			}


			    if (statements != null)
			        value = new CommaOperatorSyntax(statements);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableStatement", 55);
			LeaveRule("variableStatement", 55);
			LeaveRule_variableStatement();
		}
		DebugLocation(1357, 1);
		} finally { DebugExitRule(GrammarFileName, "variableStatement"); }
		return value;

	}
	// $ANTLR end "variableStatement"


	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\ES3.g:1359:1: variableDeclaration returns [VariableDeclarationSyntax value] : id= Identifier ( ASSIGN ass= assignmentExpression )? ;
	[GrammarRule("variableDeclaration")]
	private VariableDeclarationSyntax variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 56);
		TraceIn("variableDeclaration", 56);
		VariableDeclarationSyntax value = default(VariableDeclarationSyntax);

		IToken id = default(IToken);
		ExpressionSyntax ass = default(ExpressionSyntax);


		    ExpressionSyntax expression = null;

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(1359, 1);
		try
		{
			// ..\\ES3.g:1363:2: (id= Identifier ( ASSIGN ass= assignmentExpression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1364:9: id= Identifier ( ASSIGN ass= assignmentExpression )?
			{
			DebugLocation(1364, 11);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclaration6533); 
			DebugLocation(1365, 9);
			// ..\\ES3.g:1365:9: ( ASSIGN ass= assignmentExpression )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==ASSIGN))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1366:13: ASSIGN ass= assignmentExpression
				{
				DebugLocation(1366, 13);
				Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclaration6557); 
				DebugLocation(1366, 23);
				PushFollow(Follow._assignmentExpression_in_variableDeclaration6561);
				ass=assignmentExpression();
				PopFollow();

				DebugLocation(1367, 13);
				 expression = ass; 

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(1369, 9);
			 value = new VariableDeclarationSyntax(id.Text, expression, true); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 56);
			LeaveRule("variableDeclaration", 56);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(1370, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return value;

	}
	// $ANTLR end "variableDeclaration"


	partial void EnterRule_variableDeclarationNoIn();
	partial void LeaveRule_variableDeclarationNoIn();

	// $ANTLR start "variableDeclarationNoIn"
	// ..\\ES3.g:1372:1: variableDeclarationNoIn returns [VariableDeclarationSyntax value] : id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? ;
	[GrammarRule("variableDeclarationNoIn")]
	private VariableDeclarationSyntax variableDeclarationNoIn()
	{
		EnterRule_variableDeclarationNoIn();
		EnterRule("variableDeclarationNoIn", 57);
		TraceIn("variableDeclarationNoIn", 57);
		VariableDeclarationSyntax value = default(VariableDeclarationSyntax);

		IToken id = default(IToken);
		ExpressionSyntax ass = default(ExpressionSyntax);


			ExpressionSyntax expression = null;

		try { DebugEnterRule(GrammarFileName, "variableDeclarationNoIn");
		DebugLocation(1372, 1);
		try
		{
			// ..\\ES3.g:1376:2: (id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1377:9: id= Identifier ( ASSIGN ass= assignmentExpressionNoIn )?
			{
			DebugLocation(1377, 11);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn6627); 
			DebugLocation(1378, 9);
			// ..\\ES3.g:1378:9: ( ASSIGN ass= assignmentExpressionNoIn )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==ASSIGN))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1379:13: ASSIGN ass= assignmentExpressionNoIn
				{
				DebugLocation(1379, 13);
				Match(input,ASSIGN,Follow._ASSIGN_in_variableDeclarationNoIn6651); 
				DebugLocation(1379, 23);
				PushFollow(Follow._assignmentExpressionNoIn_in_variableDeclarationNoIn6655);
				ass=assignmentExpressionNoIn();
				PopFollow();

				DebugLocation(1380, 13);
				 expression = ass; 

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(1382, 9);
			 value = new VariableDeclarationSyntax(id.Text, expression, true); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationNoIn", 57);
			LeaveRule("variableDeclarationNoIn", 57);
			LeaveRule_variableDeclarationNoIn();
		}
		DebugLocation(1383, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationNoIn"); }
		return value;

	}
	// $ANTLR end "variableDeclarationNoIn"


	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();

	// $ANTLR start "emptyStatement"
	// ..\\ES3.g:1389:1: emptyStatement returns [SyntaxNode value] : SEMIC ;
	[GrammarRule("emptyStatement")]
	private SyntaxNode emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 58);
		TraceIn("emptyStatement", 58);
		SyntaxNode value = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(1389, 1);
		try
		{
			// ..\\ES3.g:1390:2: ( SEMIC )
			DebugEnterAlt(1);
			// ..\\ES3.g:1390:4: SEMIC
			{
			DebugLocation(1390, 4);
			Match(input,SEMIC,Follow._SEMIC_in_emptyStatement6710); 
			DebugLocation(1390, 10);
			 value = new EmptySyntax(); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("emptyStatement", 58);
			LeaveRule("emptyStatement", 58);
			LeaveRule_emptyStatement();
		}
		DebugLocation(1391, 1);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return value;

	}
	// $ANTLR end "emptyStatement"


	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();

	// $ANTLR start "expressionStatement"
	// ..\\ES3.g:1403:1: expressionStatement returns [SyntaxNode value] : e= expression semic ;
	[GrammarRule("expressionStatement")]
	private SyntaxNode expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 59);
		TraceIn("expressionStatement", 59);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(1403, 1);
		try
		{
			// ..\\ES3.g:1404:2: (e= expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1404:4: e= expression semic
			{
			DebugLocation(1404, 5);
			PushFollow(Follow._expression_in_expressionStatement6736);
			e=expression();
			PopFollow();

			DebugLocation(1404, 17);
			PushFollow(Follow._semic_in_expressionStatement6738);
			semic();
			PopFollow();

			DebugLocation(1404, 23);
			 value = new ExpressionStatementSyntax(e); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionStatement", 59);
			LeaveRule("expressionStatement", 59);
			LeaveRule_expressionStatement();
		}
		DebugLocation(1405, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return value;

	}
	// $ANTLR end "expressionStatement"


	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();

	// $ANTLR start "ifStatement"
	// ..\\ES3.g:1411:1: ifStatement returns [SyntaxNode value] : IF LPAREN e= expression RPAREN then= statement ({...}? ELSE els= statement )? ;
	[GrammarRule("ifStatement")]
	private SyntaxNode ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 60);
		TraceIn("ifStatement", 60);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);
		SyntaxNode then = default(SyntaxNode);
		SyntaxNode els = default(SyntaxNode);


		    SyntaxNode elseStatement = null;

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(1411, 1);
		try
		{
			// ..\\ES3.g:1416:2: ( IF LPAREN e= expression RPAREN then= statement ({...}? ELSE els= statement )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1417:9: IF LPAREN e= expression RPAREN then= statement ({...}? ELSE els= statement )?
			{
			DebugLocation(1417, 9);
			Match(input,IF,Follow._IF_in_ifStatement6774); 
			DebugLocation(1417, 12);
			Match(input,LPAREN,Follow._LPAREN_in_ifStatement6776); 
			DebugLocation(1417, 20);
			PushFollow(Follow._expression_in_ifStatement6780);
			e=expression();
			PopFollow();

			DebugLocation(1417, 32);
			Match(input,RPAREN,Follow._RPAREN_in_ifStatement6782); 
			DebugLocation(1417, 43);
			PushFollow(Follow._statement_in_ifStatement6786);
			then=statement();
			PopFollow();

			DebugLocation(1418, 9);
			// ..\\ES3.g:1418:9: ({...}? ELSE els= statement )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==ELSE))
			{
				int LA65_1 = input.LA(2);

				if ((( input.LA(1) == ELSE )))
				{
					alt65 = 1;
				}
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1419:13: {...}? ELSE els= statement
				{
				DebugLocation(1419, 13);
				if (!(( input.LA(1) == ELSE )))
				{
					throw new FailedPredicateException(input, "ifStatement", " input.LA(1) == ELSE ");
				}
				DebugLocation(1420, 13);
				Match(input,ELSE,Follow._ELSE_in_ifStatement6824); 
				DebugLocation(1420, 21);
				PushFollow(Follow._statement_in_ifStatement6828);
				els=statement();
				PopFollow();

				DebugLocation(1421, 13);
				 elseStatement = els; 

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(1423, 9);
			 value = new IfSyntax(e, then, elseStatement); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifStatement", 60);
			LeaveRule("ifStatement", 60);
			LeaveRule_ifStatement();
		}
		DebugLocation(1424, 1);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return value;

	}
	// $ANTLR end "ifStatement"


	partial void EnterRule_iterationStatement();
	partial void LeaveRule_iterationStatement();

	// $ANTLR start "iterationStatement"
	// ..\\ES3.g:1430:1: iterationStatement returns [SyntaxNode value] : (dos= doStatement |wh= whileStatement |fo= forStatement );
	[GrammarRule("iterationStatement")]
	private SyntaxNode iterationStatement()
	{
		EnterRule_iterationStatement();
		EnterRule("iterationStatement", 61);
		TraceIn("iterationStatement", 61);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode dos = default(SyntaxNode);
		SyntaxNode wh = default(SyntaxNode);
		SyntaxNode fo = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "iterationStatement");
		DebugLocation(1430, 1);
		try
		{
			// ..\\ES3.g:1431:2: (dos= doStatement |wh= whileStatement |fo= forStatement )
			int alt66=3;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case DO:
				{
				alt66 = 1;
				}
				break;
			case WHILE:
				{
				alt66 = 2;
				}
				break;
			case FOR:
				{
				alt66 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1431:4: dos= doStatement
				{
				DebugLocation(1431, 7);
				PushFollow(Follow._doStatement_in_iterationStatement6885);
				dos=doStatement();
				PopFollow();

				DebugLocation(1431, 20);
				 value = dos; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1432:4: wh= whileStatement
				{
				DebugLocation(1432, 6);
				PushFollow(Follow._whileStatement_in_iterationStatement6894);
				wh=whileStatement();
				PopFollow();

				DebugLocation(1432, 23);
				 value = wh; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1433:4: fo= forStatement
				{
				DebugLocation(1433, 6);
				PushFollow(Follow._forStatement_in_iterationStatement6904);
				fo=forStatement();
				PopFollow();

				DebugLocation(1433, 21);
				 value = fo; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("iterationStatement", 61);
			LeaveRule("iterationStatement", 61);
			LeaveRule_iterationStatement();
		}
		DebugLocation(1434, 1);
		} finally { DebugExitRule(GrammarFileName, "iterationStatement"); }
		return value;

	}
	// $ANTLR end "iterationStatement"


	partial void EnterRule_doStatement();
	partial void LeaveRule_doStatement();

	// $ANTLR start "doStatement"
	// ..\\ES3.g:1436:1: doStatement returns [SyntaxNode value] : DO st= statement WHILE LPAREN e= expression RPAREN semic ;
	[GrammarRule("doStatement")]
	private SyntaxNode doStatement()
	{
		EnterRule_doStatement();
		EnterRule("doStatement", 62);
		TraceIn("doStatement", 62);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode st = default(SyntaxNode);
		ExpressionSyntax e = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "doStatement");
		DebugLocation(1436, 1);
		try
		{
			// ..\\ES3.g:1437:2: ( DO st= statement WHILE LPAREN e= expression RPAREN semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1438:9: DO st= statement WHILE LPAREN e= expression RPAREN semic
			{
			DebugLocation(1438, 9);
			Match(input,DO,Follow._DO_in_doStatement6931); 
			DebugLocation(1438, 14);
			PushFollow(Follow._statement_in_doStatement6935);
			st=statement();
			PopFollow();

			DebugLocation(1438, 25);
			Match(input,WHILE,Follow._WHILE_in_doStatement6937); 
			DebugLocation(1438, 31);
			Match(input,LPAREN,Follow._LPAREN_in_doStatement6939); 
			DebugLocation(1438, 39);
			PushFollow(Follow._expression_in_doStatement6943);
			e=expression();
			PopFollow();

			DebugLocation(1438, 51);
			Match(input,RPAREN,Follow._RPAREN_in_doStatement6945); 
			DebugLocation(1438, 58);
			PushFollow(Follow._semic_in_doStatement6947);
			semic();
			PopFollow();

			DebugLocation(1439, 9);
			 value = new DoWhileSyntax(e, st); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("doStatement", 62);
			LeaveRule("doStatement", 62);
			LeaveRule_doStatement();
		}
		DebugLocation(1440, 1);
		} finally { DebugExitRule(GrammarFileName, "doStatement"); }
		return value;

	}
	// $ANTLR end "doStatement"


	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// ..\\ES3.g:1442:1: whileStatement returns [SyntaxNode value] : WHILE LPAREN e= expression RPAREN st= statement ;
	[GrammarRule("whileStatement")]
	private SyntaxNode whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 63);
		TraceIn("whileStatement", 63);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);
		SyntaxNode st = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(1442, 1);
		try
		{
			// ..\\ES3.g:1443:2: ( WHILE LPAREN e= expression RPAREN st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1444:9: WHILE LPAREN e= expression RPAREN st= statement
			{
			DebugLocation(1444, 9);
			Match(input,WHILE,Follow._WHILE_in_whileStatement6981); 
			DebugLocation(1444, 15);
			Match(input,LPAREN,Follow._LPAREN_in_whileStatement6983); 
			DebugLocation(1444, 23);
			PushFollow(Follow._expression_in_whileStatement6987);
			e=expression();
			PopFollow();

			DebugLocation(1444, 35);
			Match(input,RPAREN,Follow._RPAREN_in_whileStatement6989); 
			DebugLocation(1444, 44);
			PushFollow(Follow._statement_in_whileStatement6993);
			st=statement();
			PopFollow();

			DebugLocation(1445, 9);
			 value = new WhileSyntax(e, st); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whileStatement", 63);
			LeaveRule("whileStatement", 63);
			LeaveRule_whileStatement();
		}
		DebugLocation(1446, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return value;

	}
	// $ANTLR end "whileStatement"


	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// ..\\ES3.g:1490:1: forStatement returns [SyntaxNode value] : FOR LPAREN fo= forControl RPAREN st= statement ;
	[GrammarRule("forStatement")]
	private SyntaxNode forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 64);
		TraceIn("forStatement", 64);
		SyntaxNode value = default(SyntaxNode);

		ForBuilder fo = default(ForBuilder);
		SyntaxNode st = default(SyntaxNode);


		    ForBuilder builder;

		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(1490, 1);
		try
		{
			// ..\\ES3.g:1497:2: ( FOR LPAREN fo= forControl RPAREN st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1498:9: FOR LPAREN fo= forControl RPAREN st= statement
			{
			DebugLocation(1498, 9);
			Match(input,FOR,Follow._FOR_in_forStatement7038); 
			DebugLocation(1499, 9);
			Match(input,LPAREN,Follow._LPAREN_in_forStatement7048); 
			DebugLocation(1500, 11);
			PushFollow(Follow._forControl_in_forStatement7060);
			fo=forControl();
			PopFollow();

			DebugLocation(1501, 9);
			 builder = fo; 
			DebugLocation(1502, 9);
			Match(input,RPAREN,Follow._RPAREN_in_forStatement7080); 
			DebugLocation(1502, 18);
			PushFollow(Follow._statement_in_forStatement7084);
			st=statement();
			PopFollow();

			DebugLocation(1503, 9);
			 builder.Body = st; 

			}


			    value = builder.CreateFor();

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forStatement", 64);
			LeaveRule("forStatement", 64);
			LeaveRule_forStatement();
		}
		DebugLocation(1504, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return value;

	}
	// $ANTLR end "forStatement"


	partial void EnterRule_forControl();
	partial void LeaveRule_forControl();

	// $ANTLR start "forControl"
	// ..\\ES3.g:1506:1: forControl returns [ForBuilder value] : (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic );
	[GrammarRule("forControl")]
	private ForBuilder forControl()
	{
		EnterRule_forControl();
		EnterRule("forControl", 65);
		TraceIn("forControl", 65);
		ForBuilder value = default(ForBuilder);

		ForBuilder ex1 = default(ForBuilder);
		ForBuilder ex2 = default(ForBuilder);
		ForBuilder ex3 = default(ForBuilder);

		try { DebugEnterRule(GrammarFileName, "forControl");
		DebugLocation(1506, 1);
		try
		{
			// ..\\ES3.g:1507:2: (ex1= forControlVar |ex2= forControlExpression |ex3= forControlSemic )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case VAR:
				{
				alt67 = 1;
				}
				break;
			case ADD:
			case DEC:
			case DELETE:
			case DecimalLiteral:
			case FALSE:
			case FUNCTION:
			case HexIntegerLiteral:
			case INC:
			case INV:
			case Identifier:
			case LBRACE:
			case LBRACK:
			case LPAREN:
			case NEW:
			case NOT:
			case NULL:
			case OctalIntegerLiteral:
			case RegularExpressionLiteral:
			case SUB:
			case StringLiteral:
			case THIS:
			case TRUE:
			case TYPEOF:
			case VOID:
				{
				alt67 = 2;
				}
				break;
			case SEMIC:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1508:9: ex1= forControlVar
				{
				DebugLocation(1508, 12);
				PushFollow(Follow._forControlVar_in_forControl7119);
				ex1=forControlVar();
				PopFollow();

				DebugLocation(1509, 9);
				 value = ex1; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1511:9: ex2= forControlExpression
				{
				DebugLocation(1511, 12);
				PushFollow(Follow._forControlExpression_in_forControl7144);
				ex2=forControlExpression();
				PopFollow();

				DebugLocation(1512, 9);
				 value = ex2; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\ES3.g:1514:9: ex3= forControlSemic
				{
				DebugLocation(1514, 12);
				PushFollow(Follow._forControlSemic_in_forControl7169);
				ex3=forControlSemic();
				PopFollow();

				DebugLocation(1515, 9);
				 value = ex3; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControl", 65);
			LeaveRule("forControl", 65);
			LeaveRule_forControl();
		}
		DebugLocation(1516, 1);
		} finally { DebugExitRule(GrammarFileName, "forControl"); }
		return value;

	}
	// $ANTLR end "forControl"


	partial void EnterRule_forControlVar();
	partial void LeaveRule_forControlVar();

	// $ANTLR start "forControlVar"
	// ..\\ES3.g:1518:1: forControlVar returns [ForBuilder value] : VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) ;
	[GrammarRule("forControlVar")]
	private ForBuilder forControlVar()
	{
		EnterRule_forControlVar();
		EnterRule("forControlVar", 66);
		TraceIn("forControlVar", 66);
		ForBuilder value = default(ForBuilder);

		VariableDeclarationSyntax first = default(VariableDeclarationSyntax);
		ExpressionSyntax ex = default(ExpressionSyntax);
		VariableDeclarationSyntax follow = default(VariableDeclarationSyntax);
		ExpressionSyntax ex1 = default(ExpressionSyntax);
		ExpressionSyntax ex2 = default(ExpressionSyntax);


		    value = new ForBuilder();
		    List<SyntaxNode> statements = null;

		try { DebugEnterRule(GrammarFileName, "forControlVar");
		DebugLocation(1518, 1);
		try
		{
			// ..\\ES3.g:1528:2: ( VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1529:9: VAR first= variableDeclarationNoIn ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			{
			DebugLocation(1529, 9);
			Match(input,VAR,Follow._VAR_in_forControlVar7213); 
			DebugLocation(1529, 18);
			PushFollow(Follow._variableDeclarationNoIn_in_forControlVar7217);
			first=variableDeclarationNoIn();
			PopFollow();

			DebugLocation(1530, 9);

			            value.Initialization = new VariableDeclarationSyntax(
			                first.Identifier,
			                first.Expression,
			                false
			            )
			            {
			                Target = _currentBody.DeclaredVariables.AddOrGet(first.Identifier)
			            };
			        
			DebugLocation(1540, 6);
			// ..\\ES3.g:1540:6: ( ( IN ex= expression ) | ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? ) )
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==IN))
			{
				alt71 = 1;
			}
			else if ((LA71_0==COMMA||LA71_0==SEMIC))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1541:7: ( IN ex= expression )
				{
				DebugLocation(1541, 7);
				// ..\\ES3.g:1541:7: ( IN ex= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1542:8: IN ex= expression
				{
				DebugLocation(1542, 8);
				Match(input,IN,Follow._IN_in_forControlVar7251); 
				DebugLocation(1542, 13);
				PushFollow(Follow._expression_in_forControlVar7255);
				ex=expression();
				PopFollow();

				DebugLocation(1543, 17);
				 value.Expression = ex; 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1546:7: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				{
				DebugLocation(1546, 7);
				// ..\\ES3.g:1546:7: ( ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1547:8: ( COMMA follow= variableDeclarationNoIn )* SEMIC (ex1= expression )? SEMIC (ex2= expression )?
				{
				DebugLocation(1547, 8);
				// ..\\ES3.g:1547:8: ( COMMA follow= variableDeclarationNoIn )*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==COMMA))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1548:21: COMMA follow= variableDeclarationNoIn
						{
						DebugLocation(1548, 21);
						Match(input,COMMA,Follow._COMMA_in_forControlVar7328); 
						DebugLocation(1548, 33);
						PushFollow(Follow._variableDeclarationNoIn_in_forControlVar7332);
						follow=variableDeclarationNoIn();
						PopFollow();

						DebugLocation(1549, 21);

						                        if (statements == null)
						                            statements = new List<SyntaxNode> { value.Initialization };
						                        
						                        statements.Add(
						                            new VariableDeclarationSyntax(
						                                follow.Identifier,
						                                follow.Expression,
						                                false
						                            )
						                            {
						                                Target = _currentBody.DeclaredVariables.AddOrGet(follow.Identifier)
						                            }
						                        );
						                    

						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }

				DebugLocation(1565, 8);
				Match(input,SEMIC,Follow._SEMIC_in_forControlVar7383); 
				DebugLocation(1566, 17);
				// ..\\ES3.g:1566:17: (ex1= expression )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==ADD||LA69_0==DEC||LA69_0==DELETE||LA69_0==DecimalLiteral||LA69_0==FALSE||LA69_0==FUNCTION||LA69_0==HexIntegerLiteral||LA69_0==INC||LA69_0==INV||LA69_0==Identifier||(LA69_0>=LBRACE && LA69_0<=LBRACK)||LA69_0==LPAREN||(LA69_0>=NEW && LA69_0<=NOT)||LA69_0==NULL||LA69_0==OctalIntegerLiteral||LA69_0==RegularExpressionLiteral||LA69_0==SUB||LA69_0==StringLiteral||LA69_0==THIS||LA69_0==TRUE||LA69_0==TYPEOF||LA69_0==VOID))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1567:21: ex1= expression
					{
					DebugLocation(1567, 24);
					PushFollow(Follow._expression_in_forControlVar7425);
					ex1=expression();
					PopFollow();

					DebugLocation(1568, 21);
					 value.Test = ex1;

					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(1570, 17);
				Match(input,SEMIC,Follow._SEMIC_in_forControlVar7484); 
				DebugLocation(1571, 17);
				// ..\\ES3.g:1571:17: (ex2= expression )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==ADD||LA70_0==DEC||LA70_0==DELETE||LA70_0==DecimalLiteral||LA70_0==FALSE||LA70_0==FUNCTION||LA70_0==HexIntegerLiteral||LA70_0==INC||LA70_0==INV||LA70_0==Identifier||(LA70_0>=LBRACE && LA70_0<=LBRACK)||LA70_0==LPAREN||(LA70_0>=NEW && LA70_0<=NOT)||LA70_0==NULL||LA70_0==OctalIntegerLiteral||LA70_0==RegularExpressionLiteral||LA70_0==SUB||LA70_0==StringLiteral||LA70_0==THIS||LA70_0==TRUE||LA70_0==TYPEOF||LA70_0==VOID))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1572:21: ex2= expression
					{
					DebugLocation(1572, 24);
					PushFollow(Follow._expression_in_forControlVar7526);
					ex2=expression();
					PopFollow();

					DebugLocation(1573, 21);
					 value.Increment = ex2; 

					}
					break;

				}
				} finally { DebugExitSubRule(70); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			}


			    if (statements != null)
			        value.Initialization = new CommaOperatorSyntax(statements);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControlVar", 66);
			LeaveRule("forControlVar", 66);
			LeaveRule_forControlVar();
		}
		DebugLocation(1577, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlVar"); }
		return value;

	}
	// $ANTLR end "forControlVar"


	partial void EnterRule_forControlExpression();
	partial void LeaveRule_forControlExpression();

	// $ANTLR start "forControlExpression"
	// ..\\ES3.g:1579:1: forControlExpression returns [ForBuilder value] : ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) ;
	[GrammarRule("forControlExpression")]
	private ForBuilder forControlExpression()
	{
		EnterRule_forControlExpression();
		EnterRule("forControlExpression", 67);
		TraceIn("forControlExpression", 67);
		ForBuilder value = default(ForBuilder);

		ExpressionSyntax ex1 = default(ExpressionSyntax);
		ExpressionSyntax ex2 = default(ExpressionSyntax);
		ExpressionSyntax ex3 = default(ExpressionSyntax);


		    value = new ForBuilder();
			bool isLhs;

		try { DebugEnterRule(GrammarFileName, "forControlExpression");
		DebugLocation(1579, 1);
		try
		{
			// ..\\ES3.g:1585:2: (ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1586:9: ex1= expressionNoIn ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			{
			DebugLocation(1586, 12);
			PushFollow(Follow._expressionNoIn_in_forControlExpression7612);
			ex1=expressionNoIn();
			PopFollow();

			DebugLocation(1587, 9);
			 value.Initialization = ex1; isLhs = IsLeftHandSideIn(ex1); 
			DebugLocation(1588, 6);
			// ..\\ES3.g:1588:6: ({...}? ( IN ex2= expression ) | ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? ) )
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==IN))
			{
				alt74 = 1;
			}
			else if ((LA74_0==SEMIC))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1589:7: {...}? ( IN ex2= expression )
				{
				DebugLocation(1589, 7);
				if (!(( isLhs )))
				{
					throw new FailedPredicateException(input, "forControlExpression", " isLhs ");
				}
				DebugLocation(1590, 13);
				// ..\\ES3.g:1590:13: ( IN ex2= expression )
				DebugEnterAlt(1);
				// ..\\ES3.g:1591:8: IN ex2= expression
				{
				DebugLocation(1591, 8);
				Match(input,IN,Follow._IN_in_forControlExpression7661); 
				DebugLocation(1591, 14);
				PushFollow(Follow._expression_in_forControlExpression7665);
				ex2=expression();
				PopFollow();

				DebugLocation(1592, 17);
				 value.Expression = ex2; 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1595:7: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				{
				DebugLocation(1595, 7);
				// ..\\ES3.g:1595:7: ( SEMIC (ex2= expression )? SEMIC (ex3= expression )? )
				DebugEnterAlt(1);
				// ..\\ES3.g:1596:8: SEMIC (ex2= expression )? SEMIC (ex3= expression )?
				{
				DebugLocation(1596, 8);
				Match(input,SEMIC,Follow._SEMIC_in_forControlExpression7716); 
				DebugLocation(1597, 17);
				// ..\\ES3.g:1597:17: (ex2= expression )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==ADD||LA72_0==DEC||LA72_0==DELETE||LA72_0==DecimalLiteral||LA72_0==FALSE||LA72_0==FUNCTION||LA72_0==HexIntegerLiteral||LA72_0==INC||LA72_0==INV||LA72_0==Identifier||(LA72_0>=LBRACE && LA72_0<=LBRACK)||LA72_0==LPAREN||(LA72_0>=NEW && LA72_0<=NOT)||LA72_0==NULL||LA72_0==OctalIntegerLiteral||LA72_0==RegularExpressionLiteral||LA72_0==SUB||LA72_0==StringLiteral||LA72_0==THIS||LA72_0==TRUE||LA72_0==TYPEOF||LA72_0==VOID))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1598:21: ex2= expression
					{
					DebugLocation(1598, 24);
					PushFollow(Follow._expression_in_forControlExpression7758);
					ex2=expression();
					PopFollow();

					DebugLocation(1599, 21);
					 value.Test = ex2;

					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(1601, 17);
				Match(input,SEMIC,Follow._SEMIC_in_forControlExpression7817); 
				DebugLocation(1602, 17);
				// ..\\ES3.g:1602:17: (ex3= expression )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==ADD||LA73_0==DEC||LA73_0==DELETE||LA73_0==DecimalLiteral||LA73_0==FALSE||LA73_0==FUNCTION||LA73_0==HexIntegerLiteral||LA73_0==INC||LA73_0==INV||LA73_0==Identifier||(LA73_0>=LBRACE && LA73_0<=LBRACK)||LA73_0==LPAREN||(LA73_0>=NEW && LA73_0<=NOT)||LA73_0==NULL||LA73_0==OctalIntegerLiteral||LA73_0==RegularExpressionLiteral||LA73_0==SUB||LA73_0==StringLiteral||LA73_0==THIS||LA73_0==TRUE||LA73_0==TYPEOF||LA73_0==VOID))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1603:21: ex3= expression
					{
					DebugLocation(1603, 24);
					PushFollow(Follow._expression_in_forControlExpression7859);
					ex3=expression();
					PopFollow();

					DebugLocation(1604, 21);
					 value.Increment = ex3; 

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControlExpression", 67);
			LeaveRule("forControlExpression", 67);
			LeaveRule_forControlExpression();
		}
		DebugLocation(1608, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlExpression"); }
		return value;

	}
	// $ANTLR end "forControlExpression"


	partial void EnterRule_forControlSemic();
	partial void LeaveRule_forControlSemic();

	// $ANTLR start "forControlSemic"
	// ..\\ES3.g:1610:1: forControlSemic returns [ForBuilder value] : SEMIC (ex1= expression )? SEMIC (ex2= expression )? ;
	[GrammarRule("forControlSemic")]
	private ForBuilder forControlSemic()
	{
		EnterRule_forControlSemic();
		EnterRule("forControlSemic", 68);
		TraceIn("forControlSemic", 68);
		ForBuilder value = default(ForBuilder);

		ExpressionSyntax ex1 = default(ExpressionSyntax);
		ExpressionSyntax ex2 = default(ExpressionSyntax);


			value = new ForBuilder();

		try { DebugEnterRule(GrammarFileName, "forControlSemic");
		DebugLocation(1610, 1);
		try
		{
			// ..\\ES3.g:1614:2: ( SEMIC (ex1= expression )? SEMIC (ex2= expression )? )
			DebugEnterAlt(1);
			// ..\\ES3.g:1615:9: SEMIC (ex1= expression )? SEMIC (ex2= expression )?
			{
			DebugLocation(1615, 9);
			Match(input,SEMIC,Follow._SEMIC_in_forControlSemic7942); 
			DebugLocation(1616, 9);
			// ..\\ES3.g:1616:9: (ex1= expression )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==ADD||LA75_0==DEC||LA75_0==DELETE||LA75_0==DecimalLiteral||LA75_0==FALSE||LA75_0==FUNCTION||LA75_0==HexIntegerLiteral||LA75_0==INC||LA75_0==INV||LA75_0==Identifier||(LA75_0>=LBRACE && LA75_0<=LBRACK)||LA75_0==LPAREN||(LA75_0>=NEW && LA75_0<=NOT)||LA75_0==NULL||LA75_0==OctalIntegerLiteral||LA75_0==RegularExpressionLiteral||LA75_0==SUB||LA75_0==StringLiteral||LA75_0==THIS||LA75_0==TRUE||LA75_0==TYPEOF||LA75_0==VOID))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1617:13: ex1= expression
				{
				DebugLocation(1617, 16);
				PushFollow(Follow._expression_in_forControlSemic7968);
				ex1=expression();
				PopFollow();

				DebugLocation(1618, 13);
				 value.Test = ex1;

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(1620, 9);
			Match(input,SEMIC,Follow._SEMIC_in_forControlSemic8003); 
			DebugLocation(1621, 9);
			// ..\\ES3.g:1621:9: (ex2= expression )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==ADD||LA76_0==DEC||LA76_0==DELETE||LA76_0==DecimalLiteral||LA76_0==FALSE||LA76_0==FUNCTION||LA76_0==HexIntegerLiteral||LA76_0==INC||LA76_0==INV||LA76_0==Identifier||(LA76_0>=LBRACE && LA76_0<=LBRACK)||LA76_0==LPAREN||(LA76_0>=NEW && LA76_0<=NOT)||LA76_0==NULL||LA76_0==OctalIntegerLiteral||LA76_0==RegularExpressionLiteral||LA76_0==SUB||LA76_0==StringLiteral||LA76_0==THIS||LA76_0==TRUE||LA76_0==TYPEOF||LA76_0==VOID))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1622:13: ex2= expression
				{
				DebugLocation(1622, 16);
				PushFollow(Follow._expression_in_forControlSemic8029);
				ex2=expression();
				PopFollow();

				DebugLocation(1623, 13);
				 value.Increment = ex2; 

				}
				break;

			}
			} finally { DebugExitSubRule(76); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forControlSemic", 68);
			LeaveRule("forControlSemic", 68);
			LeaveRule_forControlSemic();
		}
		DebugLocation(1625, 1);
		} finally { DebugExitRule(GrammarFileName, "forControlSemic"); }
		return value;

	}
	// $ANTLR end "forControlSemic"


	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();

	// $ANTLR start "continueStatement"
	// ..\\ES3.g:1636:1: continueStatement returns [SyntaxNode value] : CONTINUE (lb= Identifier )? semic ;
	[GrammarRule("continueStatement")]
	private SyntaxNode continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 69);
		TraceIn("continueStatement", 69);
		SyntaxNode value = default(SyntaxNode);

		IToken lb = default(IToken);

		 
			string label = null;

		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(1636, 1);
		try
		{
			// ..\\ES3.g:1640:2: ( CONTINUE (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1641:9: CONTINUE (lb= Identifier )? semic
			{
			DebugLocation(1641, 9);
			Match(input,CONTINUE,Follow._CONTINUE_in_continueStatement8089); 
			DebugLocation(1642, 9);
			 if (input.LA(1) == Identifier) PromoteEol(); 
			DebugLocation(1643, 9);
			// ..\\ES3.g:1643:9: (lb= Identifier )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==Identifier))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1644:13: lb= Identifier
				{
				DebugLocation(1644, 15);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_continueStatement8125); 
				DebugLocation(1645, 13);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(1647, 9);
			PushFollow(Follow._semic_in_continueStatement8160);
			semic();
			PopFollow();

			DebugLocation(1648, 9);
			 value = new ContinueSyntax(label); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("continueStatement", 69);
			LeaveRule("continueStatement", 69);
			LeaveRule_continueStatement();
		}
		DebugLocation(1649, 1);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return value;

	}
	// $ANTLR end "continueStatement"


	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();

	// $ANTLR start "breakStatement"
	// ..\\ES3.g:1660:1: breakStatement returns [SyntaxNode value] : BREAK (lb= Identifier )? semic ;
	[GrammarRule("breakStatement")]
	private SyntaxNode breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 70);
		TraceIn("breakStatement", 70);
		SyntaxNode value = default(SyntaxNode);

		IToken lb = default(IToken);

		 
			string label = null; 

		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(1660, 1);
		try
		{
			// ..\\ES3.g:1664:2: ( BREAK (lb= Identifier )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1665:9: BREAK (lb= Identifier )? semic
			{
			DebugLocation(1665, 9);
			Match(input,BREAK,Follow._BREAK_in_breakStatement8205); 
			DebugLocation(1666, 9);
			 if (input.LA(1) == Identifier) PromoteEol(); 
			DebugLocation(1667, 9);
			// ..\\ES3.g:1667:9: (lb= Identifier )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==Identifier))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1668:13: lb= Identifier
				{
				DebugLocation(1668, 15);
				lb=(IToken)Match(input,Identifier,Follow._Identifier_in_breakStatement8241); 
				DebugLocation(1668, 27);
				 label = lb.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(1670, 9);
			PushFollow(Follow._semic_in_breakStatement8264);
			semic();
			PopFollow();

			DebugLocation(1671, 9);
			 value = new BreakSyntax(label); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("breakStatement", 70);
			LeaveRule("breakStatement", 70);
			LeaveRule_breakStatement();
		}
		DebugLocation(1672, 1);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return value;

	}
	// $ANTLR end "breakStatement"


	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// ..\\ES3.g:1691:1: returnStatement returns [ReturnSyntax value] : RETURN (expr= expression )? semic ;
	[GrammarRule("returnStatement")]
	private ReturnSyntax returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 71);
		TraceIn("returnStatement", 71);
		ReturnSyntax value = default(ReturnSyntax);

		ExpressionSyntax expr = default(ExpressionSyntax);


		    ExpressionSyntax returnExpression = null;

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(1691, 1);
		try
		{
			// ..\\ES3.g:1695:2: ( RETURN (expr= expression )? semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1696:9: RETURN (expr= expression )? semic
			{
			DebugLocation(1696, 9);
			Match(input,RETURN,Follow._RETURN_in_returnStatement8309); 
			DebugLocation(1697, 9);
			 PromoteEol(); 
			DebugLocation(1698, 9);
			// ..\\ES3.g:1698:9: (expr= expression )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==ADD||LA79_0==DEC||LA79_0==DELETE||LA79_0==DecimalLiteral||LA79_0==FALSE||LA79_0==FUNCTION||LA79_0==HexIntegerLiteral||LA79_0==INC||LA79_0==INV||LA79_0==Identifier||(LA79_0>=LBRACE && LA79_0<=LBRACK)||LA79_0==LPAREN||(LA79_0>=NEW && LA79_0<=NOT)||LA79_0==NULL||LA79_0==OctalIntegerLiteral||LA79_0==RegularExpressionLiteral||LA79_0==SUB||LA79_0==StringLiteral||LA79_0==THIS||LA79_0==TRUE||LA79_0==TYPEOF||LA79_0==VOID))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1699:13: expr= expression
				{
				DebugLocation(1699, 17);
				PushFollow(Follow._expression_in_returnStatement8345);
				expr=expression();
				PopFollow();

				DebugLocation(1700, 13);
				 returnExpression = expr; 

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(1702, 9);
			PushFollow(Follow._semic_in_returnStatement8380);
			semic();
			PopFollow();

			DebugLocation(1703, 9);
			 value = new ReturnSyntax(returnExpression); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("returnStatement", 71);
			LeaveRule("returnStatement", 71);
			LeaveRule_returnStatement();
		}
		DebugLocation(1704, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return value;

	}
	// $ANTLR end "returnStatement"


	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();

	// $ANTLR start "withStatement"
	// ..\\ES3.g:1710:1: withStatement returns [SyntaxNode value] : WITH LPAREN exp= expression RPAREN smt= statement ;
	[GrammarRule("withStatement")]
	private SyntaxNode withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 72);
		TraceIn("withStatement", 72);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax exp = default(ExpressionSyntax);
		SyntaxNode smt = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(1710, 1);
		try
		{
			// ..\\ES3.g:1711:2: ( WITH LPAREN exp= expression RPAREN smt= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1711:4: WITH LPAREN exp= expression RPAREN smt= statement
			{
			DebugLocation(1711, 4);
			Match(input,WITH,Follow._WITH_in_withStatement8410); 
			DebugLocation(1711, 9);
			Match(input,LPAREN,Follow._LPAREN_in_withStatement8412); 
			DebugLocation(1711, 19);
			PushFollow(Follow._expression_in_withStatement8416);
			exp=expression();
			PopFollow();

			DebugLocation(1711, 31);
			Match(input,RPAREN,Follow._RPAREN_in_withStatement8418); 
			DebugLocation(1711, 41);
			PushFollow(Follow._statement_in_withStatement8422);
			smt=statement();
			PopFollow();

			DebugLocation(1711, 52);
			 value = new WithSyntax(exp, smt); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("withStatement", 72);
			LeaveRule("withStatement", 72);
			LeaveRule_withStatement();
		}
		DebugLocation(1712, 1);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return value;

	}
	// $ANTLR end "withStatement"


	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// ..\\ES3.g:1718:1: switchStatement returns [SyntaxNode value] : SWITCH LPAREN e= expression RPAREN LBRACE ({...}? =>def= defaultClause |cc= caseClause )* RBRACE ;
	[GrammarRule("switchStatement")]
	private SyntaxNode switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 73);
		TraceIn("switchStatement", 73);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax e = default(ExpressionSyntax);
		BlockSyntax def = default(BlockSyntax);
		CaseClause cc = default(CaseClause);


		    BlockSyntax block = null;
		    var cases = new List<CaseClause>();

		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(1718, 1);
		try
		{
			// ..\\ES3.g:1723:2: ( SWITCH LPAREN e= expression RPAREN LBRACE ({...}? =>def= defaultClause |cc= caseClause )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1724:9: SWITCH LPAREN e= expression RPAREN LBRACE ({...}? =>def= defaultClause |cc= caseClause )* RBRACE
			{
			DebugLocation(1724, 9);
			Match(input,SWITCH,Follow._SWITCH_in_switchStatement8457); 
			DebugLocation(1724, 16);
			Match(input,LPAREN,Follow._LPAREN_in_switchStatement8459); 
			DebugLocation(1724, 24);
			PushFollow(Follow._expression_in_switchStatement8463);
			e=expression();
			PopFollow();

			DebugLocation(1724, 36);
			Match(input,RPAREN,Follow._RPAREN_in_switchStatement8465); 
			DebugLocation(1724, 43);
			Match(input,LBRACE,Follow._LBRACE_in_switchStatement8467); 
			DebugLocation(1725, 9);
			// ..\\ES3.g:1725:9: ({...}? =>def= defaultClause |cc= caseClause )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=3;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==DEFAULT) && (( block == null )))
				{
					alt80 = 1;
				}
				else if ((LA80_0==CASE))
				{
					alt80 = 2;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1726:13: {...}? =>def= defaultClause
					{
					DebugLocation(1726, 13);
					if (!(( block == null )))
					{
						throw new FailedPredicateException(input, "switchStatement", " block == null ");
					}
					DebugLocation(1727, 16);
					PushFollow(Follow._defaultClause_in_switchStatement8508);
					def=defaultClause();
					PopFollow();

					DebugLocation(1728, 13);
					 block = def; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\ES3.g:1730:13: cc= caseClause
					{
					DebugLocation(1730, 15);
					PushFollow(Follow._caseClause_in_switchStatement8548);
					cc=caseClause();
					PopFollow();

					DebugLocation(1731, 13);
					 cases.Add(cc); 

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }

			DebugLocation(1733, 9);
			Match(input,RBRACE,Follow._RBRACE_in_switchStatement8583); 
			DebugLocation(1734, 9);
			 value = new SwitchSyntax(e, cases, block); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchStatement", 73);
			LeaveRule("switchStatement", 73);
			LeaveRule_switchStatement();
		}
		DebugLocation(1735, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return value;

	}
	// $ANTLR end "switchStatement"


	partial void EnterRule_caseClause();
	partial void LeaveRule_caseClause();

	// $ANTLR start "caseClause"
	// ..\\ES3.g:1737:1: caseClause returns [CaseClause value] : CASE e= expression COLON (st= statement )* ;
	[GrammarRule("caseClause")]
	private CaseClause caseClause()
	{
		EnterRule_caseClause();
		EnterRule("caseClause", 74);
		TraceIn("caseClause", 74);
		CaseClause value = default(CaseClause);

		ExpressionSyntax e = default(ExpressionSyntax);
		SyntaxNode st = default(SyntaxNode);


		    var statements = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "caseClause");
		DebugLocation(1737, 1);
		try
		{
			// ..\\ES3.g:1741:2: ( CASE e= expression COLON (st= statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1742:9: CASE e= expression COLON (st= statement )*
			{
			DebugLocation(1742, 9);
			Match(input,CASE,Follow._CASE_in_caseClause8621); 
			DebugLocation(1742, 15);
			PushFollow(Follow._expression_in_caseClause8625);
			e=expression();
			PopFollow();

			DebugLocation(1742, 27);
			Match(input,COLON,Follow._COLON_in_caseClause8627); 
			DebugLocation(1743, 9);
			// ..\\ES3.g:1743:9: (st= statement )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==ADD||LA81_0==BREAK||LA81_0==CONTINUE||LA81_0==DEC||LA81_0==DELETE||LA81_0==DO||LA81_0==DecimalLiteral||LA81_0==FALSE||LA81_0==FOR||LA81_0==FUNCTION||(LA81_0>=HexIntegerLiteral && LA81_0<=IF)||LA81_0==INC||LA81_0==INV||LA81_0==Identifier||(LA81_0>=LBRACE && LA81_0<=LBRACK)||LA81_0==LPAREN||(LA81_0>=NEW && LA81_0<=NOT)||LA81_0==NULL||LA81_0==OctalIntegerLiteral||LA81_0==RETURN||LA81_0==RegularExpressionLiteral||LA81_0==SEMIC||LA81_0==SUB||LA81_0==SWITCH||LA81_0==StringLiteral||(LA81_0>=THIS && LA81_0<=THROW)||(LA81_0>=TRUE && LA81_0<=TYPEOF)||(LA81_0>=VAR && LA81_0<=VOID)||(LA81_0>=WHILE && LA81_0<=WITH)))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1744:13: st= statement
					{
					DebugLocation(1744, 15);
					PushFollow(Follow._statement_in_caseClause8653);
					st=statement();
					PopFollow();

					DebugLocation(1745, 13);
					 statements.Add(st); 

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(1747, 9);
			 value = new CaseClause(e, new BlockSyntax(statements)); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseClause", 74);
			LeaveRule("caseClause", 74);
			LeaveRule_caseClause();
		}
		DebugLocation(1748, 1);
		} finally { DebugExitRule(GrammarFileName, "caseClause"); }
		return value;

	}
	// $ANTLR end "caseClause"


	partial void EnterRule_defaultClause();
	partial void LeaveRule_defaultClause();

	// $ANTLR start "defaultClause"
	// ..\\ES3.g:1750:1: defaultClause returns [BlockSyntax value] : DEFAULT COLON (st= statement )* ;
	[GrammarRule("defaultClause")]
	private BlockSyntax defaultClause()
	{
		EnterRule_defaultClause();
		EnterRule("defaultClause", 75);
		TraceIn("defaultClause", 75);
		BlockSyntax value = default(BlockSyntax);

		SyntaxNode st = default(SyntaxNode);


		    var statements = new List<SyntaxNode>();

		try { DebugEnterRule(GrammarFileName, "defaultClause");
		DebugLocation(1750, 1);
		try
		{
			// ..\\ES3.g:1754:2: ( DEFAULT COLON (st= statement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1755:9: DEFAULT COLON (st= statement )*
			{
			DebugLocation(1755, 9);
			Match(input,DEFAULT,Follow._DEFAULT_in_defaultClause8717); 
			DebugLocation(1755, 17);
			Match(input,COLON,Follow._COLON_in_defaultClause8719); 
			DebugLocation(1756, 9);
			// ..\\ES3.g:1756:9: (st= statement )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==ADD||LA82_0==BREAK||LA82_0==CONTINUE||LA82_0==DEC||LA82_0==DELETE||LA82_0==DO||LA82_0==DecimalLiteral||LA82_0==FALSE||LA82_0==FOR||LA82_0==FUNCTION||(LA82_0>=HexIntegerLiteral && LA82_0<=IF)||LA82_0==INC||LA82_0==INV||LA82_0==Identifier||(LA82_0>=LBRACE && LA82_0<=LBRACK)||LA82_0==LPAREN||(LA82_0>=NEW && LA82_0<=NOT)||LA82_0==NULL||LA82_0==OctalIntegerLiteral||LA82_0==RETURN||LA82_0==RegularExpressionLiteral||LA82_0==SEMIC||LA82_0==SUB||LA82_0==SWITCH||LA82_0==StringLiteral||(LA82_0>=THIS && LA82_0<=THROW)||(LA82_0>=TRUE && LA82_0<=TYPEOF)||(LA82_0>=VAR && LA82_0<=VOID)||(LA82_0>=WHILE && LA82_0<=WITH)))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1757:13: st= statement
					{
					DebugLocation(1757, 15);
					PushFollow(Follow._statement_in_defaultClause8745);
					st=statement();
					PopFollow();

					DebugLocation(1758, 13);
					 statements.Add(st); 

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(1760, 9);
			 value = new BlockSyntax(statements); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defaultClause", 75);
			LeaveRule("defaultClause", 75);
			LeaveRule_defaultClause();
		}
		DebugLocation(1761, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultClause"); }
		return value;

	}
	// $ANTLR end "defaultClause"


	partial void EnterRule_labelledStatement();
	partial void LeaveRule_labelledStatement();

	// $ANTLR start "labelledStatement"
	// ..\\ES3.g:1767:1: labelledStatement returns [SyntaxNode value] : lb= Identifier COLON st= statement ;
	[GrammarRule("labelledStatement")]
	private SyntaxNode labelledStatement()
	{
		EnterRule_labelledStatement();
		EnterRule("labelledStatement", 76);
		TraceIn("labelledStatement", 76);
		SyntaxNode value = default(SyntaxNode);

		IToken lb = default(IToken);
		SyntaxNode st = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "labelledStatement");
		DebugLocation(1767, 1);
		try
		{
			// ..\\ES3.g:1768:2: (lb= Identifier COLON st= statement )
			DebugEnterAlt(1);
			// ..\\ES3.g:1769:9: lb= Identifier COLON st= statement
			{
			DebugLocation(1769, 11);
			lb=(IToken)Match(input,Identifier,Follow._Identifier_in_labelledStatement8811); 
			DebugLocation(1769, 23);
			Match(input,COLON,Follow._COLON_in_labelledStatement8813); 
			DebugLocation(1769, 31);
			PushFollow(Follow._statement_in_labelledStatement8817);
			st=statement();
			PopFollow();

			DebugLocation(1770, 9);
			 value = new LabelSyntax(lb.Text, st); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("labelledStatement", 76);
			LeaveRule("labelledStatement", 76);
			LeaveRule_labelledStatement();
		}
		DebugLocation(1771, 1);
		} finally { DebugExitRule(GrammarFileName, "labelledStatement"); }
		return value;

	}
	// $ANTLR end "labelledStatement"


	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();

	// $ANTLR start "throwStatement"
	// ..\\ES3.g:1792:1: throwStatement returns [SyntaxNode value] : THROW exp= expression semic ;
	[GrammarRule("throwStatement")]
	private SyntaxNode throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 77);
		TraceIn("throwStatement", 77);
		SyntaxNode value = default(SyntaxNode);

		ExpressionSyntax exp = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(1792, 1);
		try
		{
			// ..\\ES3.g:1793:2: ( THROW exp= expression semic )
			DebugEnterAlt(1);
			// ..\\ES3.g:1793:4: THROW exp= expression semic
			{
			DebugLocation(1793, 4);
			Match(input,THROW,Follow._THROW_in_throwStatement8849); 
			DebugLocation(1793, 10);
			 PromoteEol(); 
			DebugLocation(1793, 31);
			PushFollow(Follow._expression_in_throwStatement8855);
			exp=expression();
			PopFollow();

			DebugLocation(1793, 43);
			 value = new ThrowSyntax(exp); 
			DebugLocation(1793, 78);
			PushFollow(Follow._semic_in_throwStatement8859);
			semic();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwStatement", 77);
			LeaveRule("throwStatement", 77);
			LeaveRule_throwStatement();
		}
		DebugLocation(1794, 1);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return value;

	}
	// $ANTLR end "throwStatement"


	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();

	// $ANTLR start "tryStatement"
	// ..\\ES3.g:1800:1: tryStatement returns [TrySyntax value] : TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) ;
	[GrammarRule("tryStatement")]
	private TrySyntax tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 78);
		TraceIn("tryStatement", 78);
		TrySyntax value = default(TrySyntax);

		BlockSyntax b = default(BlockSyntax);
		CatchClause c = default(CatchClause);
		FinallyClause first = default(FinallyClause);
		FinallyClause last = default(FinallyClause);


		    CatchClause @catch = null;
		    FinallyClause @finally = null;

		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(1800, 1);
		try
		{
			// ..\\ES3.g:1805:2: ( TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause ) )
			DebugEnterAlt(1);
			// ..\\ES3.g:1806:9: TRY b= block (c= catchClause (first= finallyClause )? |last= finallyClause )
			{
			DebugLocation(1806, 9);
			Match(input,TRY,Follow._TRY_in_tryStatement8891); 
			DebugLocation(1806, 14);
			PushFollow(Follow._block_in_tryStatement8895);
			b=block();
			PopFollow();

			DebugLocation(1807, 9);
			// ..\\ES3.g:1807:9: (c= catchClause (first= finallyClause )? |last= finallyClause )
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==CATCH))
			{
				alt84 = 1;
			}
			else if ((LA84_0==FINALLY))
			{
				alt84 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1808:13: c= catchClause (first= finallyClause )?
				{
				DebugLocation(1808, 14);
				PushFollow(Follow._catchClause_in_tryStatement8921);
				c=catchClause();
				PopFollow();

				DebugLocation(1809, 13);
				 @catch = c; 
				DebugLocation(1810, 13);
				// ..\\ES3.g:1810:13: (first= finallyClause )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==FINALLY))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1811:17: first= finallyClause
					{
					DebugLocation(1811, 22);
					PushFollow(Follow._finallyClause_in_tryStatement8969);
					first=finallyClause();
					PopFollow();

					DebugLocation(1812, 17);
					 @finally = first; 

					}
					break;

				}
				} finally { DebugExitSubRule(83); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1815:13: last= finallyClause
				{
				DebugLocation(1815, 17);
				PushFollow(Follow._finallyClause_in_tryStatement9028);
				last=finallyClause();
				PopFollow();

				DebugLocation(1816, 13);
				 @finally = last; 

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(1818, 9);
			 value = new TrySyntax(b, @catch, @finally); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tryStatement", 78);
			LeaveRule("tryStatement", 78);
			LeaveRule_tryStatement();
		}
		DebugLocation(1819, 1);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return value;

	}
	// $ANTLR end "tryStatement"


	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();

	// $ANTLR start "catchClause"
	// ..\\ES3.g:1821:1: catchClause returns [CatchClause value] : CATCH LPAREN id= Identifier RPAREN b= block ;
	[GrammarRule("catchClause")]
	private CatchClause catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 79);
		TraceIn("catchClause", 79);
		CatchClause value = default(CatchClause);

		IToken id = default(IToken);
		BlockSyntax b = default(BlockSyntax);

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1821, 1);
		try
		{
			// ..\\ES3.g:1825:2: ( CATCH LPAREN id= Identifier RPAREN b= block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1826:9: CATCH LPAREN id= Identifier RPAREN b= block
			{
			DebugLocation(1826, 9);
			Match(input,CATCH,Follow._CATCH_in_catchClause9090); 
			DebugLocation(1826, 15);
			Match(input,LPAREN,Follow._LPAREN_in_catchClause9092); 
			DebugLocation(1826, 24);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_catchClause9096); 
			DebugLocation(1826, 36);
			Match(input,RPAREN,Follow._RPAREN_in_catchClause9098); 
			DebugLocation(1826, 44);
			PushFollow(Follow._block_in_catchClause9102);
			b=block();
			PopFollow();

			DebugLocation(1827, 9);
			 value = new CatchClause((id!=null?id.Text:null), b); 

			}


			    value.Target = _currentBody.DeclaredVariables.AddOrGet(value.Identifier);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 79);
			LeaveRule("catchClause", 79);
			LeaveRule_catchClause();
		}
		DebugLocation(1828, 1);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return value;

	}
	// $ANTLR end "catchClause"


	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();

	// $ANTLR start "finallyClause"
	// ..\\ES3.g:1830:1: finallyClause returns [FinallyClause value] : FINALLY b= block ;
	[GrammarRule("finallyClause")]
	private FinallyClause finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 80);
		TraceIn("finallyClause", 80);
		FinallyClause value = default(FinallyClause);

		BlockSyntax b = default(BlockSyntax);

		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(1830, 1);
		try
		{
			// ..\\ES3.g:1831:2: ( FINALLY b= block )
			DebugEnterAlt(1);
			// ..\\ES3.g:1832:9: FINALLY b= block
			{
			DebugLocation(1832, 9);
			Match(input,FINALLY,Follow._FINALLY_in_finallyClause9136); 
			DebugLocation(1832, 18);
			PushFollow(Follow._block_in_finallyClause9140);
			b=block();
			PopFollow();

			DebugLocation(1833, 9);
			 value = new FinallyClause(b); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("finallyClause", 80);
			LeaveRule("finallyClause", 80);
			LeaveRule_finallyClause();
		}
		DebugLocation(1834, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return value;

	}
	// $ANTLR end "finallyClause"


	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();

	// $ANTLR start "functionDeclaration"
	// ..\\ES3.g:1846:1: functionDeclaration returns [SyntaxNode value] : FUNCTION id= Identifier parms= formalParameterList fb= functionBody ;
	[GrammarRule("functionDeclaration")]
	private SyntaxNode functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 81);
		TraceIn("functionDeclaration", 81);
		SyntaxNode value = default(SyntaxNode);

		IToken id = default(IToken);
		List<string> parms = default(List<string>);
		BlockSyntax fb = default(BlockSyntax);


		    string name;
		    List<string> parameters;
		    BlockSyntax body;

		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(1846, 1);
		try
		{
			// ..\\ES3.g:1866:2: ( FUNCTION id= Identifier parms= formalParameterList fb= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1867:9: FUNCTION id= Identifier parms= formalParameterList fb= functionBody
			{
			DebugLocation(1867, 9);
			Match(input,FUNCTION,Follow._FUNCTION_in_functionDeclaration9193); 
			DebugLocation(1867, 20);
			id=(IToken)Match(input,Identifier,Follow._Identifier_in_functionDeclaration9197); 
			DebugLocation(1868, 9);
			 name = id.Text; 
			DebugLocation(1869, 8);
			PushFollow(Follow._formalParameterList_in_functionDeclaration9214);
			parms=formalParameterList();
			PopFollow();

			DebugLocation(1870, 9);
			 parameters = parms; 
			DebugLocation(1871, 5);
			PushFollow(Follow._functionBody_in_functionDeclaration9230);
			fb=functionBody();
			PopFollow();

			DebugLocation(1872, 9);
			 body = fb; 

			}


			    _currentBody.FunctionDeclarations.Add(
			        new FunctionDeclarationSyntax(
			            name,
			            parameters,
			            body
			        )
			        {
			            Target = _currentBody.DeclaredVariables.AddOrGet(name)
			        }
			    );

			    value = new EmptySyntax();

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionDeclaration", 81);
			LeaveRule("functionDeclaration", 81);
			LeaveRule_functionDeclaration();
		}
		DebugLocation(1873, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return value;

	}
	// $ANTLR end "functionDeclaration"


	partial void EnterRule_functionExpression();
	partial void LeaveRule_functionExpression();

	// $ANTLR start "functionExpression"
	// ..\\ES3.g:1875:1: functionExpression returns [FunctionSyntax value] : FUNCTION (id= Identifier )? fpl= formalParameterList fb= functionBody ;
	[GrammarRule("functionExpression")]
	private FunctionSyntax functionExpression()
	{
		EnterRule_functionExpression();
		EnterRule("functionExpression", 82);
		TraceIn("functionExpression", 82);
		FunctionSyntax value = default(FunctionSyntax);

		IToken id = default(IToken);
		List<string> fpl = default(List<string>);
		BlockSyntax fb = default(BlockSyntax);


		    string name = null;
		    List<string> parameters;
		    BlockSyntax body;

		try { DebugEnterRule(GrammarFileName, "functionExpression");
		DebugLocation(1875, 1);
		try
		{
			// ..\\ES3.g:1887:2: ( FUNCTION (id= Identifier )? fpl= formalParameterList fb= functionBody )
			DebugEnterAlt(1);
			// ..\\ES3.g:1888:9: FUNCTION (id= Identifier )? fpl= formalParameterList fb= functionBody
			{
			DebugLocation(1888, 9);
			Match(input,FUNCTION,Follow._FUNCTION_in_functionExpression9273); 
			DebugLocation(1889, 9);
			// ..\\ES3.g:1889:9: (id= Identifier )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==Identifier))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1890:13: id= Identifier
				{
				DebugLocation(1890, 15);
				id=(IToken)Match(input,Identifier,Follow._Identifier_in_functionExpression9299); 
				DebugLocation(1891, 13);
				 name = id.Text; 

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(1893, 12);
			PushFollow(Follow._formalParameterList_in_functionExpression9336);
			fpl=formalParameterList();
			PopFollow();

			DebugLocation(1894, 9);
			 parameters = fpl; 
			DebugLocation(1895, 11);
			PushFollow(Follow._functionBody_in_functionExpression9358);
			fb=functionBody();
			PopFollow();

			DebugLocation(1896, 9);
			 body = fb; 

			}


				value = new FunctionSyntax(name, parameters, body);

			    if (name != null)
			        value.Target = _currentBody.DeclaredVariables.AddOrGet(name);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionExpression", 82);
			LeaveRule("functionExpression", 82);
			LeaveRule_functionExpression();
		}
		DebugLocation(1897, 1);
		} finally { DebugExitRule(GrammarFileName, "functionExpression"); }
		return value;

	}
	// $ANTLR end "functionExpression"


	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();

	// $ANTLR start "formalParameterList"
	// ..\\ES3.g:1899:1: formalParameterList returns [List<string> value] : LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN ;
	[GrammarRule("formalParameterList")]
	private List<string> formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 83);
		TraceIn("formalParameterList", 83);
		List<string> value = default(List<string>);

		IToken first = default(IToken);
		IToken follow = default(IToken);


		    List<string> identifiers = new List<string>();
		    value = identifiers;

		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(1899, 1);
		try
		{
			// ..\\ES3.g:1904:2: ( LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN )
			DebugEnterAlt(1);
			// ..\\ES3.g:1905:9: LPAREN (first= Identifier ( COMMA follow= Identifier )* )? RPAREN
			{
			DebugLocation(1905, 9);
			Match(input,LPAREN,Follow._LPAREN_in_formalParameterList9396); 
			DebugLocation(1906, 9);
			// ..\\ES3.g:1906:9: (first= Identifier ( COMMA follow= Identifier )* )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==Identifier))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1907:13: first= Identifier ( COMMA follow= Identifier )*
				{
				DebugLocation(1907, 18);
				first=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList9422); 
				DebugLocation(1908, 13);
				 identifiers.Add((first!=null?first.Text:null)); 
				DebugLocation(1909, 13);
				// ..\\ES3.g:1909:13: ( COMMA follow= Identifier )*
				try { DebugEnterSubRule(86);
				while (true)
				{
					int alt86=2;
					try { DebugEnterDecision(86, false);
					int LA86_0 = input.LA(1);

					if ((LA86_0==COMMA))
					{
						alt86 = 1;
					}


					} finally { DebugExitDecision(86); }
					switch ( alt86 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\ES3.g:1910:17: COMMA follow= Identifier
						{
						DebugLocation(1910, 17);
						Match(input,COMMA,Follow._COMMA_in_formalParameterList9468); 
						DebugLocation(1910, 29);
						follow=(IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList9472); 
						DebugLocation(1911, 17);
						 identifiers.Add((follow!=null?follow.Text:null)); 

						}
						break;

					default:
						goto loop86;
					}
				}

				loop86:
					;

				} finally { DebugExitSubRule(86); }


				}
				break;

			}
			} finally { DebugExitSubRule(87); }

			DebugLocation(1914, 9);
			Match(input,RPAREN,Follow._RPAREN_in_formalParameterList9526); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalParameterList", 83);
			LeaveRule("formalParameterList", 83);
			LeaveRule_formalParameterList();
		}
		DebugLocation(1915, 1);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return value;

	}
	// $ANTLR end "formalParameterList"


	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();

	// $ANTLR start "functionBody"
	// ..\\ES3.g:1917:1: functionBody returns [BlockSyntax value] : lb= LBRACE (se= sourceElement )* RBRACE ;
	[GrammarRule("functionBody")]
	private BlockSyntax functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 84);
		TraceIn("functionBody", 84);
		BlockSyntax value = default(BlockSyntax);

		IToken lb = default(IToken);
		SyntaxNode se = default(SyntaxNode);


		    var tempBody = _currentBody;
		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(1917, 1);
		try
		{
			// ..\\ES3.g:1926:2: (lb= LBRACE (se= sourceElement )* RBRACE )
			DebugEnterAlt(1);
			// ..\\ES3.g:1927:9: lb= LBRACE (se= sourceElement )* RBRACE
			{
			DebugLocation(1927, 11);
			lb=(IToken)Match(input,LBRACE,Follow._LBRACE_in_functionBody9559); 
			DebugLocation(1928, 9);
			// ..\\ES3.g:1928:9: (se= sourceElement )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==ADD||LA88_0==BREAK||LA88_0==CONTINUE||LA88_0==DEC||LA88_0==DELETE||LA88_0==DO||LA88_0==DecimalLiteral||LA88_0==FALSE||LA88_0==FOR||LA88_0==FUNCTION||(LA88_0>=HexIntegerLiteral && LA88_0<=IF)||LA88_0==INC||LA88_0==INV||LA88_0==Identifier||(LA88_0>=LBRACE && LA88_0<=LBRACK)||LA88_0==LPAREN||(LA88_0>=NEW && LA88_0<=NOT)||LA88_0==NULL||LA88_0==OctalIntegerLiteral||LA88_0==RETURN||LA88_0==RegularExpressionLiteral||LA88_0==SEMIC||LA88_0==SUB||LA88_0==SWITCH||LA88_0==StringLiteral||(LA88_0>=THIS && LA88_0<=THROW)||(LA88_0>=TRUE && LA88_0<=TYPEOF)||(LA88_0>=VAR && LA88_0<=VOID)||(LA88_0>=WHILE && LA88_0<=WITH)))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1929:13: se= sourceElement
					{
					DebugLocation(1929, 15);
					PushFollow(Follow._sourceElement_in_functionBody9585);
					se=sourceElement();
					PopFollow();

					DebugLocation(1930, 13);
					 _currentBody.Statements.Add(se); 

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }

			DebugLocation(1932, 9);
			Match(input,RBRACE,Follow._RBRACE_in_functionBody9620); 

			}


			    value = _currentBody.CreateBlock();
			    _currentBody = tempBody;

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionBody", 84);
			LeaveRule("functionBody", 84);
			LeaveRule_functionBody();
		}
		DebugLocation(1933, 1);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return value;

	}
	// $ANTLR end "functionBody"


	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// ..\\ES3.g:1939:1: program returns [ProgramSyntax value] : (follow= sourceElement )* ;
	[GrammarRule("program")]
	private ProgramSyntax program()
	{
		EnterRule_program();
		EnterRule("program", 85);
		TraceIn("program", 85);
		ProgramSyntax value = default(ProgramSyntax);

		SyntaxNode follow = default(SyntaxNode);


		    _currentBody = new BlockBuilder();

		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(1939, 1);
		try
		{
			// ..\\ES3.g:1943:2: ( (follow= sourceElement )* )
			DebugEnterAlt(1);
			// ..\\ES3.g:1944:9: (follow= sourceElement )*
			{
			DebugLocation(1944, 9);
			// ..\\ES3.g:1944:9: (follow= sourceElement )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==ADD||LA89_0==BREAK||LA89_0==CONTINUE||LA89_0==DEC||LA89_0==DELETE||LA89_0==DO||LA89_0==DecimalLiteral||LA89_0==FALSE||LA89_0==FOR||LA89_0==FUNCTION||(LA89_0>=HexIntegerLiteral && LA89_0<=IF)||LA89_0==INC||LA89_0==INV||LA89_0==Identifier||(LA89_0>=LBRACE && LA89_0<=LBRACK)||LA89_0==LPAREN||(LA89_0>=NEW && LA89_0<=NOT)||LA89_0==NULL||LA89_0==OctalIntegerLiteral||LA89_0==RETURN||LA89_0==RegularExpressionLiteral||LA89_0==SEMIC||LA89_0==SUB||LA89_0==SWITCH||LA89_0==StringLiteral||(LA89_0>=THIS && LA89_0<=THROW)||(LA89_0>=TRUE && LA89_0<=TYPEOF)||(LA89_0>=VAR && LA89_0<=VOID)||(LA89_0>=WHILE && LA89_0<=WITH)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\ES3.g:1945:13: follow= sourceElement
					{
					DebugLocation(1945, 19);
					PushFollow(Follow._sourceElement_in_program9668);
					follow=sourceElement();
					PopFollow();

					DebugLocation(1946, 13);
					 _currentBody.Statements.Add(follow); 

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(1948, 9);
			 value = _currentBody.CreateProgram(); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("program", 85);
			LeaveRule("program", 85);
			LeaveRule_program();
		}
		DebugLocation(1949, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return value;

	}
	// $ANTLR end "program"


	partial void EnterRule_sourceElement();
	partial void LeaveRule_sourceElement();

	// $ANTLR start "sourceElement"
	// ..\\ES3.g:1956:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );
	[GrammarRule("sourceElement")]
	private SyntaxNode sourceElement()
	{
		EnterRule_sourceElement();
		EnterRule("sourceElement", 86);
		TraceIn("sourceElement", 86);
		SyntaxNode value = default(SyntaxNode);

		SyntaxNode func = default(SyntaxNode);
		SyntaxNode stat = default(SyntaxNode);

		try { DebugEnterRule(GrammarFileName, "sourceElement");
		DebugLocation(1956, 1);
		try
		{
			// ..\\ES3.g:1962:2: ({...}?func= functionDeclaration |stat= statement )
			int alt90=2;
			try { DebugEnterDecision(90, false);
			try
			{
				alt90 = dfa90.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\ES3.g:1962:4: {...}?func= functionDeclaration
				{
				DebugLocation(1962, 4);
				if (!(( input.LA(1) == FUNCTION )))
				{
					throw new FailedPredicateException(input, "sourceElement", " input.LA(1) == FUNCTION ");
				}
				DebugLocation(1962, 37);
				PushFollow(Follow._functionDeclaration_in_sourceElement9738);
				func=functionDeclaration();
				PopFollow();

				DebugLocation(1962, 58);
				 value = func; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\ES3.g:1963:4: stat= statement
				{
				DebugLocation(1963, 8);
				PushFollow(Follow._statement_in_sourceElement9747);
				stat=statement();
				PopFollow();

				DebugLocation(1963, 19);
				 value = stat; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("sourceElement", 86);
			LeaveRule("sourceElement", 86);
			LeaveRule_sourceElement();
		}
		DebugLocation(1964, 1);
		} finally { DebugExitRule(GrammarFileName, "sourceElement"); }
		return value;

	}
	// $ANTLR end "sourceElement"
	#endregion Rules


	#region DFA
	private DFA58 dfa58;
	private DFA59 dfa59;
	private DFA90 dfa90;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa58 = new DFA58( this, SpecialStateTransition58 );
		dfa59 = new DFA59( this );
		dfa90 = new DFA90( this, SpecialStateTransition90 );
	}

	private class DFA58 : DFA
	{
		private const string DFA58_eotS =
			"\x28\xFFFF";
		private const string DFA58_eofS =
			"\x28\xFFFF";
		private const string DFA58_minS =
			"\x1\x5\x2\x0\x25\xFFFF";
		private const string DFA58_maxS =
			"\x1\xA6\x2\x0\x25\xFFFF";
		private const string DFA58_acceptS =
			"\x3\xFFFF\x1\x3\x22\xFFFF\x1\x1\x1\x2";
		private const string DFA58_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x25\xFFFF}>";
		private static readonly string[] DFA58_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x3\xE\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x2\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x1\x1\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\xC\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\x2\x3\x2"+
				"\xFFFF\x2\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
		private static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
		private static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
		private static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
		private static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
		private static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
		private static readonly short[][] DFA58_transition;

		static DFA58()
		{
			int numStates = DFA58_transitionS.Length;
			DFA58_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA58_transition[i] = DFA.UnpackEncodedString(DFA58_transitionS[i]);
			}
		}

		public DFA58( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}

		public override string Description { get { return "1229:1: statement returns [SyntaxNode value] options {k=1; } : ({...}?b= block |{...}?func= functionDeclaration |st= statementTail );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition58(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA58_1 = input.LA(1);


				int index58_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == LBRACE ))) {s = 38;}

				else if ((true)) {s = 3;}


				input.Seek(index58_1);
				if (s >= 0) return s;
				break;
			case 1:
				int LA58_2 = input.LA(1);


				int index58_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 39;}

				else if ((true)) {s = 3;}


				input.Seek(index58_2);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 58, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\xF\xFFFF";
		private const string DFA59_eofS =
			"\x4\xFFFF\x1\x3\xA\xFFFF";
		private const string DFA59_minS =
			"\x1\x5\x3\xFFFF\x1\x5\xA\xFFFF";
		private const string DFA59_maxS =
			"\x1\xA6\x3\xFFFF\x1\xA9\xA\xFFFF";
		private const string DFA59_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1"+
			"\x9\x1\xB\x1\xC\x1\xD\x1\xA";
		private const string DFA59_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x8\xE\xFFFF\x1\x7\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x6\x5\xFFFF\x1\x3\x9\xFFFF\x1\x3\x4\xFFFF\x1\x6\x2\xFFFF\x1"+
				"\x3\x5\xFFFF\x1\x3\x1\x5\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x4"+
				"\x5\xFFFF\x2\x3\x3\xFFFF\x1\x3\xE\xFFFF\x2\x3\x1\xFFFF\x1\x3\x5\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x9\x3\xFFFF\x1\x3\x1\xFFFF\x1\x2\xA\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\xB\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xC\x2\xFFFF\x1\x3\x1\xD"+
				"\x1\x3\x2\xFFFF\x1\x1\x1\x3\x2\xFFFF\x1\x6\x1\xA",
				"",
				"",
				"",
				"\x4\x3\x2\xFFFF\x1\x3\xE\xFFFF\x1\xE\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x7\xFFFF\x2\x3\xF\xFFFF\x2\x3\x6\xFFFF\x3\x3\x9\xFFFF"+
				"\x3\x3\x2\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x5\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x2\x3\xC\xFFFF\x2\x3\x6\xFFFF\x4\x3\x1\xFFFF\x4"+
				"\x3\x3\xFFFF\x2\x3\x16\xFFFF\x2\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "1240:1: statementTail returns [SyntaxNode value] : (vst= variableStatement |est= emptyStatement |exst= expressionStatement |ifst= ifStatement |itst= iterationStatement |cost= continueStatement |brst= breakStatement |rst= returnStatement |wist= withStatement |last= labelledStatement |swst= switchStatement |thst= throwStatement |trst= tryStatement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA90 : DFA
	{
		private const string DFA90_eotS =
			"\x27\xFFFF";
		private const string DFA90_eofS =
			"\x27\xFFFF";
		private const string DFA90_minS =
			"\x1\x5\x1\x0\x25\xFFFF";
		private const string DFA90_maxS =
			"\x1\xA6\x1\x0\x25\xFFFF";
		private const string DFA90_acceptS =
			"\x2\xFFFF\x1\x2\x23\xFFFF\x1\x1";
		private const string DFA90_specialS =
			"\x1\xFFFF\x1\x0\x25\xFFFF}>";
		private static readonly string[] DFA90_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x2\xE\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x5\xFFFF\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x1\x5\xFFFF\x2\x2\x3\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x5\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\xE\xFFFF\x2\x2\x1\xFFFF\x1\x2\x5\xFFFF\x1\x2\xC"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x3\x2\x2\xFFFF\x2\x2\x2\xFFFF"+
				"\x2\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA90_eot = DFA.UnpackEncodedString(DFA90_eotS);
		private static readonly short[] DFA90_eof = DFA.UnpackEncodedString(DFA90_eofS);
		private static readonly char[] DFA90_min = DFA.UnpackEncodedStringToUnsignedChars(DFA90_minS);
		private static readonly char[] DFA90_max = DFA.UnpackEncodedStringToUnsignedChars(DFA90_maxS);
		private static readonly short[] DFA90_accept = DFA.UnpackEncodedString(DFA90_acceptS);
		private static readonly short[] DFA90_special = DFA.UnpackEncodedString(DFA90_specialS);
		private static readonly short[][] DFA90_transition;

		static DFA90()
		{
			int numStates = DFA90_transitionS.Length;
			DFA90_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA90_transition[i] = DFA.UnpackEncodedString(DFA90_transitionS[i]);
			}
		}

		public DFA90( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 90;
			this.eot = DFA90_eot;
			this.eof = DFA90_eof;
			this.min = DFA90_min;
			this.max = DFA90_max;
			this.accept = DFA90_accept;
			this.special = DFA90_special;
			this.transition = DFA90_transition;
		}

		public override string Description { get { return "1956:1: sourceElement returns [SyntaxNode value] options {k=1; } : ({...}?func= functionDeclaration |stat= statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition90(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA90_1 = input.LA(1);


				int index90_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((( input.LA(1) == FUNCTION ))) {s = 38;}

				else if ((true)) {s = 2;}


				input.Seek(index90_1);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 90, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _reservedWord_in_token1759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_token1764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _punctuator_in_token1769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_token1774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_token1779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyword_in_reservedWord1792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _futureReservedWord_in_reservedWord1797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_reservedWord1802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_reservedWord1807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_keyword1821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_futureReservedWord1956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_punctuator2236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_literal2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanLiteral_in_literal2503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_literal2512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_literal2521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RegularExpressionLiteral_in_literal2531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_booleanLiteral2548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_booleanLiteral2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DecimalLiteral_in_numericLiteral2766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OctalIntegerLiteral_in_numericLiteral2775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HexIntegerLiteral_in_numericLiteral2784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primaryExpression3198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_primaryExpression3207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression3216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression3225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression3234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_primaryExpression3243 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_primaryExpression3247 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_primaryExpression3250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_arrayLiteral3289 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x451410008UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3309 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _COMMA_in_arrayLiteral3355 = new BitSet(new ulong[]{0x4040100A08000020UL,0x400416000460A210UL,0x451410008UL});
		public static readonly BitSet _arrayItem_in_arrayLiteral3359 = new BitSet(new ulong[]{0x8000000UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_arrayLiteral3413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_arrayItem3432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_objectLiteral3485 = new BitSet(new ulong[]{0x100000000000UL,0x2004000000008010UL,0x400000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3499 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_objectLiteral3515 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x400000UL});
		public static readonly BitSet _propertyAssignment_in_objectLiteral3529 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_objectLiteral3559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyFunctionAssignment_in_propertyAssignment3585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyValueAssignment_in_propertyAssignment3610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_propertyFunctionAssignment3658 = new BitSet(new ulong[]{0x100000000000UL,0x4000000008010UL,0x400000UL});
		public static readonly BitSet _propertyName_in_propertyFunctionAssignment3680 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _formalParameterList_in_propertyFunctionAssignment3716 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_propertyFunctionAssignment3753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyName_in_propertyValueAssignment3805 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_propertyValueAssignment3825 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_propertyValueAssignment3837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_accessor3875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_propertyName3897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_propertyName3906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_propertyName3915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberExpression3941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionExpression_in_memberExpression3950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments3973 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410009UL});
		public static readonly BitSet _assignmentExpression_in_arguments3979 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _COMMA_in_arguments3985 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_arguments3989 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_arguments3998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_generics4020 = new BitSet(new ulong[]{0x4040100A00000020UL,0x200416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_generics4026 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _COMMA_in_generics4032 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_generics4036 = new BitSet(new ulong[]{0x8000000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_generics4045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_leftHandSideExpression4094 = new BitSet(new ulong[]{0x4040100000000000UL,0x4120004608010UL,0x11400008UL});
		public static readonly BitSet _memberExpression_in_leftHandSideExpression4128 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _generics_in_leftHandSideExpression4173 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _arguments_in_leftHandSideExpression4222 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _LBRACK_in_leftHandSideExpression4257 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_leftHandSideExpression4261 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _RBRACK_in_leftHandSideExpression4263 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _DOT_in_leftHandSideExpression4300 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_leftHandSideExpression4304 = new BitSet(new ulong[]{0x8000000002UL,0x4600000UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression4350 = new BitSet(new ulong[]{0x200000002UL,0x200UL});
		public static readonly BitSet _postfixOperator_in_postfixExpression4358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_postfixOperator4380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_postfixOperator4389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfixExpression_in_unaryExpression4412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryOperator_in_unaryExpression4421 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression4425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DELETE_in_unaryOperator4443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_unaryOperator4450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPEOF_in_unaryOperator4457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INC_in_unaryOperator4464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEC_in_unaryOperator4471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ADD_in_unaryOperator4480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryOperator4489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INV_in_unaryOperator4496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryOperator4503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4531 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _MUL_in_multiplicativeExpression4542 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression4551 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression4559 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression4569 = new BitSet(new ulong[]{0x1000000002UL,0x280000000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4599 = new BitSet(new ulong[]{0x22UL,0x0UL,0x10000UL});
		public static readonly BitSet _ADD_in_additiveExpression4610 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SUB_in_additiveExpression4618 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression4628 = new BitSet(new ulong[]{0x22UL,0x0UL,0x10000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4659 = new BitSet(new ulong[]{0x2UL,0x0UL,0xA40UL});
		public static readonly BitSet _SHL_in_shiftExpression4670 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SHR_in_shiftExpression4678 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SHU_in_shiftExpression4686 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression4696 = new BitSet(new ulong[]{0x2UL,0x0UL,0xA40UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4727 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _LT_in_relationalExpression4738 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GT_in_relationalExpression4746 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _LTE_in_relationalExpression4754 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GTE_in_relationalExpression4762 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpression4770 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _IN_in_relationalExpression4778 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression4788 = new BitSet(new ulong[]{0x2UL,0x30000503UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4814 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn4825 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GT_in_relationalExpressionNoIn4833 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _LTE_in_relationalExpressionNoIn4841 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _GTE_in_relationalExpressionNoIn4849 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _INSTANCEOF_in_relationalExpressionNoIn4857 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn4868 = new BitSet(new ulong[]{0x2UL,0x30000403UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4899 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _EQ_in_equalityExpression4910 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NEQ_in_equalityExpression4918 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SAME_in_equalityExpression4926 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NSAME_in_equalityExpression4934 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression4944 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn4970 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _EQ_in_equalityExpressionNoIn4981 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NEQ_in_equalityExpressionNoIn4989 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _SAME_in_equalityExpressionNoIn4997 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _NSAME_in_equalityExpressionNoIn5005 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn5015 = new BitSet(new ulong[]{0x1000000000002UL,0x90000000000UL,0x10UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression5042 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpression5048 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression5052 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5073 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _AND_in_bitwiseANDExpressionNoIn5079 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn5083 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression5106 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpression5112 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression5116 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5139 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _XOR_in_bitwiseXORExpressionNoIn5145 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn5149 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression5171 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpression5177 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression5181 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5203 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _OR_in_bitwiseORExpressionNoIn5209 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn5213 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression5239 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpression5245 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression5249 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5270 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _LAND_in_logicalANDExpressionNoIn5276 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn5280 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression5302 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpression5308 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression5312 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn5334 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _LOR_in_logicalORExpressionNoIn5340 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn5344 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _logicalORExpression_in_conditionalExpression5371 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpression5377 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression5381 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5383 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression5387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn5408 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _QUE_in_conditionalExpressionNoIn5414 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn5418 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_conditionalExpressionNoIn5420 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn5424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression5465 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x20000021480UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression5512 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression5528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_assignmentOperator5563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_assignmentExpressionNoIn5651 = new BitSet(new ulong[]{0x2000000942UL,0x800500000000UL,0x20000021480UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpressionNoIn5699 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_assignmentExpressionNoIn5715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression5781 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expression5815 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_expression5831 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn5891 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _COMMA_in_expressionNoIn5925 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn5941 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _SEMIC_in_semic5994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_semic5999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RBRACE_in_semic6004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOL_in_semic6011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MultiLineComment_in_semic6019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement6055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_statement6066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementTail_in_statement6075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_statementTail6105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statementTail6114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statementTail6123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statementTail6132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iterationStatement_in_statementTail6141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statementTail6150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statementTail6159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statementTail6168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statementTail6177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_statementTail6186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statementTail6195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statementTail6204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statementTail6213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block6252 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_block6278 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _RBRACE_in_block6313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatements6362 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _VAR_in_variableStatement6426 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement6430 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _COMMA_in_variableStatement6464 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclaration_in_variableStatement6468 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_variableStatement6503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclaration6533 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclaration6557 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclaration6561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn6627 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _ASSIGN_in_variableDeclarationNoIn6651 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_variableDeclarationNoIn6655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_emptyStatement6710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement6736 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_expressionStatement6738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifStatement6774 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_ifStatement6776 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_ifStatement6780 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_ifStatement6782 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_ifStatement6786 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _ELSE_in_ifStatement6824 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_ifStatement6828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doStatement_in_iterationStatement6885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_iterationStatement6894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_iterationStatement6904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_doStatement6931 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_doStatement6935 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _WHILE_in_doStatement6937 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_doStatement6939 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_doStatement6943 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_doStatement6945 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_doStatement6947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement6981 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_whileStatement6983 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_whileStatement6987 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_whileStatement6989 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_whileStatement6993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forStatement7038 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_forStatement7048 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x651410028UL});
		public static readonly BitSet _forControl_in_forStatement7060 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_forStatement7080 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_forStatement7084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlVar_in_forControl7119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlExpression_in_forControl7144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forControlSemic_in_forControl7169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_forControlVar7213 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar7217 = new BitSet(new ulong[]{0x8000000UL,0x100UL,0x20UL});
		public static readonly BitSet _IN_in_forControlVar7251 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlVar7255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_forControlVar7328 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forControlVar7332 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlVar7383 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlVar7425 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlVar7484 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlVar7526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionNoIn_in_forControlExpression7612 = new BitSet(new ulong[]{0x0UL,0x100UL,0x20UL});
		public static readonly BitSet _IN_in_forControlExpression7661 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlExpression7665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlExpression7716 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlExpression7758 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlExpression7817 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlExpression7859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMIC_in_forControlSemic7942 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_forControlSemic7968 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _SEMIC_in_forControlSemic8003 = new BitSet(new ulong[]{0x4040100A00000022UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_forControlSemic8029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_continueStatement8089 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x20UL});
		public static readonly BitSet _Identifier_in_continueStatement8125 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_continueStatement8160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_breakStatement8205 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800008000UL,0x20UL});
		public static readonly BitSet _Identifier_in_breakStatement8241 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_breakStatement8264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_returnStatement8309 = new BitSet(new ulong[]{0x4040900A08000020UL,0x200416080460A210UL,0x451410028UL});
		public static readonly BitSet _expression_in_returnStatement8345 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_returnStatement8380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withStatement8410 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_withStatement8412 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_withStatement8416 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_withStatement8418 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_withStatement8422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_switchStatement8457 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_switchStatement8459 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_switchStatement8463 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_switchStatement8465 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _LBRACE_in_switchStatement8467 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _defaultClause_in_switchStatement8508 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _caseClause_in_switchStatement8548 = new BitSet(new ulong[]{0x400200000UL,0x2000000000000000UL});
		public static readonly BitSet _RBRACE_in_switchStatement8583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseClause8621 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_caseClause8625 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_caseClause8627 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_caseClause8653 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _DEFAULT_in_defaultClause8717 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_defaultClause8719 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_defaultClause8745 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _Identifier_in_labelledStatement8811 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _COLON_in_labelledStatement8813 = new BitSet(new ulong[]{0x4840104A20004020UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _statement_in_labelledStatement8817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_throwStatement8849 = new BitSet(new ulong[]{0x4040100A00000020UL,0x416000460A210UL,0x451410008UL});
		public static readonly BitSet _expression_in_throwStatement8855 = new BitSet(new ulong[]{0x800008000000UL,0x2000000800000000UL,0x20UL});
		public static readonly BitSet _semic_in_throwStatement8859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_tryStatement8891 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_tryStatement8895 = new BitSet(new ulong[]{0x200000000400000UL});
		public static readonly BitSet _catchClause_in_tryStatement8921 = new BitSet(new ulong[]{0x200000000400002UL});
		public static readonly BitSet _finallyClause_in_tryStatement8969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_tryStatement9028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_in_catchClause9090 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _LPAREN_in_catchClause9092 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_catchClause9096 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_catchClause9098 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_catchClause9102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_finallyClause9136 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _block_in_finallyClause9140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionDeclaration9193 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_functionDeclaration9197 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionDeclaration9214 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionDeclaration9230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_functionExpression9273 = new BitSet(new ulong[]{0x0UL,0x4008000UL});
		public static readonly BitSet _Identifier_in_functionExpression9299 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _formalParameterList_in_functionExpression9336 = new BitSet(new ulong[]{0x0UL,0x4200000UL});
		public static readonly BitSet _functionBody_in_functionExpression9358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_formalParameterList9396 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x1UL});
		public static readonly BitSet _Identifier_in_formalParameterList9422 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _COMMA_in_formalParameterList9468 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _Identifier_in_formalParameterList9472 = new BitSet(new ulong[]{0x8000000UL,0x0UL,0x1UL});
		public static readonly BitSet _RPAREN_in_formalParameterList9526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_functionBody9559 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _sourceElement_in_functionBody9585 = new BitSet(new ulong[]{0x4840104A20004020UL,0xA00416000460A230UL,0x6673490028UL});
		public static readonly BitSet _RBRACE_in_functionBody9620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sourceElement_in_program9668 = new BitSet(new ulong[]{0x4840104A20004022UL,0x800416000460A230UL,0x6673490028UL});
		public static readonly BitSet _functionDeclaration_in_sourceElement9738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_sourceElement9747 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace  Jint.Parser 
