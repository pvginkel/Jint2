//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To update this file, extend CodeSetQueries.xml with a new code set,
//     right click on CodeSetQueries.tt and select Run Custom Tool.
// </auto-generated>
//------------------------------------------------------------------------------

using Jint.Native;

namespace Jint.Runtime
{
    partial class JintRuntime
    {
        public static bool Operation_Equal(JsInstance left, JsInstance right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(JsInstance left, bool right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(JsInstance left, double right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(JsInstance left, string right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(bool left, JsInstance right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(bool left, double right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(bool left, string right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(double left, JsInstance right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(double left, bool right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(double left, string right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(string left, JsInstance right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(string left, bool right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_Equal(string left, double right)
        {
            return CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(JsInstance left, JsInstance right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(JsInstance left, bool right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(JsInstance left, double right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(JsInstance left, string right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(bool left, JsInstance right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(bool left, double right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(bool left, string right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(double left, JsInstance right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(double left, bool right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(double left, string right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(string left, JsInstance right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(string left, bool right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_NotEqual(string left, double right)
        {
            return !CompareEquality(left, right);
        }

        public static bool Operation_LessThan(JsInstance left, JsInstance right)
        {
            double result;
            if (TryCompareRange(left, right, out result))
                return result < 0;
            return false;
        }

        public static bool Operation_LessThan(JsInstance left, bool right)
        {
            return left.ToNumber() < JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThan(JsInstance left, double right)
        {
            return left.ToNumber() < right;
        }

        public static bool Operation_LessThan(JsInstance left, string right)
        {
            return left.ToNumber() < JsString.StringToNumber(right);
        }

        public static bool Operation_LessThan(bool left, JsInstance right)
        {
            return JsBoolean.BooleanToNumber(left) < right.ToNumber();
        }

        public static bool Operation_LessThan(bool left, bool right)
        {
            return JsBoolean.BooleanToNumber(left) < JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThan(bool left, double right)
        {
            return JsBoolean.BooleanToNumber(left) < right;
        }

        public static bool Operation_LessThan(bool left, string right)
        {
            return JsBoolean.BooleanToNumber(left) < JsString.StringToNumber(right);
        }

        public static bool Operation_LessThan(double left, JsInstance right)
        {
            return left < right.ToNumber();
        }

        public static bool Operation_LessThan(double left, bool right)
        {
            return left < JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThan(double left, string right)
        {
            return left < JsString.StringToNumber(right);
        }

        public static bool Operation_LessThan(string left, JsInstance right)
        {
            return JsString.StringToNumber(left) < right.ToNumber();
        }

        public static bool Operation_LessThan(string left, bool right)
        {
            return JsString.StringToNumber(left) < JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThan(string left, double right)
        {
            return JsString.StringToNumber(left) < right;
        }

        public static bool Operation_LessThan(string left, string right)
        {
            return JsString.StringToNumber(left) < JsString.StringToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(JsInstance left, JsInstance right)
        {
            double result;
            if (TryCompareRange(left, right, out result))
                return result <= 0;
            return false;
        }

        public static bool Operation_LessThanOrEqual(JsInstance left, bool right)
        {
            return left.ToNumber() <= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(JsInstance left, double right)
        {
            return left.ToNumber() <= right;
        }

        public static bool Operation_LessThanOrEqual(JsInstance left, string right)
        {
            return left.ToNumber() <= JsString.StringToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(bool left, JsInstance right)
        {
            return JsBoolean.BooleanToNumber(left) <= right.ToNumber();
        }

        public static bool Operation_LessThanOrEqual(bool left, bool right)
        {
            return JsBoolean.BooleanToNumber(left) <= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(bool left, double right)
        {
            return JsBoolean.BooleanToNumber(left) <= right;
        }

        public static bool Operation_LessThanOrEqual(bool left, string right)
        {
            return JsBoolean.BooleanToNumber(left) <= JsString.StringToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(double left, JsInstance right)
        {
            return left <= right.ToNumber();
        }

        public static bool Operation_LessThanOrEqual(double left, bool right)
        {
            return left <= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(double left, string right)
        {
            return left <= JsString.StringToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(string left, JsInstance right)
        {
            return JsString.StringToNumber(left) <= right.ToNumber();
        }

        public static bool Operation_LessThanOrEqual(string left, bool right)
        {
            return JsString.StringToNumber(left) <= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_LessThanOrEqual(string left, double right)
        {
            return JsString.StringToNumber(left) <= right;
        }

        public static bool Operation_LessThanOrEqual(string left, string right)
        {
            return JsString.StringToNumber(left) <= JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThan(JsInstance left, JsInstance right)
        {
            double result;
            if (TryCompareRange(left, right, out result))
                return result > 0;
            return false;
        }

        public static bool Operation_GreaterThan(JsInstance left, bool right)
        {
            return left.ToNumber() > JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThan(JsInstance left, double right)
        {
            return left.ToNumber() > right;
        }

        public static bool Operation_GreaterThan(JsInstance left, string right)
        {
            return left.ToNumber() > JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThan(bool left, JsInstance right)
        {
            return JsBoolean.BooleanToNumber(left) > right.ToNumber();
        }

        public static bool Operation_GreaterThan(bool left, bool right)
        {
            return JsBoolean.BooleanToNumber(left) > JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThan(bool left, double right)
        {
            return JsBoolean.BooleanToNumber(left) > right;
        }

        public static bool Operation_GreaterThan(bool left, string right)
        {
            return JsBoolean.BooleanToNumber(left) > JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThan(double left, JsInstance right)
        {
            return left > right.ToNumber();
        }

        public static bool Operation_GreaterThan(double left, bool right)
        {
            return left > JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThan(double left, string right)
        {
            return left > JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThan(string left, JsInstance right)
        {
            return JsString.StringToNumber(left) > right.ToNumber();
        }

        public static bool Operation_GreaterThan(string left, bool right)
        {
            return JsString.StringToNumber(left) > JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThan(string left, double right)
        {
            return JsString.StringToNumber(left) > right;
        }

        public static bool Operation_GreaterThan(string left, string right)
        {
            return JsString.StringToNumber(left) > JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(JsInstance left, JsInstance right)
        {
            double result;
            if (TryCompareRange(left, right, out result))
                return result >= 0;
            return false;
        }

        public static bool Operation_GreaterThanOrEqual(JsInstance left, bool right)
        {
            return left.ToNumber() >= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(JsInstance left, double right)
        {
            return left.ToNumber() >= right;
        }

        public static bool Operation_GreaterThanOrEqual(JsInstance left, string right)
        {
            return left.ToNumber() >= JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(bool left, JsInstance right)
        {
            return JsBoolean.BooleanToNumber(left) >= right.ToNumber();
        }

        public static bool Operation_GreaterThanOrEqual(bool left, bool right)
        {
            return JsBoolean.BooleanToNumber(left) >= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(bool left, double right)
        {
            return JsBoolean.BooleanToNumber(left) >= right;
        }

        public static bool Operation_GreaterThanOrEqual(bool left, string right)
        {
            return JsBoolean.BooleanToNumber(left) >= JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(double left, JsInstance right)
        {
            return left >= right.ToNumber();
        }

        public static bool Operation_GreaterThanOrEqual(double left, bool right)
        {
            return left >= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(double left, string right)
        {
            return left >= JsString.StringToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(string left, JsInstance right)
        {
            return JsString.StringToNumber(left) >= right.ToNumber();
        }

        public static bool Operation_GreaterThanOrEqual(string left, bool right)
        {
            return JsString.StringToNumber(left) >= JsBoolean.BooleanToNumber(right);
        }

        public static bool Operation_GreaterThanOrEqual(string left, double right)
        {
            return JsString.StringToNumber(left) >= right;
        }

        public static bool Operation_GreaterThanOrEqual(string left, string right)
        {
            return JsString.StringToNumber(left) >= JsString.StringToNumber(right);
        }

        public static bool Operation_Same(JsInstance left, JsInstance right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(JsInstance left, bool right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(JsInstance left, double right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(JsInstance left, string right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(bool left, JsInstance right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(bool left, double right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(bool left, string right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(double left, JsInstance right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(double left, bool right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(double left, string right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(string left, JsInstance right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(string left, bool right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_Same(string left, double right)
        {
            return CompareSame(left, right);
        }

        public static bool Operation_NotSame(JsInstance left, JsInstance right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(JsInstance left, bool right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(JsInstance left, double right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(JsInstance left, string right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(bool left, JsInstance right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(bool left, double right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(bool left, string right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(double left, JsInstance right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(double left, bool right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(double left, string right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(string left, JsInstance right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(string left, bool right)
        {
            return !CompareSame(left, right);
        }

        public static bool Operation_NotSame(string left, double right)
        {
            return !CompareSame(left, right);
        }

    }
}
