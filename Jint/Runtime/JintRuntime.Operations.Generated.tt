<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     To update this file, extend CodeSetQueries.xml with a new code set,
//     right click on CodeSetQueries.tt and select Run Custom Tool.
// </auto-generated>
//------------------------------------------------------------------------------

using Jint.Native;

namespace Jint.Runtime
{
    partial class JintRuntime
    {
<#
    foreach (var operation in new[] { Operation.Equal, Operation.NotEqual, Operation.LessThan, Operation.LessThanOrEqual, Operation.GreaterThan, Operation.GreaterThanOrEqual, Operation.Same, Operation.NotSame }) {
        foreach (var left in new[] { "JsInstance", "bool", "double", "string" }) {
            foreach (var right in new[] { "JsInstance", "bool", "double", "string" }) {
                bool isStatic = true;
                if (
                    (operation == Operation.Equal || operation == Operation.NotEqual) &&
                    (left == "JsInstance" || right == "JsInstance")
                )
                    isStatic = false;

                bool skip = false;

                switch (operation) {
                    case Operation.Equal:
                    case Operation.Same:
                    case Operation.NotEqual:
                    case Operation.NotSame:
                        skip = left == right && left != "JsInstance";
                        break;

                    case Operation.LessThan:
                    case Operation.LessThanOrEqual:
                    case Operation.GreaterThan:
                    case Operation.GreaterThanOrEqual:
                        skip = left == "double" && right == "double";
                        break;
                }

                if (skip)
                    continue;
#>
        public <#= isStatic ? "static " : "" #>bool Operation_<#= operation.ToString() #>(<#= left #> left, <#= right #> right)
        {
<# switch (operation) { #>
<#  case Operation.Equal: { #>
<#      if (left == right && left != "JsInstance") { #>
            return left == right;
<#      } else { #>
            return CompareEquality(left, right);
<#      } #>
<# break; } case Operation.NotEqual: { #>
<#      if (left == right && left != "JsInstance") { #>
            return left != right;
<#      } else { #>
            return !CompareEquality(left, right);
<#      } #>
<# break; } case Operation.Same: { #>
<#      if (left == right && left != "JsInstance") { #>
            return left == right;
<#      } else { #>
            return CompareSame(left, right);
<#      } #>
<# break; } case Operation.NotSame: { #>
<#      if (left == right && left != "JsInstance") { #>
            return left != right;
<#      } else { #>
            return !CompareSame(left, right);
<#      } #>
<# break; } default: { #>
<# if (left == "JsInstance" && right == "JsInstance") { #>
            double result;
            if (TryCompareRange(left, right, out result))
<#      switch (operation) { #>
<#      case Operation.GreaterThan: { #>
                return result > 0;
<#          break; }
        case Operation.GreaterThanOrEqual: { #>
                return result >= 0;
<#          break; }
        case Operation.LessThan: { #>
                return result < 0;
<#          break; }
        case Operation.LessThanOrEqual: { #>
                return result <= 0;
<#          break; }
        default: throw new NotImplementedException();
            break;
        } #>
            return false;
<# } else { #>
<#      switch (operation) { #>
<#      case Operation.GreaterThan: { #>
            return <#= MakeNumber(left, "left") #> > <#= MakeNumber(right, "right") #>;
<#          break; }
        case Operation.GreaterThanOrEqual: { #>
            return <#= MakeNumber(left, "left") #> >= <#= MakeNumber(right, "right") #>;
<#          break; }
        case Operation.LessThan: { #>
            return <#= MakeNumber(left, "left") #> < <#= MakeNumber(right, "right") #>;
<#          break; }
        case Operation.LessThanOrEqual: { #>
            return <#= MakeNumber(left, "left") #> <= <#= MakeNumber(right, "right") #>;
<#          break; }
        default: throw new NotImplementedException();
            break;
    } #>
<# } #>
<# break; } #>
<# } #>
        }

<# } } } #>
    }
}
<#+
private enum Operation
{
    Equal,
    NotEqual,
    LessThan,
    LessThanOrEqual,
    GreaterThan,
    GreaterThanOrEqual,
    Same,
    NotSame
}

private string MakeNumber(string type, string name)
{
    switch (type)
    {
        case "double": return name;
        case "string": return "JsString.StringToNumber(" + name + ")";
        case "bool": return "JsBoolean.BooleanToNumber(" + name + ")";
        default: return name + ".ToNumber()";
    }
}
#>
